{"file_contents":{"design_guidelines.md":{"content":"# Peptide Dojo Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from premium educational platforms like Masterclass and traditional Japanese aesthetics, creating an immersive Shinto shrine experience that transforms learning into a sacred journey through chambers of knowledge.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors:**\n- Sumi Black: 0 0% 1% (rich backgrounds, primary text)\n- Shrine Crimson: 356 70% 51% (sacred highlights, CTAs, spiritual accents)\n- Washi White: 45 12% 97% (pure backgrounds, enlightenment moments)\n- Stone Gray: 210 4% 31% (secondary text, natural elements)\n\n**Sacred Landscape Gradients:**\n- Rising Sun: Crimson to warm amber (0 70% 51% to 30 85% 65%)\n- Mountain Mist: Cool gray to white (210 15% 85% to 45 12% 97%)\n- Forest Depth: Deep green to black (150 30% 15% to 0 0% 5%)\n\n### B. Typography\n**Font Family:** Inter (Google Fonts)\n- **Inter Bold (700):** Sacred headers, shrine chamber titles, primary CTAs\n- **Inter Medium (500):** Navigation, section headers, wisdom teachings\n- **Inter Regular (400):** Body text, detailed content, learning materials\n- **Inter Light (300):** Contemplative quotes, subtle guidance, captions\n\n**Hierarchy Principles:**\n- Generous ma (negative space) between elements\n- Asymmetrical text placement following natural flow\n- Clear visual hierarchy respecting sacred order\n\n### C. Layout System\n**Spacing Primitives:** Tailwind units of 4, 8, 12, 16, 24 for natural rhythm\n- Chamber spacing: py-16, px-8\n- Component breathing room: gap-8, gap-12\n- Sacred geometry: max-w-6xl containers with golden ratio proportions\n- Natural asymmetry in content placement\n\n### D. Component Library\n\n**Torii Gate Navigation:**\n- Horizontal beam design with subtle parallax depth\n- Crimson sacred rope (shimenawa) highlight for active states\n- Floating effect with subtle shadows\n- Responsive collapse to traditional menu\n\n**Sacred Chamber Sections:**\n- Each section represents a shrine chamber with distinct atmospheric treatment\n- Subtle parallax scrolling between layers\n- Gradient overlays inspired by Japanese landscapes\n- Natural flow between chambers with seamless transitions\n\n**Ema Plaque Learning Cards:**\n- Wooden plaque-inspired design with subtle grain textures\n- Rounded corners evoking traditional ema shape\n- Washi paper texture overlays at low opacity\n- Shadow depth suggesting hanging from sacred rope\n\n**Shoji Screen Content Panels:**\n- Grid-based layouts inspired by traditional shoji construction\n- Translucent overlays with subtle paper textures\n- Clean geometric divisions following sacred proportions\n- Soft lighting effects creating depth and warmth\n\n**Belt Progression Shrine Path:**\n- Journey visualization through torii gates\n- Sacred rope connecting progression points\n- Seasonal motifs reflecting advancement stages\n- Color evolution from stone gray to shrine crimson to enlightened gold\n\n**Sacred Scrolls Knowledge Base:**\n- Bamboo scroll-inspired expandable sections\n- Washi paper texture backgrounds\n- Calligraphy-inspired accent lines\n- Traditional binding visual elements\n\n### E. Visual Patterns & Atmospheric Elements\n\n**Texture Library:**\n- Washi paper grain: Subtle, organic texture overlays\n- Wood grain: Warm, natural surface treatments for cards\n- Stone texture: Grounding elements for stable foundations\n- Water ripples: Gentle movement in background elements\n\n**Sacred Geometry:**\n- Golden ratio proportions in layout structure\n- Circular elements representing ensō (enlightenment circles)\n- Hexagonal patterns inspired by sacred architecture\n- Natural asymmetry following traditional Japanese balance\n\n**Seasonal Nature Motifs:**\n- Cherry blossom petals: Spring learning, new beginnings\n- Bamboo leaves: Summer growth, steady progress\n- Maple leaves: Autumn wisdom, transformation\n- Pine needles: Winter endurance, mastery\n\n**Atmospheric Depth:**\n- Layered parallax with 3-5 depth levels\n- Mist effects using gradient overlays\n- Soft lighting creating chamber ambiance\n- Shadow play suggesting sacred architecture\n\n### F. Sacred Journey Experience\n\n**Chamber Progression:**\n1. **Entrance Gate**: Torii-framed hero with rising sun gradient\n2. **Purification Chamber**: Clean, minimalist introduction space\n3. **Learning Halls**: Rich content areas with ema plaque cards\n4. **Meditation Garden**: Peaceful reflection zones with nature motifs\n5. **Master's Sanctuary**: Advanced knowledge with golden accents\n\n**Interaction Philosophy:**\n- Gentle reveal animations following natural timing\n- Subtle hover states respecting sacred atmosphere\n- Scroll-triggered enlightenment moments\n- Progressive disclosure mirroring spiritual journey\n\n## Images\n**Hero Background:** Large rising sun disc gradient with layered torii gate silhouettes and mountain mist effects - primary visual anchor\n**Chamber Atmospheres:** Soft, atmospheric background treatments for each learning section\n**Sacred Elements:** Shimenawa rope dividers, komainu guardian silhouettes, ensō circles\n**Texture Overlays:** Washi paper, wood grain, and stone patterns for authentic material feel\n**Seasonal Accents:** Subtle nature motifs appropriate to content seasons\n\n## Brand Integration\n- \"PURITY. POWER. PROVEN.\" positioned as sacred teaching\n- CTA language: \"Enter the Sacred Learning,\" \"Advance Your Journey,\" \"Unlock Ancient Wisdom\"\n- Scientific precision balanced with spiritual metaphor\n- Premium positioning through authentic cultural respect\n\nThe design creates an immersive shrine experience where each interaction deepens understanding, combining Shrine Peptides' scientific authority with the transformative journey of traditional Japanese learning.","size_bytes":5672},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Peptide Dojo by Shrine Peptides\n\n## Overview\n\nPeptide Dojo is an educational companion site for Shrine Peptides that provides evidence-based peptide research and information. The platform transforms complex peptide science into a structured learning experience using a gamified \"dojo\" progression system. Users advance through belt levels (white → red → black → gold) while mastering peptide fundamentals, applications, and clinical protocols. The site serves as a trusted resource for researchers, clinicians, health professionals, and individuals seeking scientifically-backed peptide information.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**React + TypeScript SPA**: Modern single-page application built with React 18 and TypeScript for type safety and developer experience. Uses Vite as the build tool with hot module replacement for rapid development.\n\n**Component Design System**: Based on shadcn/ui components with Radix UI primitives for accessibility. Implements a custom design system that extends Shrine Peptides' brand identity into educational contexts. All components are built with TypeScript interfaces for props validation and development tooling.\n\n**Styling Strategy**: Tailwind CSS with custom CSS variables for brand colors and spacing. Implements a sophisticated color system supporting both light and dark themes. Uses the Inter font family throughout with specific weights for different UI elements (Bold for headlines, Medium for subheadings, Regular for body text, Light for captions).\n\n**Routing**: Client-side routing with Wouter for lightweight navigation between pages. Supports deep linking and browser history management without the overhead of larger routing libraries.\n\n**State Management**: TanStack Query (React Query) for server state management, caching, and API synchronization. Provides automatic background refetching, optimistic updates, and error handling for data fetching operations.\n\n### Backend Architecture\n\n**Express.js Server**: RESTful API server using Express with TypeScript. Configured with middleware for JSON parsing, CORS handling, and request logging. Supports both development and production environments with environment-specific configurations.\n\n**Database Abstraction**: Uses Drizzle ORM for type-safe database operations with PostgreSQL. Schema definitions are shared between client and server for consistent typing. Supports migrations and schema evolution through Drizzle Kit.\n\n**Storage Interface**: Implements a storage abstraction pattern with both in-memory and database implementations. Currently uses MemStorage for development with easy migration path to full database persistence. Interface supports CRUD operations for users and can be extended for additional entities.\n\n### Data Storage Solutions\n\n**PostgreSQL Database**: Primary data store using Neon serverless PostgreSQL for scalability and performance. Database connection pooling is handled through Neon's connection pooling features.\n\n**Schema Design**: User-centric schema with extensible design for future content types (peptides, modules, progress tracking). Uses UUID primary keys for distributed system compatibility and security.\n\n**ORM Integration**: Drizzle ORM provides type-safe database queries with zero-cost abstractions. Schema definitions generate TypeScript types automatically, ensuring database and application code stay synchronized.\n\n### Authentication and Authorization\n\n**Session-Based Architecture**: Prepared for session-based authentication using PostgreSQL session store (connect-pg-simple). Sessions are persisted in the database for scalability across server instances.\n\n**User Management**: Basic user schema with username/password authentication. Extensible design allows for additional user properties, roles, and permissions as the platform grows.\n\n### External Dependencies\n\n**UI Component Library**: Radix UI primitives for accessible, unstyled components. Provides keyboard navigation, screen reader support, and ARIA compliance out of the box.\n\n**Form Handling**: React Hook Form with Zod resolvers for type-safe form validation. Integrates with the component system for consistent error handling and user feedback.\n\n**Development Tools**: Comprehensive TypeScript configuration with strict typing. ESBuild for production bundling, development server with HMR, and Replit-specific development plugins for enhanced DX.\n\n**Database Services**: Neon serverless PostgreSQL for managed database hosting. Provides automatic scaling, connection pooling, and backup management without infrastructure overhead.\n\n**Styling Dependencies**: Tailwind CSS for utility-first styling with custom theme extensions. PostCSS for CSS processing and autoprefixer for browser compatibility.\n\n**Build and Deployment**: Vite build system optimized for modern browsers with code splitting and asset optimization. Supports both development and production builds with environment-specific configurations.","size_bytes":5042},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4027},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"attached_assets/Shrine Peptides Brand Reference Guide_1758945843206.md":{"content":"# Shrine Peptides Brand Reference Guide\n\n**For AI Development Tools & Prompting**\n\nThis comprehensive brand reference document provides all essential brand specifications for Shrine Peptides, designed specifically for use when prompting AI development tools like Replit, Claude, ChatGPT, and other code generation platforms.\n\n---\n\n## Brand Overview\n\n**Company Name:** Shrine Peptides  \n**Tagline:** \"PURITY. POWER. PROVEN.\"  \n**Industry:** Peptide supplements and wellness products  \n**Brand Personality:** Premium, scientific, trustworthy, performance-focused  \n\n---\n\n## Logo Specifications\n\n### Primary Logo Elements\n- **Main Symbol:** Japanese Torii gate (shrine gate) in white\n- **Accent Element:** Red/crimson circle (representing the rising sun)\n- **Typography:** \"SHRINE\" in bold uppercase, \"PEPTIDES\" in medium weight uppercase\n- **Tagline:** \"PURITY. POWER. PROVEN.\" in light weight uppercase\n\n### Logo Variations Available\n\n#### Vertical Logos\n- **Version 1 (v1):** Full logo with tagline\n- **Version 2 (v2):** Logo without tagline\n- **Color Options:** Black on white, White on black, Black on transparent, White on transparent\n\n#### Horizontal Logos  \n- **Version 1 (v1):** Full logo with tagline\n- **Version 2 (v2):** Logo without tagline\n- **Color Options:** Black on white, White on black, Black on transparent, White on transparent\n\n#### Icon Only\n- **Standalone Torii symbol** with red circle accent\n- **Color Options:** Black version, White version\n\n### Logo Usage Guidelines\n- Use vertical version for square/portrait layouts\n- Use horizontal version for landscape/wide layouts  \n- Use icon version for small spaces, favicons, or social media profile images\n- Maintain clear space around logo equal to the height of the \"S\" in \"SHRINE\"\n- Never stretch, skew, or alter proportions\n- Never change colors outside of approved palette\n\n---\n\n## Color Palette\n\n### Primary Colors\n\n#### Rich Black\n- **HEX:** #020304\n- **RGB:** R=2, G=3, B=4\n- **CMYK:** C=75, M=68, Y=66, K=89\n- **Usage:** Primary text, logo on light backgrounds, premium feel\n\n#### Shrine Crimson (Brand Red)\n- **HEX:** #DC2A2E  \n- **RGB:** R=220, G=42, B=46\n- **CMYK:** C=6, M=93, Y=82, K=1\n- **Pantone:** P 48-8 C\n- **Usage:** Accent color, CTAs, highlights, logo accent\n\n#### Pure White\n- **HEX:** #FFFFFF\n- **RGB:** R=255, G=255, B=255  \n- **CMYK:** C=0, M=0, Y=0, K=0\n- **Usage:** Logo on dark backgrounds, clean backgrounds, text on dark\n\n#### Graphite\n- **HEX:** #4F4F4F\n- **RGB:** R=79, G=79, B=79\n- **CMYK:** C=62, M=52, Y=50, K=47  \n- **Usage:** Secondary text, subtle elements, borders\n\n### Pattern Colors\n\n#### Phantom (Dark Pattern)\n- **HEX:** #151515\n- **RGB:** R=21, G=21, B=21\n- **CMYK:** C=73, M=67, Y=65, K=81\n- **Usage:** Dark background patterns, premium dark themes\n\n#### Ghost (Light Pattern)  \n- **HEX:** #EAEAEA\n- **RGB:** R=234, G=234, B=234\n- **CMYK:** C=7, M=5, Y=5, K=0\n- **Usage:** Light background patterns, subtle textures\n\n---\n\n## Typography\n\n### Primary Typeface: Inter\n\n#### Font Weights & Usage\n- **Inter Bold:** Headlines, main titles, logo text\n- **Inter Medium:** Subheadings, section headers  \n- **Inter Regular:** Body text, descriptions, general content\n- **Inter Light:** Design elements, subtle text, captions\n\n#### Character Set\n- Full Latin alphabet: ABCDEFGHIJKLMNOP\n- Lowercase: abcdefghijklmnop\n- Supports standard punctuation and symbols\n\n#### Typography Guidelines\n- Use Inter Bold for all headlines and primary CTAs\n- Use Inter Medium for subheadings and navigation\n- Use Inter Regular for body text and product descriptions  \n- Use Inter Light sparingly for design elements\n- Maintain consistent line spacing (1.4-1.6x font size)\n- Ensure sufficient contrast against background colors\n\n---\n\n## Brand Patterns\n\n### Seigaiha Wave Pattern\nThe brand uses a traditional Japanese seigaiha (wave) pattern that complements the Torii gate symbol.\n\n#### Pattern Variations\n- **Phantom Pattern:** Dark waves on black background (#151515)\n- **Ghost Pattern:** Light waves on light background (#EAEAEA)\n- **Available Sizes:** Small (SML) and Large (LRG) versions\n\n#### Pattern Usage\n- Use as background textures for premium feel\n- Apply subtly behind content (low opacity)\n- Phantom pattern for dark themes/sections\n- Ghost pattern for light themes/sections\n- Never overpower main content with pattern\n\n---\n\n## Iconography\n\n### Brand Icon Set\nThe brand includes custom icons for product categories:\n\n- **Best Sellers:** Award/medal icon\n- **Blends:** Mixing/combination icon  \n- **Recovery:** Refresh/cycle icon\n- **Drive:** Energy/power icon\n- **Performance:** Target/achievement icon\n- **Longevity:** Infinity/continuous icon\n- **Weight Loss:** Scale/measurement icon\n- **Wellness:** Heart/health icon\n\n#### Icon Specifications\n- **Style:** Minimalist line icons\n- **Weight:** Consistent 2px stroke width\n- **Colors:** Available in black (#020304) and crimson (#DC2A2E)\n- **Format:** SVG for scalability\n- **Usage:** Product categorization, navigation, feature highlights\n\n---\n\n## Product Packaging Design\n\n### Vial Design Elements\n- **Background:** Rich black (#020304) with phantom wave pattern\n- **Logo Placement:** White logo prominently displayed\n- **Product Name:** White text on black background\n- **Accent Elements:** Crimson band/stripe for product differentiation\n- **Typography:** Inter font family throughout\n\n### Label Hierarchy\n1. **Shrine Peptides Logo** (most prominent)\n2. **Product Name** (e.g., \"GLP-1(R)\", \"BPC-157\")\n3. **Dosage Information** (e.g., \"10mg\")\n4. **Product Details** (smaller supporting text)\n\n---\n\n## Digital Application Guidelines\n\n### Website/App Design\n- **Primary Background:** White (#FFFFFF) or Rich Black (#020304)\n- **Pattern Overlay:** Ghost pattern on light themes, Phantom on dark\n- **Navigation:** Graphite (#4F4F4F) with crimson (#DC2A2E) highlights\n- **CTAs:** Crimson background with white text\n- **Cards/Containers:** White with subtle shadows on light themes\n\n### E-commerce Elements\n- **Product Cards:** Clean white backgrounds with subtle borders\n- **Price Display:** Rich black text, crimson for sale prices\n- **Add to Cart Buttons:** Crimson background (#DC2A2E) with white text\n- **Buy Now Buttons:** Rich black background (#020304) with white text\n- **Quantity Selectors:** Graphite borders with white backgrounds\n\n---\n\n## Brand Voice & Messaging\n\n### Key Brand Attributes\n- **Purity:** Clean, uncompromised quality\n- **Power:** Effective, potent formulations  \n- **Proven:** Science-backed, tested results\n\n### Tone of Voice\n- **Professional:** Medical/scientific credibility\n- **Confident:** Assured in product quality\n- **Premium:** High-end positioning\n- **Accessible:** Clear, understandable communication\n\n### Messaging Themes\n- Scientific precision and purity\n- Performance enhancement and optimization\n- Traditional wisdom meets modern science\n- Premium quality and effectiveness\n\n---\n\n## Technical Specifications for Developers\n\n### CSS Color Variables\n```css\n:root {\n  --shrine-black: #020304;\n  --shrine-crimson: #DC2A2E;\n  --shrine-white: #FFFFFF;\n  --shrine-graphite: #4F4F4F;\n  --shrine-phantom: #151515;\n  --shrine-ghost: #EAEAEA;\n}\n```\n\n### Font Implementation\n```css\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&display=swap');\n\n.shrine-heading { font-family: 'Inter', sans-serif; font-weight: 700; }\n.shrine-subheading { font-family: 'Inter', sans-serif; font-weight: 500; }\n.shrine-body { font-family: 'Inter', sans-serif; font-weight: 400; }\n.shrine-light { font-family: 'Inter', sans-serif; font-weight: 300; }\n```\n\n### Logo Implementation Guidelines\n- Use SVG format for web (scalable, crisp)\n- Use PNG for raster applications (high resolution)\n- Use PDF for print applications\n- Maintain aspect ratios at all sizes\n- Ensure minimum size of 120px width for horizontal logo\n- Ensure minimum size of 80px width for vertical logo\n\n---\n\n## File Structure Reference\n\n### Available Asset Categories\n1. **Horizontal Logos** (LogoH_Black/White_v1/v2)\n2. **Vertical Logos** (LogoV_Black/White_v1/v2)  \n3. **Icon Logos** (Icon_Black/White)\n4. **Category Icons** (Icon_BestSellers, Icon_Blends, etc.)\n5. **Patterns** (SML/LRG_Pattern_On_Black/White)\n6. **Product Vials** (GLP-1(R) reference image)\n\n### File Formats Available\n- **SVG:** Scalable vector graphics (preferred for web)\n- **PNG:** High-resolution raster (good for presentations)\n- **JPG:** Compressed raster (good for photos/complex images)\n- **PDF:** Vector format (preferred for print)\n\n---\n\n## Usage Examples for AI Prompting\n\n### When Prompting Development Tools:\n\n**For Website Development:**\n\"Create a website using the Shrine Peptides brand. Use the color palette: primary black (#020304), crimson accent (#DC2A2E), white (#FFFFFF), and graphite (#4F4F4F). Typography should be Inter font family with bold for headings and regular for body text. Include the Japanese Torii gate logo with red circle accent. Apply subtle seigaiha wave patterns as background textures.\"\n\n**For E-commerce Design:**\n\"Design product cards for Shrine Peptides using white backgrounds, crimson 'Add to Cart' buttons (#DC2A2E), and black 'Buy Now' buttons (#020304). Use Inter typography and include the brand's minimalist line icons for product categories.\"\n\n**For Brand-Consistent UI:**\n\"Follow Shrine Peptides brand guidelines: Japanese-inspired design with Torii gate symbol, premium black and crimson color scheme, Inter typography, and subtle wave patterns. Maintain clean, scientific aesthetic with 'PURITY. POWER. PROVEN.' messaging.\"\n\n---\n\n## Brand Compliance Checklist\n\n### ✅ Logo Usage\n- [ ] Correct logo version selected (horizontal/vertical/icon)\n- [ ] Proper color variant used (black on light, white on dark)\n- [ ] Adequate clear space maintained\n- [ ] No unauthorized modifications made\n\n### ✅ Color Usage  \n- [ ] Colors match exact HEX/RGB values\n- [ ] Sufficient contrast ratios maintained\n- [ ] Crimson used sparingly as accent color\n- [ ] Rich black used for premium feel\n\n### ✅ Typography\n- [ ] Inter font family used consistently\n- [ ] Appropriate font weights selected\n- [ ] Readable font sizes maintained\n- [ ] Proper hierarchy established\n\n### ✅ Pattern Application\n- [ ] Patterns used subtly, not overpowering\n- [ ] Correct pattern variant for theme (phantom/ghost)\n- [ ] Proper opacity/blend modes applied\n\n---\n\n*This document serves as a comprehensive reference for maintaining brand consistency across all digital applications and development projects. When in doubt, refer to the original brand guidelines PDF and asset files included in the brand kit.*\n","size_bytes":10561},"attached_assets/content-1758946911181.md":{"content":"# Nutrition and supplement information you can trust\n\nExamine[analyzes and summarizes research](https://examine.com/about/)to determine which supplements and non-pharmaceutical interventions work.\n\n[Learn how to use Examine](https://examine.com/how-to-use/).\n\n**Examine Pro** is here! Instantly check safety, stay on top of the latest research, and deliver trusted guidance to patients and clients. Enjoy the [free preview of Safety Information](https://examine.com/pro/safety-checker/) for all of September. [Try for free](https://examine.com/pro/)\n\n![Logo 1](https://examine.com/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2Fcolumbia-university.7a282664.png&w=3840&q=75)\n\n![Logo 2](https://examine.com/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2Fny-times.204e883e.png&w=3840&q=75)\n\n![Logo 3](https://examine.com/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2Fnorthwestern-university.956bb14d.png&w=3840&q=75)\n\n![Logo 4](https://examine.com/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2Fbbc.4364bd73.png&w=3840&q=75)\n\n![Logo 5](https://examine.com/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2Fmedpage.93aa3187.png&w=3840&q=75)\n\n![Logo 6](https://examine.com/_next/image/?url=%2F_next%2Fstatic%2Fmedia%2Fthe-academy.8d1bc4e8.png&w=3840&q=75)\n\n## Explore Examine\n\n**See what the evidence shows.** Information on Examine is organized into 26 [health categories](https://examine.com/categories/) covering hundreds of [conditions](https://examine.com/conditions/). Interventions like [supplements](https://examine.com/supplements/) and [diets](https://examine.com/diets/) are evaluated based on measurable changes in specific outcomes like [LDL](https://examine.com/outcomes/ldl-c/) and [blood pressure](https://examine.com/outcomes/blood-pressure/).\n\nConditions\n\n- [Anxiety](https://examine.com/conditions/anxiety/)\n- [ADHD](https://examine.com/conditions/attention-deficit-hyperactivity-disorder/)\n- [Depression](https://examine.com/conditions/depression/)\n- [High Blood Pressure](https://examine.com/conditions/high-blood-pressure/)\n- [High Cholesterol](https://examine.com/conditions/high-cholesterol/)\n\n[View All](https://examine.com/conditions/)\n\nSupplements & More\n\n- [Ashwagandha](https://examine.com/supplements/ashwagandha/)\n- [Creatine](https://examine.com/supplements/creatine/)\n- [Curcumin](https://examine.com/supplements/curcumin/)\n- [Magnesium](https://examine.com/supplements/magnesium/)\n- [Melatonin](https://examine.com/supplements/melatonin/)\n\n[View All](https://examine.com/interventions/)\n\nGuides\n\n- [Optimal protein intake](https://examine.com/guides/protein-intake/)\n- [How to Read a Study](https://examine.com/guides/how-to-read-a-study/)\n- [Memory and Focus](https://examine.com/guides/memory-focus/)\n- [Muscle Gain](https://examine.com/guides/muscle-gain/)\n- [Fat Loss](https://examine.com/guides/fat-loss/)\n\n[View All](https://examine.com/guides/)\n\nCategories\n\n- [Diabetes & Blood Sugar](https://examine.com/categories/diabetes-blood-sugar/)\n- [Fat Loss](https://examine.com/categories/fat-loss/)\n- [Muscle Gain & Exercise](https://examine.com/categories/muscle-gain-exercise/)\n- [Skin, Hair, & Nails](https://examine.com/categories/skin-hair-nails/)\n- [Sleep](https://examine.com/categories/sleep/)\n\n[View All](https://examine.com/categories/)\n\n## Examine is built for everyone\n\nHealth Care Professionals\n\nThere’s never been more health information widely available than today. Yet it’s more difficult than ever to find trustworthy sources. With no ads or industry ties, you can be confident Examine provides only unbiased research analysis, perfect for your patients and clients.\n\n[Academia](https://examine.com/plus/academic-libraries/)\n\nWe take information infrastructure as seriously as nerds can. Everything on Examine is cited, with further links available to all summarized studies, helping you get the information you need at the appropriate depth for your research and studies.\n\nOptimizing Health and Performance\n\nExamine is the home of cutting-edge research analysis. We summarize seven new studies every single day, keeping you ahead of the curve and maximizing your performance, training, and health optimization protocols.\n\nChronic Health Conditions\n\nHealth information can be overwhelming. We answer thousands of your most common questions to help you easily understand the nuance of specific health conditions. We get it: many of our team members are living life on hard mode, too.\n\n## ExamineAI\n\nMeet ExamineAI! Our chatbot exclusively uses material already published on Examine to answer your questions.\n\nEverything we publish is still human-made from start to finish, but now it’s more accessible than ever.\n\n[Try out ExamineAI](https://examine.com/examine-ai/)\n\n## Latest Examine Updates\n\nLatest Page Updates\n\n2 days ago\n\n2 days ago\n\n### [You can now change handout/protocol settings in the preview screen](https://examine.com/pro/protocol-builder/)   minorsite\n\nBy changing settings while in a preview, you can see the changes in real time!\n\n8 days ago\n\n8 days ago\n\n### [Sleep - \\ Updated entries based on current evidence](https://examine.com/guides/sleep/)   majorsupplement guide\n\n11 days ago\n\n11 days ago\n\n### Updated site navigation      minorsite\n\n19 days ago\n\n19 days ago\n\n### [Wild Yam - \\ All new FAQs were added to this page.](https://examine.com/supplements/wild-yam/)   majorcontent\n\n23 days ago\n\n23 days ago\n\n### [Strontium - \\ Safety Information added](https://examine.com/supplements/strontium/)   majorcontent\n\nLatest Study Summaries\n\n1 day ago\n\n1 day ago\n\n### New Study Summaries published    study summary\n\n- [Can time-restricted eating with an exercise program affect mental health?](https://examine.com/research-feed/study/1a24O0/?requirelogin=1)\n- [Curcumin for premenstrual and menstrual symptoms](https://examine.com/research-feed/study/0O2rQ1/?requirelogin=1)\n- [Topical coenzyme Q10 and vitamin E can benefit visual and retinal function in primary open-angle glaucoma](https://examine.com/research-feed/study/9QQ3A9/?requirelogin=1)\n- [Chamomile for soothing pain and swelling in the mouth](https://examine.com/research-feed/study/0mX7W1/?requirelogin=1)\n- [Intermittent fasting may improve markers of metabolic syndrome](https://examine.com/research-feed/study/1MQGB1/?requirelogin=1)\n- [The effects of EPA and DHA on aerobic exercise metrics](https://examine.com/research-feed/study/943bv0/?requirelogin=1)\n- [Amla, chromium, and shilajit do not affect metabolic syndrome](https://examine.com/research-feed/study/0XYXG9/?requirelogin=1)\n\n2 days ago\n\n2 days ago\n\n### New Study Summaries published    study summary\n\n3 days ago\n\n3 days ago\n\n### New Study Summaries published    study summary\n\n4 days ago\n\n4 days ago\n\n### New Study Summaries published    study summary\n\n5 days ago\n\n5 days ago\n\n### New Study Summaries published    study summary\n\n[See all of the latest updates at Examine](https://examine.com/updates/)\n\n## Your Research Feed\n\nExamine+ subscribers get access to [summaries of the latest research](https://examine.com/research-feed/) — seven new studies every business day. [Try free for 7 days](https://examine.com/plus/?ready=true)\n\n![Information](https://examine.com/icons/information.svg)\n\n## We analyze thousands    of studies\n\nExamine is by far the largest database of nutrition and supplement research.\n\n![Web page](https://examine.com/icons/web-page.svg)\n\n## … using a constantly    updated evidence base\n\nThe Examine Database is updated daily by our team of expert researchers.\n\n![Website](https://examine.com/icons/website.svg)\n\n## … and without any conflicts of interest\n\nMillions of readers rely on our objectivity. No ads, sponsorships, or industry ties.\n\n## Examine for your team: group access\n\n- Over 15,000 individual members and over 100 organizations rely on us for unbiased and trustworthy research analysis.\n\n- We provide team-wide memberships to academic, medical, and public libraries, community health organizations, professional sports teams, medical practices, government advisory boards, and more.\n\n\nExamine is your source for the trustworthy health information and latest research analysis your team needs to stay on top.\n\n[Learn how Examine keeps your team on the cutting edge of nutrition science](https://examine.com/plus/organizations/)\n\n* * *\n\n![Examine plus - HD 1080p 5.45.17 PM](https://examine.com/_next/image/?url=https%3A%2F%2Fi.vimeocdn.com%2Fvideo%2F1490043476-3d7c1a5e5f77da7fb6ef59f411e91fb9f011e71c5d700c1f2a63c33084d064c3-d%3Fmw%3D3100%26mh%3D1757%26q%3D70&w=3840&q=75)\n\n## Don't miss out on the latest research\n\nBecome an Examine Insider for FREE to stay on top of the latest nutrition research, supplement myths, and more\n\nI'm ready to learn","size_bytes":8685},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/import-catalog.ts":{"content":"import { readFileSync } from 'fs';\nimport { parse } from 'csv-parse/sync';\nimport { db } from './db';\nimport { categories, peptides } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\nimport type { InsertCategory, InsertPeptide } from '@shared/schema';\n\n// Type for CSV row\ninterface CSVRow {\n  ID: string;\n  Type: string;\n  SKU: string;\n  Name: string;\n  Published: string;\n  'Is featured?': string;\n  'Visibility in catalog': string;\n  'Short description': string;\n  Description: string;\n  'Date sale price starts': string;\n  'Date sale price ends': string;\n  'Tax status': string;\n  'Tax class': string;\n  'In stock?': string;\n  Stock: string;\n  'Low stock amount': string;\n  'Backorders allowed?': string;\n  'Sold individually?': string;\n  'Weight (kg)': string;\n  'Length (cm)': string;\n  'Width (cm)': string;\n  'Height (cm)': string;\n  'Allow customer reviews?': string;\n  'Purchase note': string;\n  'Sale price': string;\n  'Regular price': string;\n  Categories: string;\n  Tags: string;\n  'Shipping class': string;\n  Images: string;\n  'Download limit': string;\n  'Download expiry days': string;\n  Parent: string;\n  'Grouped products': string;\n  Upsells: string;\n  'Cross-sells': string;\n  'External URL': string;\n  'Button text': string;\n  Position: string;\n}\n\n// Helper function to parse dosage from name\nfunction parseDosage(name: string): string | null {\n  const matches = name.match(/\\(([^)]+)\\)/g);\n  if (matches && matches.length > 0) {\n    return matches.map(m => m.slice(1, -1)).join(', ');\n  }\n  return null;\n}\n\n// Helper function to extract ingredients from blend names\nfunction parseIngredients(name: string): string[] | null {\n  // Check if it's a blend by looking for multiple components separated by \"/\"\n  const parts = name.split('/').map(p => p.trim());\n  \n  if (parts.length > 1) {\n    // Extract just the peptide names with dosages\n    return parts.map(part => {\n      // Remove any leading blend names or numbers\n      const cleanPart = part.replace(/^(2X |4X |GLOW |KLOW |Wolverine Blend - )/i, '').trim();\n      return cleanPart;\n    });\n  }\n  \n  return null;\n}\n\n// Helper function to generate slug from name\nfunction generateSlug(name: string): string {\n  return name\n    .toLowerCase()\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/^-|-$/g, '');\n}\n\nasync function importCatalog() {\n  console.log('Starting catalog import...');\n  \n  try {\n    // Read CSV file\n    const csvPath = './attached_assets/woocommerce_complete_catalog_1758953826416.csv';\n    const csvContent = readFileSync(csvPath, 'utf-8');\n    \n    // Parse CSV\n    const records: CSVRow[] = parse(csvContent, {\n      columns: true,\n      skip_empty_lines: true,\n      trim: true\n    });\n    \n    console.log(`Found ${records.length} products in CSV`);\n    \n    // Extract unique categories\n    const uniqueCategories = new Set<string>();\n    records.forEach(record => {\n      if (record.Categories) {\n        uniqueCategories.add(record.Categories);\n      }\n    });\n    \n    console.log(`Found ${uniqueCategories.size} unique categories`);\n    \n    // Create category map to store category IDs\n    const categoryMap = new Map<string, string>();\n    \n    // Insert categories\n    for (const categoryName of uniqueCategories) {\n      const slug = generateSlug(categoryName);\n      \n      // Check if category already exists\n      const existing = await db\n        .select()\n        .from(categories)\n        .where(eq(categories.slug, slug))\n        .limit(1);\n      \n      if (existing.length > 0) {\n        console.log(`Category already exists: ${categoryName}`);\n        categoryMap.set(categoryName, existing[0].id);\n      } else {\n        const categoryData: InsertCategory = {\n          name: categoryName,\n          slug: slug,\n          description: `Research peptides in the ${categoryName} category`\n        };\n        \n        const [newCategory] = await db\n          .insert(categories)\n          .values(categoryData)\n          .returning();\n        \n        console.log(`Created category: ${categoryName}`);\n        categoryMap.set(categoryName, newCategory.id);\n      }\n    }\n    \n    // Insert peptides\n    let successCount = 0;\n    let skipCount = 0;\n    \n    for (const record of records) {\n      // Skip if no SKU or empty record\n      if (!record.SKU || !record.Name) {\n        skipCount++;\n        continue;\n      }\n      \n      // Check if peptide already exists\n      const existing = await db\n        .select()\n        .from(peptides)\n        .where(eq(peptides.sku, record.SKU))\n        .limit(1);\n      \n      if (existing.length > 0) {\n        console.log(`Peptide already exists: ${record.SKU} - ${record.Name}`);\n        skipCount++;\n        continue;\n      }\n      \n      // Determine if it's a blend\n      const isBlend = record.Categories === 'Blends' || \n                     record.Name.includes('/') || \n                     record.Name.toLowerCase().includes('blend');\n      \n      // Parse ingredients for blends\n      const ingredients = isBlend ? parseIngredients(record.Name) : null;\n      \n      // Parse dosage\n      const dosage = parseDosage(record.Name);\n      \n      // Parse price (remove any non-numeric characters except decimal)\n      const priceStr = record['Regular price'].replace(/[^0-9.]/g, '');\n      const price = parseFloat(priceStr) || 0;\n      \n      // Get category ID\n      const categoryId = record.Categories ? categoryMap.get(record.Categories) : null;\n      \n      // Extract research applications from tags\n      const tags = record.Tags ? record.Tags.split(',').map(t => t.trim()) : [];\n      const researchApplications = tags.filter(tag => \n        !tag.includes('mg') && \n        !tag.includes('mcg') &&\n        !tag.includes('peptide') &&\n        !tag.includes('research chemicals')\n      ).join(', ') || null;\n      \n      const peptideData: InsertPeptide = {\n        name: record.Name,\n        sku: record.SKU,\n        categoryId: categoryId || null,\n        shortDescription: record['Short description'] || null,\n        description: record.Description || null,\n        dosage: dosage,\n        price: price.toString(),\n        isBlend: isBlend,\n        ingredients: ingredients,\n        researchApplications: researchApplications,\n        alternateNames: null\n      };\n      \n      try {\n        await db.insert(peptides).values(peptideData);\n        console.log(`Imported: ${record.Name}`);\n        successCount++;\n      } catch (error) {\n        console.error(`Failed to import ${record.Name}:`, error);\n        skipCount++;\n      }\n    }\n    \n    console.log(`\\n✅ Import complete!`);\n    console.log(`  - Successfully imported: ${successCount} peptides`);\n    console.log(`  - Skipped/Failed: ${skipCount} records`);\n    console.log(`  - Total categories: ${categoryMap.size}`);\n    \n  } catch (error) {\n    console.error('Import failed:', error);\n    process.exit(1);\n  }\n  \n  process.exit(0);\n}\n\n// Run the import\nimportCatalog();","size_bytes":6910},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { checkAndImportPeptides } from \"./auto-import\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // AUTOMATIC PEPTIDE IMPORT: Check and import peptides if database is empty\n  console.log('🚀 Server starting...');\n  console.log('📊 Checking peptide database...');\n  \n  try {\n    const imported = await checkAndImportPeptides();\n    if (imported) {\n      console.log('🎯 Peptides imported successfully!');\n    } else {\n      console.log('✓ Peptides already exist or import skipped.');\n    }\n  } catch (error) {\n    console.error('⚠️  Warning: Failed to check/import peptides:', error);\n    console.error('The server will continue without peptides data.');\n  }\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2700},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPeptideSchema, insertCategorySchema, insertProtocolSchema, insertGuideSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { sanitizeAndNormalizeContent } from \"./content-sanitizer\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Peptide endpoints\n  \n  // GET /api/peptides - List all peptides\n  app.get(\"/api/peptides\", async (req, res) => {\n    try {\n      const peptides = await storage.getAllPeptides();\n      res.json(peptides);\n    } catch (error) {\n      console.error(\"Error fetching peptides:\", error);\n      res.status(500).json({ error: \"Failed to fetch peptides\" });\n    }\n  });\n  \n  // GET /api/peptides/search - Search peptides\n  app.get(\"/api/peptides/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      \n      const peptides = await storage.searchPeptides(query);\n      res.json(peptides);\n    } catch (error) {\n      console.error(\"Error searching peptides:\", error);\n      res.status(500).json({ error: \"Failed to search peptides\" });\n    }\n  });\n  \n  // GET /api/peptides/:id - Get single peptide\n  app.get(\"/api/peptides/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const peptide = await storage.getPeptide(id);\n      \n      if (!peptide) {\n        return res.status(404).json({ error: \"Peptide not found\" });\n      }\n      \n      res.json(peptide);\n    } catch (error) {\n      console.error(\"Error fetching peptide:\", error);\n      res.status(500).json({ error: \"Failed to fetch peptide\" });\n    }\n  });\n  \n  // POST /api/peptides - Create peptide\n  app.post(\"/api/peptides\", async (req, res) => {\n    try {\n      const validated = insertPeptideSchema.parse(req.body);\n      const peptide = await storage.createPeptide(validated);\n      res.status(201).json(peptide);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid peptide data\", details: error.errors });\n      }\n      console.error(\"Error creating peptide:\", error);\n      res.status(500).json({ error: \"Failed to create peptide\" });\n    }\n  });\n  \n  // PATCH /api/peptides/:id - Update peptide\n  app.patch(\"/api/peptides/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const partialValidated = insertPeptideSchema.partial().parse(req.body);\n      const updated = await storage.updatePeptide(id, partialValidated);\n      \n      if (!updated) {\n        return res.status(404).json({ error: \"Peptide not found\" });\n      }\n      \n      res.json(updated);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid peptide data\", details: error.errors });\n      }\n      console.error(\"Error updating peptide:\", error);\n      res.status(500).json({ error: \"Failed to update peptide\" });\n    }\n  });\n  \n  // DELETE /api/peptides/:id - Delete peptide\n  app.delete(\"/api/peptides/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deletePeptide(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ error: \"Peptide not found\" });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting peptide:\", error);\n      res.status(500).json({ error: \"Failed to delete peptide\" });\n    }\n  });\n  \n  // Category endpoints\n  \n  // GET /api/categories - List all categories\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ error: \"Failed to fetch categories\" });\n    }\n  });\n  \n  // POST /api/categories - Create category\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const validated = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(validated);\n      res.status(201).json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid category data\", details: error.errors });\n      }\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ error: \"Failed to create category\" });\n    }\n  });\n  \n  // Protocol endpoints\n  \n  // GET /api/protocols - List all protocols\n  app.get(\"/api/protocols\", async (req, res) => {\n    try {\n      const protocols = await storage.getAllProtocols();\n      res.json(protocols);\n    } catch (error) {\n      console.error(\"Error fetching protocols:\", error);\n      res.status(500).json({ error: \"Failed to fetch protocols\" });\n    }\n  });\n  \n  // GET /api/protocols/:id - Get single protocol\n  app.get(\"/api/protocols/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const protocol = await storage.getProtocol(id);\n      \n      if (!protocol) {\n        return res.status(404).json({ error: \"Protocol not found\" });\n      }\n      \n      res.json(protocol);\n    } catch (error) {\n      console.error(\"Error fetching protocol:\", error);\n      res.status(500).json({ error: \"Failed to fetch protocol\" });\n    }\n  });\n  \n  // POST /api/protocols - Create protocol\n  app.post(\"/api/protocols\", async (req, res) => {\n    try {\n      const validated = insertProtocolSchema.parse(req.body);\n      const protocol = await storage.createProtocol(validated);\n      res.status(201).json(protocol);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid protocol data\", details: error.errors });\n      }\n      console.error(\"Error creating protocol:\", error);\n      res.status(500).json({ error: \"Failed to create protocol\" });\n    }\n  });\n  \n  // Guide endpoints\n  \n  // GET /api/guides - List guides with efficient pagination\n  app.get(\"/api/guides\", async (req, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const offset = (page - 1) * limit;\n      \n      const result = await storage.getGuidesPaginated(limit, offset);\n      \n      // For list view, skip expensive content sanitization (only needed for individual article view)\n      const guides = result.data;\n      \n      res.json({\n        data: guides,\n        page,\n        limit,\n        total: result.total,\n        totalPages: Math.ceil(result.total / limit)\n      });\n    } catch (error) {\n      console.error(\"Error fetching guides:\", error);\n      res.status(500).json({ error: \"Failed to fetch guides\" });\n    }\n  });\n  \n  // GET /api/guides/featured - Get featured guides\n  app.get(\"/api/guides/featured\", async (req, res) => {\n    try {\n      const guides = await storage.getFeaturedGuides();\n      \n      // Sanitize content for featured guides\n      const sanitizedGuides = guides.map(guide => ({\n        ...guide,\n        content: sanitizeAndNormalizeContent(guide.content, true)\n      }));\n      \n      res.json(sanitizedGuides);\n    } catch (error) {\n      console.error(\"Error fetching featured guides:\", error);\n      res.status(500).json({ error: \"Failed to fetch featured guides\" });\n    }\n  });\n  \n  // GET /api/guides/search - Search guides\n  app.get(\"/api/guides/search\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      \n      const guides = await storage.searchGuides(query);\n      \n      // For search results, skip expensive sanitization (only needed for individual article view)\n      res.json(guides);\n    } catch (error) {\n      console.error(\"Error searching guides:\", error);\n      res.status(500).json({ error: \"Failed to search guides\" });\n    }\n  });\n  \n  // GET /api/guides/category/:category - Get guides by category\n  app.get(\"/api/guides/category/:category\", async (req, res) => {\n    try {\n      const { category } = req.params;\n      const guides = await storage.getGuidesByCategory(category);\n      \n      // Sanitize content for guides by category\n      const sanitizedGuides = guides.map(guide => ({\n        ...guide,\n        content: sanitizeAndNormalizeContent(guide.content, true)\n      }));\n      \n      res.json(sanitizedGuides);\n    } catch (error) {\n      console.error(\"Error fetching guides by category:\", error);\n      res.status(500).json({ error: \"Failed to fetch guides by category\" });\n    }\n  });\n  \n  // GET /api/guides/:slug - Get single guide by slug\n  app.get(\"/api/guides/:slug\", async (req, res) => {\n    try {\n      const { slug } = req.params;\n      const guide = await storage.getGuideBySlug(slug);\n      \n      if (!guide) {\n        return res.status(404).json({ error: \"Guide not found\" });\n      }\n      \n      // Sanitize the content before returning\n      const sanitizedGuide = {\n        ...guide,\n        content: sanitizeAndNormalizeContent(guide.content, true)\n      };\n      \n      res.json(sanitizedGuide);\n    } catch (error) {\n      console.error(\"Error fetching guide:\", error);\n      res.status(500).json({ error: \"Failed to fetch guide\" });\n    }\n  });\n  \n  // POST /api/guides - Create guide\n  app.post(\"/api/guides\", async (req, res) => {\n    try {\n      const validated = insertGuideSchema.parse(req.body);\n      const guide = await storage.createGuide(validated);\n      res.status(201).json(guide);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid guide data\", details: error.errors });\n      }\n      console.error(\"Error creating guide:\", error);\n      res.status(500).json({ error: \"Failed to create guide\" });\n    }\n  });\n  \n  // PUT /api/guides/:id - Update guide\n  app.put(\"/api/guides/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const partialValidated = insertGuideSchema.partial().parse(req.body);\n      const updated = await storage.updateGuide(id, partialValidated);\n      \n      if (!updated) {\n        return res.status(404).json({ error: \"Guide not found\" });\n      }\n      \n      res.json(updated);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid guide data\", details: error.errors });\n      }\n      console.error(\"Error updating guide:\", error);\n      res.status(500).json({ error: \"Failed to update guide\" });\n    }\n  });\n  \n  // DELETE /api/guides/:id - Delete guide\n  app.delete(\"/api/guides/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteGuide(id);\n      \n      if (!deleted) {\n        return res.status(404).json({ error: \"Guide not found\" });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting guide:\", error);\n      res.status(500).json({ error: \"Failed to delete guide\" });\n    }\n  });\n\n  // Sitemap endpoint for SEO\n  app.get(\"/sitemap.xml\", async (req, res) => {\n    try {\n      const baseUrl = process.env.NODE_ENV === 'production' \n        ? 'https://peptide-dojo.replit.app' \n        : 'http://localhost:5000';\n      \n      // Get all content for sitemap\n      const [peptides, guides] = await Promise.all([\n        storage.getAllPeptides(),\n        storage.getAllGuides()\n      ]);\n\n      const currentDate = new Date().toISOString().split('T')[0];\n      \n      // Static pages with priority and change frequency\n      const staticPages = [\n        { url: '/', priority: '1.0', changefreq: 'daily', lastmod: currentDate },\n        { url: '/peptides', priority: '0.9', changefreq: 'daily', lastmod: currentDate },\n        { url: '/research', priority: '0.9', changefreq: 'daily', lastmod: currentDate }\n      ];\n\n      // Dynamic peptide pages\n      const peptidePages = peptides.map(peptide => ({\n        url: `/peptide/${peptide.id}`,\n        priority: '0.8',\n        changefreq: 'weekly',\n        lastmod: currentDate\n      }));\n\n      // Dynamic guide pages  \n      const guidePages = guides.map(guide => ({\n        url: `/guide/${guide.slug}`,\n        priority: '0.8', \n        changefreq: 'weekly',\n        lastmod: new Date(guide.publishDate).toISOString().split('T')[0]\n      }));\n\n      // Combine all pages\n      const allPages = [...staticPages, ...peptidePages, ...guidePages];\n\n      // Generate XML sitemap\n      const sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n${allPages.map(page => `  <url>\n    <loc>${baseUrl}${page.url}</loc>\n    <lastmod>${page.lastmod}</lastmod>\n    <changefreq>${page.changefreq}</changefreq>\n    <priority>${page.priority}</priority>\n  </url>`).join('\\n')}\n</urlset>`;\n\n      res.set('Content-Type', 'application/xml');\n      res.send(sitemap);\n    } catch (error) {\n      console.error(\"Error generating sitemap:\", error);\n      res.status(500).json({ error: \"Failed to generate sitemap\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}","size_bytes":13247},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Peptide, \n  type InsertPeptide,\n  type Category,\n  type InsertCategory,\n  type Protocol,\n  type InsertProtocol,\n  type Guide,\n  type InsertGuide,\n  users,\n  peptides,\n  categories,\n  protocols,\n  guides\n} from \"@shared/schema\";\nimport { sql } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, ilike, or, desc, asc } from \"drizzle-orm\";\n\n// Extended interface with all CRUD methods\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Peptide operations\n  createPeptide(peptide: InsertPeptide): Promise<Peptide>;\n  getPeptide(id: string): Promise<Peptide | undefined>;\n  getAllPeptides(): Promise<Peptide[]>;\n  updatePeptide(id: string, peptide: Partial<InsertPeptide>): Promise<Peptide | undefined>;\n  deletePeptide(id: string): Promise<boolean>;\n  searchPeptides(query: string): Promise<Peptide[]>;\n  \n  // Category operations\n  createCategory(category: InsertCategory): Promise<Category>;\n  getAllCategories(): Promise<Category[]>;\n  \n  // Protocol operations\n  createProtocol(protocol: InsertProtocol): Promise<Protocol>;\n  getAllProtocols(): Promise<Protocol[]>;\n  getProtocol(id: string): Promise<Protocol | undefined>;\n  \n  // Guide operations\n  createGuide(guide: InsertGuide): Promise<Guide>;\n  getGuide(id: string): Promise<Guide | undefined>;\n  getGuideBySlug(slug: string): Promise<Guide | undefined>;\n  getAllGuides(): Promise<Guide[]>;\n  updateGuide(id: string, guide: Partial<InsertGuide>): Promise<Guide | undefined>;\n  deleteGuide(id: string): Promise<boolean>;\n  getGuidesByCategory(category: string): Promise<Guide[]>;\n  getFeaturedGuides(): Promise<Guide[]>;\n  searchGuides(query: string): Promise<Guide[]>;\n  getGuidesPaginated(limit?: number, offset?: number): Promise<{data: Guide[], total: number}>;\n}\n\n// In-memory storage implementation\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private peptides: Map<string, Peptide>;\n  private categories: Map<string, Category>;\n  private protocols: Map<string, Protocol>;\n  private guides: Map<string, Guide>;\n\n  constructor() {\n    this.users = new Map();\n    this.peptides = new Map();\n    this.categories = new Map();\n    this.protocols = new Map();\n    this.guides = new Map();\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n  \n  // Peptide operations\n  async createPeptide(insertPeptide: InsertPeptide): Promise<Peptide> {\n    const id = randomUUID();\n    const peptide: Peptide = { \n      ...insertPeptide, \n      id,\n      alternateNames: insertPeptide.alternateNames || null,\n      ingredients: insertPeptide.ingredients || null,\n      categoryId: insertPeptide.categoryId || null,\n      shortDescription: insertPeptide.shortDescription || null,\n      description: insertPeptide.description || null,\n      dosage: insertPeptide.dosage || null,\n      researchApplications: insertPeptide.researchApplications || null,\n    } as Peptide;\n    this.peptides.set(id, peptide);\n    return peptide;\n  }\n  \n  async getPeptide(id: string): Promise<Peptide | undefined> {\n    return this.peptides.get(id);\n  }\n  \n  async getAllPeptides(): Promise<Peptide[]> {\n    return Array.from(this.peptides.values());\n  }\n  \n  async updatePeptide(id: string, peptideData: Partial<InsertPeptide>): Promise<Peptide | undefined> {\n    const existing = this.peptides.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { ...existing, ...peptideData };\n    this.peptides.set(id, updated);\n    return updated;\n  }\n  \n  async deletePeptide(id: string): Promise<boolean> {\n    return this.peptides.delete(id);\n  }\n  \n  async searchPeptides(query: string): Promise<Peptide[]> {\n    const lowercaseQuery = query.toLowerCase();\n    return Array.from(this.peptides.values()).filter(\n      (peptide) => \n        peptide.name.toLowerCase().includes(lowercaseQuery) ||\n        (peptide.description && peptide.description.toLowerCase().includes(lowercaseQuery)) ||\n        (peptide.shortDescription && peptide.shortDescription.toLowerCase().includes(lowercaseQuery))\n    );\n  }\n  \n  // Category operations\n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const id = randomUUID();\n    const category: Category = { \n      ...insertCategory, \n      id,\n      description: insertCategory.description || null\n    } as Category;\n    this.categories.set(id, category);\n    return category;\n  }\n  \n  async getAllCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values());\n  }\n  \n  // Protocol operations\n  async createProtocol(insertProtocol: InsertProtocol): Promise<Protocol> {\n    const id = randomUUID();\n    const protocol: Protocol = { \n      ...insertProtocol, \n      id,\n      description: insertProtocol.description || null,\n      peptides: insertProtocol.peptides || null,\n      duration: insertProtocol.duration || null,\n      instructions: insertProtocol.instructions || null\n    } as Protocol;\n    this.protocols.set(id, protocol);\n    return protocol;\n  }\n  \n  async getAllProtocols(): Promise<Protocol[]> {\n    return Array.from(this.protocols.values());\n  }\n  \n  async getProtocol(id: string): Promise<Protocol | undefined> {\n    return this.protocols.get(id);\n  }\n  \n  // Guide operations\n  async createGuide(insertGuide: InsertGuide): Promise<Guide> {\n    const id = randomUUID();\n    const now = new Date();\n    const guide: Guide = { \n      ...insertGuide, \n      id,\n      excerpt: insertGuide.excerpt || null,\n      tags: insertGuide.tags || null,\n      relatedPeptides: insertGuide.relatedPeptides || null,\n      keywords: insertGuide.keywords || null,\n      publishDate: now,\n      lastUpdated: now\n    } as Guide;\n    this.guides.set(id, guide);\n    return guide;\n  }\n  \n  async getGuide(id: string): Promise<Guide | undefined> {\n    return this.guides.get(id);\n  }\n  \n  async getGuideBySlug(slug: string): Promise<Guide | undefined> {\n    return Array.from(this.guides.values()).find(\n      (guide) => guide.slug === slug\n    );\n  }\n  \n  async getAllGuides(): Promise<Guide[]> {\n    return Array.from(this.guides.values());\n  }\n  \n  async updateGuide(id: string, guideData: Partial<InsertGuide>): Promise<Guide | undefined> {\n    const existing = this.guides.get(id);\n    if (!existing) return undefined;\n    \n    const updated = { \n      ...existing, \n      ...guideData,\n      lastUpdated: new Date()\n    };\n    this.guides.set(id, updated);\n    return updated;\n  }\n  \n  async deleteGuide(id: string): Promise<boolean> {\n    return this.guides.delete(id);\n  }\n  \n  async getGuidesByCategory(category: string): Promise<Guide[]> {\n    return Array.from(this.guides.values()).filter(\n      (guide) => guide.category === category\n    );\n  }\n  \n  async getFeaturedGuides(): Promise<Guide[]> {\n    return Array.from(this.guides.values()).filter(\n      (guide) => guide.featured === true\n    );\n  }\n  \n  async searchGuides(query: string): Promise<Guide[]> {\n    const lowercaseQuery = query.toLowerCase();\n    return Array.from(this.guides.values()).filter(\n      (guide) => \n        guide.title.toLowerCase().includes(lowercaseQuery) ||\n        guide.content.toLowerCase().includes(lowercaseQuery) ||\n        guide.metaDescription.toLowerCase().includes(lowercaseQuery) ||\n        (guide.excerpt && guide.excerpt.toLowerCase().includes(lowercaseQuery)) ||\n        (guide.tags && guide.tags.some(tag => tag.toLowerCase().includes(lowercaseQuery))) ||\n        (guide.keywords && guide.keywords.some(keyword => keyword.toLowerCase().includes(lowercaseQuery)))\n    );\n  }\n\n  async getGuidesPaginated(limit: number = 10, offset: number = 0): Promise<{data: Guide[], total: number}> {\n    const allGuides = Array.from(this.guides.values());\n    const sortedGuides = allGuides.sort((a, b) => new Date(b.publishDate).getTime() - new Date(a.publishDate).getTime());\n    const paginatedGuides = sortedGuides.slice(offset, offset + limit);\n    \n    return {\n      data: paginatedGuides,\n      total: allGuides.length\n    };\n  }\n}\n\n// Database storage implementation using Drizzle ORM\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, id))\n      .limit(1);\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.username, username))\n      .limit(1);\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n  \n  // Peptide operations\n  async createPeptide(insertPeptide: InsertPeptide): Promise<Peptide> {\n    const [peptide] = await db\n      .insert(peptides)\n      .values(insertPeptide)\n      .returning();\n    return peptide;\n  }\n  \n  async getPeptide(id: string): Promise<Peptide | undefined> {\n    const [peptide] = await db\n      .select()\n      .from(peptides)\n      .where(eq(peptides.id, id))\n      .limit(1);\n    return peptide;\n  }\n  \n  async getAllPeptides(): Promise<Peptide[]> {\n    return await db.select().from(peptides);\n  }\n  \n  async updatePeptide(id: string, peptideData: Partial<InsertPeptide>): Promise<Peptide | undefined> {\n    const [updated] = await db\n      .update(peptides)\n      .set(peptideData)\n      .where(eq(peptides.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async deletePeptide(id: string): Promise<boolean> {\n    const result = await db\n      .delete(peptides)\n      .where(eq(peptides.id, id))\n      .returning();\n    return result.length > 0;\n  }\n  \n  async searchPeptides(query: string): Promise<Peptide[]> {\n    return await db\n      .select()\n      .from(peptides)\n      .where(\n        or(\n          ilike(peptides.name, `%${query}%`),\n          ilike(peptides.description, `%${query}%`),\n          ilike(peptides.shortDescription, `%${query}%`)\n        )\n      );\n  }\n  \n  // Category operations\n  async createCategory(insertCategory: InsertCategory): Promise<Category> {\n    const [category] = await db\n      .insert(categories)\n      .values(insertCategory)\n      .returning();\n    return category;\n  }\n  \n  async getAllCategories(): Promise<Category[]> {\n    return await db.select().from(categories);\n  }\n  \n  // Protocol operations\n  async createProtocol(insertProtocol: InsertProtocol): Promise<Protocol> {\n    const [protocol] = await db\n      .insert(protocols)\n      .values(insertProtocol)\n      .returning();\n    return protocol;\n  }\n  \n  async getAllProtocols(): Promise<Protocol[]> {\n    return await db.select().from(protocols);\n  }\n  \n  async getProtocol(id: string): Promise<Protocol | undefined> {\n    const [protocol] = await db\n      .select()\n      .from(protocols)\n      .where(eq(protocols.id, id))\n      .limit(1);\n    return protocol;\n  }\n  \n  // Guide operations\n  async createGuide(insertGuide: InsertGuide): Promise<Guide> {\n    const [guide] = await db\n      .insert(guides)\n      .values(insertGuide)\n      .returning();\n    return guide;\n  }\n  \n  async getGuide(id: string): Promise<Guide | undefined> {\n    const [guide] = await db\n      .select()\n      .from(guides)\n      .where(eq(guides.id, id))\n      .limit(1);\n    return guide;\n  }\n  \n  async getGuideBySlug(slug: string): Promise<Guide | undefined> {\n    const [guide] = await db\n      .select()\n      .from(guides)\n      .where(eq(guides.slug, slug))\n      .limit(1);\n    return guide;\n  }\n  \n  async getAllGuides(): Promise<Guide[]> {\n    return await db\n      .select()\n      .from(guides)\n      .orderBy(desc(guides.publishDate));\n  }\n\n  async getGuidesPaginated(limit: number = 10, offset: number = 0): Promise<{data: Guide[], total: number}> {\n    const [guidesResult, countResult] = await Promise.all([\n      db\n        .select()\n        .from(guides)\n        .orderBy(desc(guides.publishDate))\n        .limit(limit)\n        .offset(offset),\n      db\n        .select({ count: sql<number>`count(*)` })\n        .from(guides)\n    ]);\n    \n    return {\n      data: guidesResult,\n      total: countResult[0].count\n    };\n  }\n  \n  async updateGuide(id: string, guideData: Partial<InsertGuide>): Promise<Guide | undefined> {\n    const [updated] = await db\n      .update(guides)\n      .set({\n        ...guideData,\n        lastUpdated: new Date()\n      })\n      .where(eq(guides.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async deleteGuide(id: string): Promise<boolean> {\n    const result = await db\n      .delete(guides)\n      .where(eq(guides.id, id))\n      .returning();\n    return result.length > 0;\n  }\n  \n  async getGuidesByCategory(category: string): Promise<Guide[]> {\n    return await db\n      .select()\n      .from(guides)\n      .where(eq(guides.category, category))\n      .orderBy(desc(guides.publishDate));\n  }\n  \n  async getFeaturedGuides(): Promise<Guide[]> {\n    return await db\n      .select()\n      .from(guides)\n      .where(eq(guides.featured, true))\n      .orderBy(desc(guides.publishDate));\n  }\n  \n  async searchGuides(query: string): Promise<Guide[]> {\n    return await db\n      .select()\n      .from(guides)\n      .where(\n        or(\n          ilike(guides.title, `%${query}%`),\n          ilike(guides.content, `%${query}%`),\n          ilike(guides.metaDescription, `%${query}%`),\n          ilike(guides.excerpt, `%${query}%`)\n        )\n      )\n      .orderBy(desc(guides.publishDate));\n  }\n}\n\n// Use DatabaseStorage when DATABASE_URL is present, otherwise use MemStorage\nexport const storage: IStorage = process.env.DATABASE_URL \n  ? new DatabaseStorage()\n  : new MemStorage();","size_bytes":14248},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, numeric, boolean, uuid, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  slug: varchar(\"slug\", { length: 255 }).notNull().unique(),\n  description: text(\"description\"),\n});\n\n// Peptides table\nexport const peptides = pgTable(\"peptides\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  sku: varchar(\"sku\", { length: 255 }).notNull().unique(),\n  alternateNames: text(\"alternate_names\").array(),\n  categoryId: uuid(\"category_id\").references(() => categories.id),\n  shortDescription: text(\"short_description\"),\n  description: text(\"description\"),\n  dosage: text(\"dosage\"),\n  price: numeric(\"price\", { precision: 10, scale: 2 }).notNull(),\n  isBlend: boolean(\"is_blend\").default(false).notNull(),\n  ingredients: text(\"ingredients\").array(), // For blends\n  researchApplications: text(\"research_applications\"),\n});\n\n// Protocols table\nexport const protocols = pgTable(\"protocols\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  peptides: uuid(\"peptides\").array(), // Array of peptide IDs\n  duration: text(\"duration\"),\n  instructions: text(\"instructions\").array(),\n});\n\n// Guides table for SEO-optimized educational content\nexport const guides = pgTable(\"guides\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  slug: varchar(\"slug\", { length: 255 }).notNull().unique(),\n  title: text(\"title\").notNull(),\n  metaTitle: varchar(\"meta_title\", { length: 60 }).notNull(), // SEO: 60 chars max\n  metaDescription: varchar(\"meta_description\", { length: 160 }).notNull(), // SEO: 160 chars max\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\"),\n  category: text(\"category\").notNull(),\n  tags: text(\"tags\").array(),\n  relatedPeptides: uuid(\"related_peptides\").array(), // Array of peptide IDs\n  author: text(\"author\").notNull(),\n  publishDate: timestamp(\"publish_date\").notNull().defaultNow(),\n  lastUpdated: timestamp(\"last_updated\").notNull().defaultNow(),\n  featured: boolean(\"featured\").default(false).notNull(),\n  readTime: integer(\"read_time\").notNull(), // in minutes\n  keywords: text(\"keywords\").array(), // SEO keywords\n});\n\n// Authors table for detailed expert credentials\nexport const authors = pgTable(\"authors\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  bio: text(\"bio\").notNull(), // Professional background\n  credentials: text(\"credentials\").array(), // Array of qualifications like [\"PhD Biochemistry\", \"10+ years peptide research\"]\n  affiliation: text(\"affiliation\"), // Institution or company\n  expertise: text(\"expertise\").array(), // Array of specializations\n  publications: text(\"publications\"), // Notable publications or research\n  contactEmail: text(\"contact_email\"),\n  linkedinUrl: text(\"linkedin_url\"),\n  researchGateUrl: text(\"research_gate_url\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\n// Users table (keeping existing)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// Insert schemas\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n});\n\nexport const insertPeptideSchema = createInsertSchema(peptides).omit({\n  id: true,\n}).extend({\n  price: z.string().or(z.number()).transform((val) => String(val)),\n  alternateNames: z.array(z.string()).optional(),\n  ingredients: z.array(z.string()).optional(),\n});\n\nexport const insertProtocolSchema = createInsertSchema(protocols).omit({\n  id: true,\n}).extend({\n  peptides: z.array(z.string()).optional(),\n  instructions: z.array(z.string()).optional(),\n});\n\nexport const insertGuideSchema = createInsertSchema(guides).omit({\n  id: true,\n  publishDate: true,\n  lastUpdated: true,\n}).extend({\n  tags: z.array(z.string()).optional(),\n  relatedPeptides: z.array(z.string()).optional(),\n  keywords: z.array(z.string()).optional(),\n  metaTitle: z.string().max(60, \"Meta title must be 60 characters or less\"),\n  metaDescription: z.string().max(160, \"Meta description must be 160 characters or less\"),\n  readTime: z.number().int().positive(),\n});\n\nexport const insertAuthorSchema = createInsertSchema(authors).omit({\n  id: true,\n}).extend({\n  credentials: z.array(z.string()).optional(),\n  expertise: z.array(z.string()).optional(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\n// Types\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport type Peptide = typeof peptides.$inferSelect;\nexport type InsertPeptide = z.infer<typeof insertPeptideSchema>;\n\nexport type Protocol = typeof protocols.$inferSelect;\nexport type InsertProtocol = z.infer<typeof insertProtocolSchema>;\n\nexport type Guide = typeof guides.$inferSelect;\nexport type InsertGuide = z.infer<typeof insertGuideSchema>;\n\nexport type Author = typeof authors.$inferSelect;\nexport type InsertAuthor = z.infer<typeof insertAuthorSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;","size_bytes":5540},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Navigation from \"@/components/Navigation\";\nimport Footer from \"@/components/Footer\"; \nimport Home from \"@/pages/Home\";\nimport Peptides from \"@/pages/Peptides\";\nimport PeptideDetail from \"@/pages/PeptideDetail\";\nimport Guides from \"@/pages/Guides\";\nimport GuideDetail from \"@/pages/GuideDetail\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/peptides\" component={Peptides} />\n      <Route path=\"/peptide/:id\" component={PeptideDetail} />\n      <Route path=\"/research\" component={Guides} />\n      <Route path=\"/guide/:slug\" component={GuideDetail} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const handleLoginClick = () => {\n    console.log('Login clicked - Begin Your Training');\n    // todo: remove mock functionality - integrate with real auth\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen flex flex-col bg-background\">\n          <Navigation onLoginClick={handleLoginClick} />\n          <main className=\"flex-1\">\n            <Router />\n          </main>\n          <Footer />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1577},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  /* Sacred Palette - Core Colors */\n  --sumi-black: 0 0% 1%; /* Rich Black for depth */\n  --shrine-crimson: 356 70% 51%; /* Sacred highlight */\n  --washi-white: 45 12% 97%; /* Pure enlightenment */\n  --stone-gray: 210 4% 31%; /* Natural grounding */\n  \n  /* Extended Sacred Colors */\n  --warm-amber: 30 85% 65%; /* Rising sun warmth */\n  --mist-gray: 210 15% 85%; /* Mountain mist */\n  --forest-green: 150 30% 15%; /* Deep forest */\n  --bamboo-green: 140 25% 45%; /* Growing wisdom */\n  --sakura-pink: 350 65% 85%; /* Cherry blossom */\n  --maple-red: 15 75% 45%; /* Autumn transformation */\n  --gold-enlightenment: 45 90% 55%; /* Master's achievement */\n  \n  /* Shrine Peptides Brand Colors (Preserved) */\n  --shrine-black: 220 25% 1%; /* Rich Black #020304 */\n  --shrine-crimson-brand: 357 84% 51%; /* Shrine Crimson #DC2A2E */\n  --shrine-white: 0 0% 100%; /* Pure White #FFFFFF */\n  --shrine-graphite: 0 0% 31%; /* Graphite #4F4F4F */\n  --shrine-phantom: 0 0% 8%; /* Phantom #151515 */\n  --shrine-ghost: 0 0% 92%; /* Ghost #EAEAEA */\n\n  /* Sacred Landscape Gradients */\n  --gradient-rising-sun: linear-gradient(135deg, hsl(356 70% 51%), hsl(30 85% 65%), hsl(45 12% 97%));\n  --gradient-mountain-mist: linear-gradient(180deg, hsl(210 15% 85%), hsl(45 12% 97%), transparent);\n  --gradient-forest-depth: linear-gradient(180deg, hsl(150 30% 15%), hsl(0 0% 5%));\n  --gradient-sacred-dawn: radial-gradient(circle at top, hsl(30 85% 65% / 0.3), transparent 70%);\n  --gradient-torii-gate: linear-gradient(90deg, transparent 10%, hsl(356 70% 51% / 0.1) 50%, transparent 90%);\n  \n  /* Atmospheric Depth Layers */\n  --layer-mist: linear-gradient(180deg, transparent, hsl(210 15% 85% / 0.1) 30%, hsl(210 15% 85% / 0.2) 70%, transparent);\n  --layer-shadow: linear-gradient(180deg, transparent, hsl(0 0% 0% / 0.05) 50%, hsl(0 0% 0% / 0.1));\n  \n  /* Shadow Depths for Sacred Architecture */\n  --shadow-shallow: 0 1px 3px hsl(0 0% 0% / 0.1), 0 1px 2px hsl(0 0% 0% / 0.06);\n  --shadow-medium: 0 4px 6px hsl(0 0% 0% / 0.1), 0 2px 4px hsl(0 0% 0% / 0.06);\n  --shadow-deep: 0 10px 15px hsl(0 0% 0% / 0.1), 0 4px 6px hsl(0 0% 0% / 0.05);\n  --shadow-floating: 0 20px 25px hsl(0 0% 0% / 0.1), 0 10px 10px hsl(0 0% 0% / 0.04);\n  --shadow-torii: 0 25px 50px hsl(356 70% 51% / 0.15), 0 10px 20px hsl(0 0% 0% / 0.08);\n\n  /* Main theme colors using sacred palette */\n  --background: var(--washi-white);\n  --foreground: var(--sumi-black);\n  --border: hsl(var(--stone-gray) / 0.2);\n\n  --card: var(--shrine-white);\n  --card-foreground: var(--sumi-black);\n  --card-border: hsl(var(--stone-gray) / 0.15);\n\n  --sidebar: 45 12% 98%;\n  --sidebar-foreground: var(--sumi-black);\n  --sidebar-border: hsl(var(--stone-gray) / 0.1);\n  --sidebar-primary: var(--shrine-crimson);\n  --sidebar-primary-foreground: var(--washi-white);\n  --sidebar-accent: var(--shrine-ghost);\n  --sidebar-accent-foreground: var(--stone-gray);\n  --sidebar-ring: var(--shrine-crimson);\n\n  --popover: var(--shrine-white);\n  --popover-foreground: var(--sumi-black);\n  --popover-border: hsl(var(--stone-gray) / 0.12);\n\n  --primary: var(--shrine-crimson);\n  --primary-foreground: var(--washi-white);\n\n  --secondary: var(--shrine-ghost);\n  --secondary-foreground: var(--stone-gray);\n\n  --muted: var(--shrine-ghost);\n  --muted-foreground: var(--stone-gray);\n\n  --accent: 45 12% 94%;\n  --accent-foreground: var(--sumi-black);\n\n  --destructive: 0 84% 60%;\n  --destructive-foreground: var(--washi-white);\n\n  --input: hsl(var(--stone-gray) / 0.1);\n  --ring: 356 70% 51%;\n  \n  /* Chart colors with sacred palette */\n  --chart-1: 356 70% 51%;\n  --chart-2: 140 25% 45%;\n  --chart-3: 30 85% 65%;\n  --chart-4: 210 15% 45%;\n  --chart-5: 45 90% 55%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  \n  /* Sacred shadows */\n  --shadow-2xs: var(--shadow-shallow);\n  --shadow-xs: var(--shadow-shallow);\n  --shadow-sm: var(--shadow-medium);\n  --shadow: var(--shadow-medium);\n  --shadow-md: var(--shadow-deep);\n  --shadow-lg: var(--shadow-floating);\n  --shadow-xl: var(--shadow-torii);\n  --shadow-2xl: var(--shadow-torii);\n  \n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Product link colors */\n  --product-link-color: 356 70% 51%;\n  --product-link-hover: 356 70% 45%;\n\n  /* Animation timing */\n  --duration-instant: 0ms;\n  --duration-fast: 150ms;\n  --duration-gentle: 300ms;\n  --duration-sacred: 500ms;\n  --duration-contemplative: 1000ms;\n  --ease-sacred: cubic-bezier(0.4, 0, 0.2, 1);\n  --ease-enlightenment: cubic-bezier(0.22, 1, 0.36, 1);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Sacred Design System Utilities\n * Shinto-inspired components for Peptide Dojo\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Product link styling */\n  .product-link {\n    color: hsl(var(--product-link-color));\n    font-weight: 500;\n    text-decoration: underline;\n    text-decoration-color: hsl(var(--product-link-color) / 0.3);\n    text-underline-offset: 2px;\n    text-decoration-thickness: 1px;\n    transition: all var(--duration-fast) var(--ease-sacred);\n    position: relative;\n  }\n\n  .product-link:hover {\n    color: hsl(var(--product-link-hover));\n    text-decoration-color: hsl(var(--product-link-hover) / 0.6);\n    text-decoration-thickness: 2px;\n  }\n\n  /* Product link with icon indicator */\n  .product-link::after {\n    content: \"↗\";\n    display: inline-block;\n    margin-left: 0.15em;\n    font-size: 0.85em;\n    vertical-align: super;\n    opacity: 0.7;\n    transition: all var(--duration-fast) var(--ease-sacred);\n  }\n\n  .product-link:hover::after {\n    opacity: 1;\n    transform: translate(2px, -2px);\n  }\n\n  /* Product link in prose content */\n  .prose .product-link {\n    @apply no-underline;\n    color: hsl(var(--product-link-color));\n    font-weight: 500;\n    text-decoration: underline;\n    text-decoration-color: hsl(var(--product-link-color) / 0.3);\n    text-underline-offset: 2px;\n    text-decoration-thickness: 1px;\n  }\n\n  .prose .product-link:hover {\n    color: hsl(var(--product-link-hover));\n    text-decoration-color: hsl(var(--product-link-hover) / 0.6);\n    text-decoration-thickness: 2px;\n  }\n\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* Elevation system (preserved) */\n  .no-default-hover-elevate {}\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Sacred Gradient Utilities */\n  .bg-gradient-radial {\n    background: radial-gradient(circle, var(--tw-gradient-stops));\n  }\n  \n  .bg-rising-sun {\n    background: var(--gradient-rising-sun);\n  }\n  \n  .bg-mountain-mist {\n    background: var(--gradient-mountain-mist);\n  }\n  \n  .bg-forest-depth {\n    background: var(--gradient-forest-depth);\n  }\n  \n  .bg-sacred-dawn {\n    background: var(--gradient-sacred-dawn);\n  }\n  \n  .bg-torii-gate {\n    background: var(--gradient-torii-gate);\n  }\n  \n  /* Texture Overlay Utilities */\n  .texture-washi {\n    position: relative;\n  }\n  .texture-washi::before {\n    content: \"\";\n    position: absolute;\n    inset: 0;\n    opacity: 0.03;\n    background-image: \n      repeating-linear-gradient(90deg, transparent, transparent 2px, hsl(var(--stone-gray) / 0.05) 2px, hsl(var(--stone-gray) / 0.05) 4px),\n      repeating-linear-gradient(0deg, transparent, transparent 2px, hsl(var(--stone-gray) / 0.05) 2px, hsl(var(--stone-gray) / 0.05) 4px);\n    pointer-events: none;\n    border-radius: inherit;\n  }\n  \n  .texture-wood {\n    position: relative;\n  }\n  .texture-wood::before {\n    content: \"\";\n    position: absolute;\n    inset: 0;\n    opacity: 0.04;\n    background-image: \n      linear-gradient(90deg, transparent 0%, hsl(30 20% 50% / 0.1) 25%, transparent 50%, hsl(30 20% 40% / 0.1) 75%, transparent 100%);\n    background-size: 8px 100%;\n    pointer-events: none;\n    border-radius: inherit;\n  }\n  \n  .texture-stone {\n    position: relative;\n  }\n  .texture-stone::before {\n    content: \"\";\n    position: absolute;\n    inset: 0;\n    opacity: 0.05;\n    background-image: \n      radial-gradient(circle at 20% 80%, transparent 20%, hsl(var(--stone-gray) / 0.05) 21%, hsl(var(--stone-gray) / 0.05) 30%, transparent 31%),\n      radial-gradient(circle at 60% 20%, transparent 20%, hsl(var(--stone-gray) / 0.03) 21%, hsl(var(--stone-gray) / 0.03) 30%, transparent 31%);\n    background-size: 30px 30px;\n    pointer-events: none;\n    border-radius: inherit;\n  }\n  \n  /* Sacred Geometry Utilities */\n  .sacred-circle {\n    aspect-ratio: 1;\n    border-radius: 50%;\n  }\n  \n  .enso-circle {\n    position: relative;\n    aspect-ratio: 1;\n    border-radius: 50%;\n    background: transparent;\n    border: 2px solid currentColor;\n    border-top-color: transparent;\n    transform: rotate(-45deg);\n  }\n  \n  .golden-ratio {\n    aspect-ratio: 1.618;\n  }\n  \n  .torii-frame {\n    position: relative;\n    padding-top: 1rem;\n  }\n  .torii-frame::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 10%;\n    right: 10%;\n    height: 3px;\n    background: hsl(var(--shrine-crimson));\n    box-shadow: 0 -8px 0 hsl(var(--shrine-crimson) / 0.6);\n  }\n  \n  /* Chamber Spacing Utilities */\n  .chamber-padding {\n    @apply py-16 px-8;\n  }\n  \n  .chamber-padding-sm {\n    @apply py-8 px-4;\n  }\n  \n  .chamber-padding-lg {\n    @apply py-24 px-12;\n  }\n  \n  .natural-flow {\n    @apply space-y-8;\n  }\n  \n  .natural-flow-sm {\n    @apply space-y-4;\n  }\n  \n  .natural-flow-lg {\n    @apply space-y-12;\n  }\n  \n  /* Shadow Depth Classes */\n  .shadow-shallow {\n    box-shadow: var(--shadow-shallow);\n  }\n  \n  .shadow-medium {\n    box-shadow: var(--shadow-medium);\n  }\n  \n  .shadow-deep {\n    box-shadow: var(--shadow-deep);\n  }\n  \n  .shadow-floating {\n    box-shadow: var(--shadow-floating);\n  }\n  \n  .shadow-torii {\n    box-shadow: var(--shadow-torii);\n  }\n  \n  /* Seasonal Motif Classes */\n  .motif-sakura {\n    position: relative;\n  }\n  .motif-sakura::after {\n    content: \"✿\";\n    position: absolute;\n    top: -0.5rem;\n    right: -0.5rem;\n    color: hsl(var(--sakura-pink));\n    opacity: 0.6;\n    font-size: 1.5rem;\n    pointer-events: none;\n  }\n  \n  .motif-bamboo {\n    position: relative;\n  }\n  .motif-bamboo::after {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 2px;\n    height: 100%;\n    background: linear-gradient(to top, hsl(var(--bamboo-green)), transparent);\n    opacity: 0.3;\n    pointer-events: none;\n  }\n  \n  .motif-maple {\n    position: relative;\n  }\n  .motif-maple::before {\n    content: \"🍁\";\n    position: absolute;\n    top: 0.5rem;\n    left: 0.5rem;\n    color: hsl(var(--maple-red));\n    opacity: 0.5;\n    font-size: 1.2rem;\n    pointer-events: none;\n    transform: rotate(-15deg);\n  }\n  \n  .motif-pine {\n    position: relative;\n  }\n  .motif-pine::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 20px;\n    height: 20px;\n    background: repeating-linear-gradient(45deg, transparent, transparent 3px, hsl(var(--forest-green) / 0.2) 3px, hsl(var(--forest-green) / 0.2) 4px);\n    pointer-events: none;\n  }\n  \n  /* Animation Utilities */\n  @keyframes sacred-reveal {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  @keyframes enlightenment-glow {\n    0%, 100% {\n      opacity: 0.5;\n      filter: brightness(1);\n    }\n    50% {\n      opacity: 0.8;\n      filter: brightness(1.1);\n    }\n  }\n  \n  @keyframes gentle-float {\n    0%, 100% {\n      transform: translateY(0);\n    }\n    50% {\n      transform: translateY(-5px);\n    }\n  }\n  \n  @keyframes torii-entrance {\n    from {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n  \n  @keyframes ripple-meditation {\n    0% {\n      transform: scale(1);\n      opacity: 1;\n    }\n    100% {\n      transform: scale(1.5);\n      opacity: 0;\n    }\n  }\n  \n  .animate-sacred-reveal {\n    animation: sacred-reveal var(--duration-sacred) var(--ease-sacred) both;\n  }\n  \n  .animate-enlightenment {\n    animation: enlightenment-glow var(--duration-contemplative) var(--ease-enlightenment) infinite;\n  }\n  \n  .animate-gentle-float {\n    animation: gentle-float 3s ease-in-out infinite;\n  }\n  \n  .animate-torii-entrance {\n    animation: torii-entrance var(--duration-sacred) var(--ease-sacred) both;\n  }\n  \n  .animate-ripple {\n    position: relative;\n  }\n  .animate-ripple::before {\n    content: \"\";\n    position: absolute;\n    inset: 0;\n    border: 1px solid currentColor;\n    border-radius: inherit;\n    animation: ripple-meditation 2s ease-out infinite;\n  }\n  \n  /* Transition Utilities */\n  .transition-sacred {\n    transition-duration: var(--duration-sacred);\n    transition-timing-function: var(--ease-sacred);\n  }\n  \n  .transition-gentle {\n    transition-duration: var(--duration-gentle);\n    transition-timing-function: var(--ease-sacred);\n  }\n  \n  .transition-contemplative {\n    transition-duration: var(--duration-contemplative);\n    transition-timing-function: var(--ease-enlightenment);\n  }\n  \n  /* Parallax Depth Layers */\n  .parallax-layer {\n    position: absolute;\n    inset: 0;\n    pointer-events: none;\n  }\n  \n  .parallax-back {\n    z-index: 1;\n    transform: translateZ(-2px) scale(1.2);\n  }\n  \n  .parallax-mid {\n    z-index: 2;\n    transform: translateZ(-1px) scale(1.1);\n  }\n  \n  .parallax-front {\n    z-index: 3;\n    transform: translateZ(0);\n  }\n  \n  /* Sacred Path Visualization */\n  .sacred-path {\n    position: relative;\n  }\n  .sacred-path::before {\n    content: \"\";\n    position: absolute;\n    top: 50%;\n    left: 0;\n    right: 0;\n    height: 2px;\n    background: linear-gradient(90deg, hsl(var(--stone-gray)), hsl(var(--shrine-crimson)), hsl(var(--gold-enlightenment)));\n    transform: translateY(-50%);\n    opacity: 0.3;\n  }\n  \n  /* Atmospheric Mist Effects */\n  .mist-overlay {\n    position: relative;\n  }\n  .mist-overlay::before {\n    content: \"\";\n    position: absolute;\n    inset: 0;\n    background: var(--layer-mist);\n    pointer-events: none;\n    border-radius: inherit;\n  }\n  \n  /* Sacred Scroll Styling */\n  .scroll-container {\n    position: relative;\n    background: linear-gradient(180deg, hsl(var(--washi-white)), hsl(var(--washi-white) / 0.95));\n    border-top: 3px solid hsl(var(--bamboo-green));\n    border-bottom: 3px solid hsl(var(--bamboo-green));\n    padding: 2rem 1rem;\n  }\n  \n  /* Enlightenment Glow */\n  .enlightenment-glow {\n    position: relative;\n  }\n  .enlightenment-glow::after {\n    content: \"\";\n    position: absolute;\n    inset: -10px;\n    background: radial-gradient(circle, hsl(var(--gold-enlightenment) / 0.2), transparent 70%);\n    pointer-events: none;\n    border-radius: inherit;\n    z-index: -1;\n  }\n}\n\n/* Component-specific enhancements */\n@layer components {\n  /* Ema plaque card styling */\n  .ema-card {\n    @apply relative overflow-hidden rounded-lg shadow-medium transition-sacred hover:shadow-floating;\n    background: linear-gradient(135deg, hsl(var(--washi-white)), hsl(var(--washi-white) / 0.98));\n  }\n  \n  /* Shoji screen panel */\n  .shoji-panel {\n    @apply relative overflow-hidden;\n    background: linear-gradient(180deg, hsl(var(--washi-white) / 0.95), hsl(var(--washi-white) / 0.9));\n    backdrop-filter: blur(8px);\n  }\n  .shoji-panel::before {\n    content: \"\";\n    position: absolute;\n    inset: 0;\n    background-image: \n      repeating-linear-gradient(90deg, transparent, transparent 40px, hsl(var(--stone-gray) / 0.1) 40px, hsl(var(--stone-gray) / 0.1) 42px),\n      repeating-linear-gradient(0deg, transparent, transparent 40px, hsl(var(--stone-gray) / 0.1) 40px, hsl(var(--stone-gray) / 0.1) 42px);\n    pointer-events: none;\n  }\n  \n  /* Sacred chamber section */\n  .sacred-chamber {\n    @apply chamber-padding natural-flow relative;\n    background: var(--gradient-mountain-mist);\n  }\n  \n  /* Torii gate navigation item */\n  .torii-nav-item {\n    @apply relative px-6 py-2 transition-sacred;\n  }\n  .torii-nav-item::before {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    left: 50%;\n    width: 0;\n    height: 2px;\n    background: hsl(var(--shrine-crimson));\n    transform: translateX(-50%);\n    transition: width var(--duration-sacred) var(--ease-sacred);\n  }\n  .torii-nav-item:hover::before,\n  .torii-nav-item[data-active=\"true\"]::before {\n    width: 100%;\n  }\n}","size_bytes":19902},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BeltCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport interface BeltCardProps {\n  beltLevel: \"white\" | \"red\" | \"black\" | \"gold\";\n  title: string;\n  description: string;\n  progress: number;\n  totalModules: number;\n  isUnlocked: boolean;\n  onAdvance?: () => void;\n}\n\nexport default function BeltCard({\n  beltLevel,\n  title,\n  description,\n  progress,\n  totalModules,\n  isUnlocked,\n  onAdvance\n}: BeltCardProps) {\n  const beltColors = {\n    white: \"bg-card text-card-foreground border-2 border-border\",\n    red: \"bg-primary text-primary-foreground\",\n    black: \"bg-foreground text-background\",\n    gold: \"bg-gradient-to-r from-[hsl(var(--gold-enlightenment))] to-[hsl(var(--warm-amber))] text-background\"\n  };\n\n  const beltEmoji = {\n    white: \"🤍\",\n    red: \"❤️\", \n    black: \"🖤\",\n    gold: \"💛\"\n  };\n\n  return (\n    <Card className=\"relative overflow-hidden hover-elevate transition-all duration-300\" data-testid={`card-belt-${beltLevel}`}>\n      {/* Ema plaque background pattern */}\n      <div \n        className=\"absolute inset-0 opacity-5\"\n        style={{\n          backgroundImage: `url('/src/assets/patterns/LRG_Pattern_On White_Ghost_1758946478158.png')`,\n          backgroundSize: '100px 100px',\n          backgroundRepeat: 'repeat'\n        }}\n      ></div>\n      \n      {/* Ema plaque shape styling */}\n      <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 w-8 h-3 bg-muted rounded-b-full\"></div>\n      \n      <CardContent className=\"relative p-6 text-center\">\n        {/* Belt Badge */}\n        <div className=\"flex justify-center mb-4\">\n          <Badge \n            className={`${beltColors[beltLevel]} px-4 py-2 text-lg font-bold`}\n            data-testid={`badge-belt-${beltLevel}`}\n          >\n            {beltEmoji[beltLevel]} {title}\n          </Badge>\n        </div>\n\n        {/* Description */}\n        <p className=\"text-muted-foreground mb-6 min-h-[48px]\" data-testid={`text-belt-description-${beltLevel}`}>{description}</p>\n\n        {/* Progress */}\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between text-sm mb-2\">\n            <span data-testid={`label-progress-${beltLevel}`}>Progress</span>\n            <span data-testid={`text-progress-${beltLevel}`}>\n              {progress}/{totalModules} modules\n            </span>\n          </div>\n          <div className=\"w-full bg-muted rounded-full h-2\" data-testid={`progress-bar-${beltLevel}`}>\n            <div\n              className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${(progress / totalModules) * 100}%` }}\n              data-testid={`progress-fill-${beltLevel}`}\n            ></div>\n          </div>\n        </div>\n\n        {/* Action Button */}\n        <Button\n          variant={isUnlocked ? \"default\" : \"secondary\"}\n          disabled={!isUnlocked}\n          onClick={onAdvance}\n          className=\"w-full font-medium\"\n          data-testid={`button-advance-${beltLevel}`}\n        >\n          {isUnlocked \n            ? progress === totalModules \n              ? \"Claim Your Belt\" \n              : \"Continue Training\"\n            : \"Locked\"\n          }\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3310},"client/src/components/ExploreGrid.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { Peptide, Category } from \"@shared/schema\";\n\ninterface ExploreSection {\n  title: string;\n  description: string;\n  items: Array<{\n    name: string;\n    path: string;\n    description?: string;\n  }>;\n  viewAllPath: string;\n  itemCount?: number;\n  isLoading?: boolean;\n}\n\nexport default function ExploreGrid() {\n  // Fetch real peptides from the database\n  const { data: peptides = [], isLoading: peptidesLoading } = useQuery<Peptide[]>({\n    queryKey: ['/api/peptides'],\n  });\n\n  // Fetch categories from the database\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  // Create sections with real data where applicable\n  const sections: ExploreSection[] = [\n    {\n      title: \"Peptides\",\n      description: \"Research-backed information on individual peptides and their effects.\",\n      items: peptides.slice(0, 5).map(peptide => ({\n        name: peptide.name,\n        path: `/peptide/${peptide.id}`,\n        description: peptide.shortDescription || peptide.description?.substring(0, 100) || undefined\n      })),\n      viewAllPath: \"/peptides\",\n      itemCount: peptides.length,\n      isLoading: peptidesLoading\n    },\n    {\n      title: \"Categories\",\n      description: \"Browse peptides by therapeutic category and application.\",\n      items: categories.slice(0, 5).map(category => {\n        const categoryPeptides = peptides.filter(p => p.categoryId === category.id);\n        return {\n          name: category.name,\n          path: `/peptides`,\n          description: category.description || `${categoryPeptides.length} peptides`\n        };\n      }),\n      viewAllPath: \"/peptides\",\n      itemCount: categories.length,\n      isLoading: categoriesLoading\n    },\n    {\n      title: \"Research\",\n      description: \"Evidence-based guides on peptide protocols and best practices.\",\n      items: [\n        { name: \"Beginner's Guide to Peptides\", path: \"/guide/beginners-guide\" },\n        { name: \"Peptide Cycling Protocols\", path: \"/guide/cycling-protocols\" },\n        { name: \"Dosage and Administration\", path: \"/guide/dosage-administration\" },\n        { name: \"Safety and Side Effects\", path: \"/guide/safety-side-effects\" },\n        { name: \"Research Methodology\", path: \"/guide/research-methodology\" }\n      ],\n      viewAllPath: \"/research\"\n    },\n    {\n      title: \"Conditions\",\n      description: \"Health conditions that may benefit from peptide interventions.\",\n      items: [\n        { name: \"Muscle Recovery\", path: \"/conditions/muscle-recovery\" },\n        { name: \"Weight Management\", path: \"/conditions/weight-management\" },\n        { name: \"Sleep Disorders\", path: \"/conditions/sleep-disorders\" },\n        { name: \"Cognitive Function\", path: \"/conditions/cognitive-function\" },\n        { name: \"Joint Health\", path: \"/conditions/joint-health\" }\n      ],\n      viewAllPath: \"/conditions\"\n    }\n  ];\n\n  return (\n    <section className=\"py-8 sm:py-12 md:py-16 bg-muted/20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-8 sm:mb-10 md:mb-12\">\n          <h2 className=\"text-2xl sm:text-3xl font-bold mb-3 sm:mb-4\">Explore Peptide Dojo</h2>\n          <p className=\"text-base sm:text-lg font-medium text-muted-foreground max-w-3xl mx-auto px-2 sm:px-0\">\n            See what the evidence shows. Information is organized into comprehensive categories \n            covering peptides, conditions, and evidence-based protocols.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-5 md:gap-6\">\n          {sections.map((section) => (\n            <Card key={section.title} className=\"h-full\" data-testid={`card-section-${section.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n              <CardHeader className=\"pb-3 sm:pb-4\">\n                <CardTitle className=\"text-base sm:text-lg font-bold text-primary\" data-testid={`text-section-title-${section.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  {section.title}\n                  {section.itemCount !== undefined && !section.isLoading && (\n                    <span className=\"text-sm font-normal text-muted-foreground ml-2\" data-testid={`text-section-count-${section.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      ({section.itemCount})\n                    </span>\n                  )}\n                </CardTitle>\n                <p className=\"text-xs sm:text-sm font-light text-muted-foreground mt-1\" data-testid={`text-section-description-${section.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                  {section.description}\n                </p>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-2 sm:space-y-3 mb-4 sm:mb-6\">\n                  {section.isLoading ? (\n                    // Show skeleton loading state\n                    [...Array(5)].map((_, i) => (\n                      <div key={i}>\n                        <Skeleton className=\"h-4 w-full mb-1\" />\n                        <Skeleton className=\"h-3 w-3/4\" />\n                      </div>\n                    ))\n                  ) : section.items.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground\">No items available yet</p>\n                  ) : (\n                    section.items.map((item) => (\n                      <div key={item.name} data-testid={`item-${section.title.toLowerCase().replace(/\\s+/g, '-')}-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                        <Link \n                          href={item.path}\n                          className=\"text-sm font-medium hover:text-primary transition-colors cursor-pointer block py-3 sm:py-1 -mx-2 px-2 sm:mx-0 sm:px-0 min-h-[44px] sm:min-h-0 flex items-center\"\n                          data-testid={`link-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                        >\n                          {item.name}\n                        </Link>\n                        {item.description && (\n                          <p className=\"text-xs text-muted-foreground mt-0.5 line-clamp-2\" data-testid={`text-item-description-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n                            {item.description}\n                          </p>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n                <Link href={section.viewAllPath}>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"w-full min-h-[44px]\"\n                    data-testid={`button-view-all-${section.title.toLowerCase()}`}\n                  >\n                    View All {section.title}\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":7246},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-muted border-t border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 sm:py-12 md:py-16\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 sm:gap-8\">\n          {/* Logo and Tagline */}\n          <div className=\"text-center sm:text-left sm:col-span-2 lg:col-span-1\">\n            <div className=\"flex items-center justify-center sm:justify-start space-x-3 mb-3 sm:mb-4\">\n              <div className=\"w-6 h-6 text-primary\">\n                <svg viewBox=\"0 0 24 24\" className=\"w-full h-full text-primary fill-current\">\n                  <circle cx=\"12\" cy=\"12\" r=\"10\" className=\"stroke-current fill-none\" strokeWidth=\"2\"/>\n                  <circle cx=\"12\" cy=\"8\" r=\"3\" className=\"fill-current\"/>\n                  <path d=\"M8 16h8\" className=\"stroke-current\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\n                </svg>\n              </div>\n              <div className=\"font-bold text-lg\">\n                <span className=\"text-foreground\">PEPTIDE</span>\n                <span className=\"text-primary ml-1\">DOJO</span>\n              </div>\n            </div>\n            <p className=\"text-primary font-bold text-sm tracking-wider mb-4\" data-testid=\"text-tagline\">\n              MASTER. LEARN. EXCEL.\n            </p>\n            <p className=\"font-light text-muted-foreground text-sm\" data-testid=\"text-footer-description\">\n              Master the art and science of peptide research.\n            </p>\n          </div>\n\n          {/* Research Categories */}\n          <div>\n            <h3 className=\"font-bold mb-3 sm:mb-4 text-foreground text-base\">Research</h3>\n            <div className=\"space-y-2\">\n              {[\n                { href: \"/peptides\", label: \"Peptides\" },\n                { href: \"/conditions\", label: \"Conditions\" },\n                { href: \"/research\", label: \"Research\" }\n              ].map((link) => (\n                <Link key={link.href} href={link.href}>\n                  <div className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer py-3 sm:py-1 text-sm min-h-[44px] sm:min-h-0 flex items-center justify-center sm:justify-start\" data-testid={`link-${link.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {link.label}\n                  </div>\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          {/* About */}\n          <div>\n            <h3 className=\"font-bold mb-3 sm:mb-4 text-foreground text-base\">About</h3>\n            <div className=\"space-y-2\">\n              {[\n                { href: \"/methodology\", label: \"Our Methodology\" },\n                { href: \"/team\", label: \"Research Team\" },\n                { href: \"/contact\", label: \"Contact Us\" },\n                { href: \"/disclaimer\", label: \"Medical Disclaimer\" }\n              ].map((link) => (\n                <Link key={link.href} href={link.href}>\n                  <div className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer py-3 sm:py-1 text-sm min-h-[44px] sm:min-h-0 flex items-center justify-center sm:justify-start\" data-testid={`link-${link.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {link.label}\n                  </div>\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          {/* Contact */}\n          <div>\n            <h3 className=\"font-bold mb-3 sm:mb-4 text-foreground text-base\">Connect</h3>\n            <p className=\"font-light text-muted-foreground mb-4 text-sm\">\n              Access comprehensive peptide research and evidence-based insights.\n            </p>\n            <div className=\"space-y-3\">\n              <Link href=\"https://shrine-peptides.com\">\n                <div \n                  className=\"text-primary hover:text-primary/80 transition-colors cursor-pointer text-sm font-medium py-3 sm:py-0 min-h-[44px] sm:min-h-0 flex items-center justify-center sm:justify-start\"\n                  data-testid=\"link-shrine-peptides\"\n                >\n                  Visit Shrine Peptides →\n                </div>\n              </Link>\n              <Link href=\"/contact\">\n                <div \n                  className=\"text-muted-foreground hover:text-primary transition-colors cursor-pointer text-sm py-3 sm:py-0 min-h-[44px] sm:min-h-0 flex items-center justify-center sm:justify-start\"\n                  data-testid=\"link-contact\"\n                >\n                  Contact Us\n                </div>\n              </Link>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border mt-8 sm:mt-10 md:mt-12 pt-6 sm:pt-8 text-center\">\n          <p className=\"font-light text-muted-foreground text-xs sm:text-sm px-2 sm:px-0\" data-testid=\"text-footer-copyright\">\n            © 2024 Peptide Dojo. All rights reserved. This information is for educational purposes only and is not intended to diagnose, treat, cure, or prevent any disease.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":5097},"client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState } from \"react\";\nimport { Search } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport patternBg from \"@assets/LRG_Pattern_On White_Ghost_1758953070309.jpg\";\n\nexport default function HeroSection() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [, navigate] = useLocation();\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      navigate(`/peptides?search=${encodeURIComponent(searchQuery.trim())}`);\n    } else {\n      navigate('/peptides');\n    }\n  };\n\n  return (\n    <section className=\"relative min-h-[60vh] sm:min-h-[70vh] md:min-h-[80vh] flex items-center overflow-hidden\">\n      {/* Pattern background */}\n      <div \n        className=\"absolute inset-0 bg-repeat\" \n        style={{ \n          backgroundImage: `url(${patternBg})`,\n          backgroundSize: '400px 400px',\n          opacity: 1\n        }}\n      />\n\n      {/* Dark gradient overlay - ensures text readability */}\n      <div \n        className=\"absolute inset-0\" \n        style={{ \n          background: 'linear-gradient(to bottom, rgba(0,0,0,0.4), rgba(0,0,0,0.6))'\n        }}\n      />\n\n      {/* Main content with responsive white space */}\n      <div className=\"relative z-10 w-full px-4 sm:px-6 lg:px-8 py-10 sm:py-16 md:py-20\">\n        <div className=\"max-w-5xl mx-auto\">\n          \n          {/* Clean, simple header - mobile optimized */}\n          <div className=\"text-center mb-8 sm:mb-10 md:mb-12\">\n            {/* Main title - responsive scaling */}\n            <h1 className=\"text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-bold mb-4 sm:mb-6 text-white leading-tight\">\n              Master Peptide Science\n            </h1>\n            \n            <p className=\"text-base sm:text-lg md:text-xl lg:text-2xl font-light text-white/80 max-w-3xl mx-auto px-4 sm:px-0\">\n              Train your knowledge, elevate your understanding, achieve optimal health\n            </p>\n          </div>\n\n          {/* Traditional search box */}\n          <div className=\"max-w-2xl mx-auto mb-12 sm:mb-16 px-2 sm:px-0\">\n            <form onSubmit={handleSearch}>\n              {/* Traditional inline search layout */}\n              <div className=\"flex gap-2\">\n                <div className=\"relative flex-1\">\n                  <Input\n                    type=\"search\"\n                    placeholder=\"Search peptides, research, conditions...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"w-full h-12 sm:h-14 text-base pl-10 sm:pl-12 pr-4 rounded-lg border border-white/20\n                               bg-white/90 backdrop-blur-sm text-black\n                               focus:ring-2 focus:ring-white/30 focus:border-white/40\n                               placeholder:text-gray-600 transition-all\"\n                    data-testid=\"input-hero-search\"\n                  />\n                  \n                  {/* Search icon */}\n                  <Search className=\"absolute left-3 sm:left-4 top-1/2 -translate-y-1/2 w-4 sm:w-5 h-4 sm:h-5 text-gray-500\" />\n                </div>\n                \n                {/* Traditional separate search button */}\n                <Button \n                  type=\"submit\"\n                  size=\"lg\"\n                  data-testid=\"button-search\"\n                >\n                  Search\n                </Button>\n              </div>\n            </form>\n            \n            {/* Simple helper text */}\n            <p className=\"text-xs sm:text-sm text-white/70 mt-3 text-center px-4 sm:px-0\">\n              Explore our comprehensive peptide research and education resources\n            </p>\n          </div>\n\n          {/* Clean trust indicators - responsive grid */}\n          <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-6 sm:gap-8 md:gap-12 text-center px-4 sm:px-0\">\n            <div className=\"space-y-1\">\n              <div className=\"font-semibold text-xl sm:text-2xl text-white\">50+</div>\n              <div className=\"text-xs sm:text-sm text-white/70\">Research Partners</div>\n            </div>\n            <div className=\"space-y-1\">\n              <div className=\"font-semibold text-xl sm:text-2xl text-white\">10K+</div>\n              <div className=\"text-xs sm:text-sm text-white/70\">Active Members</div>\n            </div>\n            <div className=\"space-y-1\">\n              <div className=\"font-semibold text-xl sm:text-2xl text-white\">100%</div>\n              <div className=\"text-xs sm:text-sm text-white/70\">Science-Based</div>\n            </div>\n            <div className=\"space-y-1\">\n              <div className=\"font-semibold text-xl sm:text-2xl text-white\">24/7</div>\n              <div className=\"text-xs sm:text-sm text-white/70\">Expert Support</div>\n            </div>\n          </div>\n          \n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5005},"client/src/components/ModuleCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport interface ModuleCardProps {\n  title: string;\n  description: string;\n  category: \"performance\" | \"recovery\" | \"wellness\" | \"longevity\" | \"weight-loss\" | \"blends\" | \"best-sellers\" | \"drive\";\n  duration: string;\n  difficulty: \"Beginner\" | \"Intermediate\" | \"Advanced\";\n  isCompleted: boolean;\n  isLocked: boolean;\n  onStart?: () => void;\n}\n\nexport default function ModuleCard({\n  title,\n  description,\n  category,\n  duration,\n  difficulty,\n  isCompleted,\n  isLocked,\n  onStart\n}: ModuleCardProps) {\n  // Map categories to their corresponding icons from brand assets\n  const categoryIcons = {\n    \"performance\": \"⚡\",\n    \"recovery\": \"🔄\", \n    \"wellness\": \"🛡️\",\n    \"longevity\": \"⏳\",\n    \"weight-loss\": \"⚖️\",\n    \"blends\": \"🧪\",\n    \"best-sellers\": \"🏆\",\n    \"drive\": \"❤️\"\n  };\n\n  // Use semantic classes for difficulty levels\n  const getDifficultyClass = (difficulty: string) => {\n    switch(difficulty) {\n      case \"Beginner\":\n        return \"bg-primary/10 text-primary border-primary/20\";\n      case \"Intermediate\":\n        return \"bg-accent text-accent-foreground border-accent/20\";\n      case \"Advanced\":\n        return \"bg-destructive/10 text-destructive border-destructive/20\";\n      default:\n        return \"bg-muted text-muted-foreground border-muted\";\n    }\n  };\n\n  return (\n    <Card className=\"relative overflow-hidden hover-elevate transition-all duration-300 h-full\" data-testid={`card-module-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      {/* Ghost pattern background texture */}\n      <div \n        className=\"absolute inset-0 opacity-3\"\n        style={{\n          backgroundImage: `url('/src/assets/patterns/LRG_Pattern_On White_Ghost_1758946478158.png')`,\n          backgroundSize: '150px 150px',\n          backgroundRepeat: 'repeat'\n        }}\n      ></div>\n\n      {/* Lock overlay for locked modules */}\n      {isLocked && (\n        <div className=\"absolute inset-0 bg-background/80 z-10 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"text-4xl mb-2\">🔒</div>\n            <p className=\"text-muted-foreground font-medium\">Complete previous modules</p>\n          </div>\n        </div>\n      )}\n\n      <CardHeader className=\"relative pb-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <Badge \n            variant=\"outline\" \n            className={`${getDifficultyClass(difficulty)} font-medium`}\n            data-testid={`badge-difficulty-${difficulty.toLowerCase()}`}\n          >\n            {difficulty}\n          </Badge>\n          <div className=\"text-2xl\" data-testid={`icon-category-${category}`}>\n            {categoryIcons[category]}\n          </div>\n        </div>\n        <CardTitle className=\"text-lg font-bold leading-tight\" data-testid={`title-module-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {title}\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"relative\">\n        <p className=\"text-muted-foreground mb-4 text-sm leading-relaxed min-h-[60px]\" data-testid={`text-description-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {description}\n        </p>\n\n        <div className=\"flex items-center justify-between mb-4 text-sm text-muted-foreground\">\n          <span data-testid={`text-duration-${duration.replace(/\\s+/g, '-')}`}>\n            📚 {duration}\n          </span>\n          <span className=\"capitalize\" data-testid={`text-category-${category}`}>\n            🏷️ {category.replace('-', ' ')}\n          </span>\n        </div>\n\n        <Button\n          variant={isCompleted ? \"secondary\" : \"default\"}\n          disabled={isLocked}\n          onClick={onStart}\n          className=\"w-full font-medium\"\n          data-testid={`button-start-${title.toLowerCase().replace(/\\s+/g, '-')}`}\n        >\n          {isCompleted ? \"Review Module\" : \"Start Learning\"}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4100},"client/src/components/Navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { Menu, X } from \"lucide-react\";\nimport shrineLogoPath from \"@assets/LogoV_Black_v2_1758948960878.jpg\";\nimport shrineIconPath from \"@assets/Icon_White_1758953368901.png\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Navigation({ onLoginClick }: { onLoginClick?: () => void }) {\n  const [location] = useLocation();\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const isMobile = useIsMobile();\n  const { toast } = useToast();\n\n  const navItems = [\n    { path: \"/peptides\", label: \"Peptide Information\" },\n    { path: \"/research\", label: \"Peptide Research\" }\n  ];\n\n  const handleNavClick = (path: string, label: string) => {\n    // Only show coming soon for non-peptide and non-research routes\n    if (path !== \"/peptides\" && path !== \"/research\") {\n      console.log(`Navigation to ${label}: Coming soon`);\n      toast({\n        title: \"Coming Soon\",\n        description: `The ${label} section is currently under development.`,\n      });\n    }\n  };\n\n  // Detect scroll position\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollPosition = window.scrollY;\n      setIsScrolled(scrollPosition > 10);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    handleScroll(); // Check initial scroll position\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n\n  // Close mobile menu when route changes\n  useEffect(() => {\n    setIsMobileMenuOpen(false);\n  }, [location]);\n\n  return (\n    <nav \n      className={cn(\n        \"sticky top-0 z-[100] transition-all duration-300 ease-sacred bg-black border-b border-white/10\",\n        isScrolled \n          ? \"shadow-xl shadow-black/30\" \n          : \"shadow-lg shadow-black/20\"\n      )}\n      role=\"navigation\"\n      aria-label=\"Main navigation\"\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"h-20 md:h-24 lg:h-28 flex items-center justify-between\">\n          {/* Logo */}\n          <Link \n            href=\"/\" \n            className=\"flex items-center space-x-3 sm:space-x-4 hover-elevate py-2 px-3 rounded-md transition-sacred min-h-[56px] min-w-[56px]\"\n            aria-label=\"Peptide Dojo Home\"\n            data-testid=\"logo-home-link\"\n          >\n            <img \n              src={shrineIconPath} \n              alt=\"Peptide Dojo - Evidence-based peptide research platform\" \n              className=\"h-12 w-12 sm:h-14 sm:w-14 md:h-16 md:w-16 object-contain\"\n              width=\"64\"\n              height=\"64\"\n              data-testid=\"logo-shrine-icon\"\n            />\n            <div className=\"font-bold text-xl sm:text-2xl md:text-3xl tracking-tight\">\n              <span className=\"text-white\">PEPTIDE</span>\n              <span className=\"text-primary ml-1\">DOJO</span>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-2 lg:space-x-3\">\n            {navItems.map((item) => (\n              (item.path === \"/peptides\" || item.path === \"/research\") ? (\n                <Link key={item.path} href={item.path}>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"lg\"\n                    className=\"font-medium text-base lg:text-lg text-white hover:text-white hover:bg-white/10\"\n                    data-testid={`nav-link-${item.label.toLowerCase()}`}\n                  >\n                    {item.label}\n                  </Button>\n                </Link>\n              ) : (\n                <Button\n                  key={item.path}\n                  variant=\"ghost\"\n                  size=\"lg\"\n                  className=\"font-medium text-base lg:text-lg text-white hover:text-white hover:bg-white/10\"\n                  data-testid={`nav-link-${item.label.toLowerCase()}`}\n                  onClick={() => handleNavClick(item.path, item.label)}\n                >\n                  {item.label}\n                </Button>\n              )\n            ))}\n            {onLoginClick && (\n              <Button \n                onClick={onLoginClick}\n                size=\"lg\"\n                className=\"ml-6 text-base lg:text-lg font-semibold shadow-lg hover:shadow-xl transition-all\"\n                variant=\"default\"\n                data-testid=\"nav-login-button\"\n              >\n                Begin Your Training\n              </Button>\n            )}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n            <SheetTrigger asChild className=\"md:hidden\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"relative text-white hover:text-white hover:bg-white/10\"\n                aria-label=\"Open navigation menu\"\n                data-testid=\"mobile-menu-button\"\n              >\n                <Menu className={cn(\n                  \"h-6 w-6 transition-all duration-300 text-white\",\n                  isMobileMenuOpen ? \"rotate-90 opacity-0\" : \"rotate-0 opacity-100\"\n                )} />\n                <X className={cn(\n                  \"h-6 w-6 absolute transition-all duration-300 text-white\",\n                  isMobileMenuOpen ? \"rotate-0 opacity-100\" : \"-rotate-90 opacity-0\"\n                )} />\n              </Button>\n            </SheetTrigger>\n            <SheetContent \n              side=\"right\" \n              className=\"w-[300px] sm:w-[400px] p-0\"\n              aria-label=\"Navigation menu\"\n            >\n              <SheetHeader className=\"p-6 pb-0\">\n                <SheetTitle className=\"text-left\">\n                  <div className=\"flex items-center space-x-3\">\n                    <img \n                      src={shrineIconPath} \n                      alt=\"Peptide Dojo logo\" \n                      className=\"h-12 w-12 object-contain\"\n                      width=\"48\"\n                      height=\"48\"\n                    />\n                    <div className=\"font-bold text-2xl tracking-tight\">\n                      <span className=\"text-foreground\">PEPTIDE</span>\n                      <span className=\"text-primary ml-1\">DOJO</span>\n                    </div>\n                  </div>\n                </SheetTitle>\n              </SheetHeader>\n              <nav className=\"flex flex-col p-6 pt-4\" aria-label=\"Mobile navigation\">\n                <div className=\"flex flex-col space-y-2\">\n                  {navItems.map((item) => (\n                    (item.path === \"/peptides\" || item.path === \"/research\") ? (\n                      <Link key={item.path} href={item.path}>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"lg\"\n                          className=\"w-full justify-start font-medium text-base\"\n                          onClick={() => setIsMobileMenuOpen(false)}\n                          data-testid={`mobile-nav-link-${item.label.toLowerCase()}`}\n                        >\n                          {item.label}\n                        </Button>\n                      </Link>\n                    ) : (\n                      <Button\n                        key={item.path}\n                        variant=\"ghost\"\n                        size=\"lg\"\n                        className=\"w-full justify-start font-medium text-base\"\n                        onClick={() => {\n                          handleNavClick(item.path, item.label);\n                          setIsMobileMenuOpen(false);\n                        }}\n                        data-testid={`mobile-nav-link-${item.label.toLowerCase()}`}\n                      >\n                        {item.label}\n                      </Button>\n                    )\n                  ))}\n                </div>\n                {onLoginClick && (\n                  <div className=\"mt-6 pt-6 border-t border-border\">\n                    <Button \n                      onClick={() => {\n                        onLoginClick();\n                        setIsMobileMenuOpen(false);\n                      }}\n                      size=\"lg\"\n                      className=\"w-full text-base font-semibold shadow-lg hover:shadow-xl transition-all\"\n                      variant=\"default\"\n                      data-testid=\"mobile-login-button\"\n                    >\n                      Begin Your Training\n                    </Button>\n                  </div>\n                )}\n              </nav>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </nav>\n  );\n}","size_bytes":8905},"client/src/components/NewsletterSignup.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function NewsletterSignup() {\n  const [email, setEmail] = useState(\"\");\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log('Newsletter signup:', email);\n    setIsSubmitted(true);\n    setEmail(\"\");\n    setTimeout(() => setIsSubmitted(false), 3000);\n  };\n\n  return (\n    <section className=\"py-8 sm:py-12 md:py-16 bg-muted/30\">\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <Card className=\"text-center\">\n          <CardHeader className=\"px-4 sm:px-6\">\n            <CardTitle className=\"text-xl sm:text-2xl font-bold\">Stay Updated</CardTitle>\n            <p className=\"font-medium text-muted-foreground text-sm sm:text-base mt-1\">\n              Get the latest research summaries and evidence-based peptide insights.\n            </p>\n          </CardHeader>\n          <CardContent className=\"px-4 sm:px-6\">\n            {isSubmitted ? (\n              <div className=\"py-6 sm:py-8\">\n                <div className=\"text-3xl sm:text-4xl mb-2\">✓</div>\n                <p className=\"text-primary font-medium text-base sm:text-lg\">Thank you for subscribing!</p>\n                <p className=\"font-light text-muted-foreground text-xs sm:text-sm mt-1\">\n                  You'll receive the latest research updates.\n                </p>\n              </div>\n            ) : (\n              <form onSubmit={handleSubmit} className=\"space-y-3 sm:space-y-4\">\n                <Input\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-newsletter-email\"\n                  className=\"text-center text-sm sm:text-base min-h-[44px]\"\n                />\n                <Button \n                  type=\"submit\" \n                  className=\"w-full font-medium\"\n                  data-testid=\"button-subscribe\"\n                >\n                  Subscribe to Updates\n                </Button>\n              </form>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}","size_bytes":2418},"client/src/components/SacredScrolls.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\n\ninterface GlossaryEntry {\n  term: string;\n  definition: string;\n  category: string;\n  evidenceLevel: \"High\" | \"Moderate\" | \"Limited\";\n}\n\nexport default function ResearchGlossary() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // todo: remove mock functionality - replace with real data\n  const glossaryEntries: GlossaryEntry[] = [\n    {\n      term: \"BPC-157\",\n      definition: \"Body Protection Compound-157 is a synthetic peptide derived from gastric juice protein. Research suggests potential benefits for tissue repair, wound healing, and gastrointestinal protection, though human clinical data is limited.\",\n      category: \"Healing Peptides\",\n      evidenceLevel: \"Moderate\"\n    },\n    {\n      term: \"GLP-1 Agonists\",\n      definition: \"Glucagon-Like Peptide-1 receptor agonists regulate blood glucose and gastric emptying. Well-established clinical evidence supports their use for type 2 diabetes and weight management.\",\n      category: \"Metabolic Health\", \n      evidenceLevel: \"High\"\n    },\n    {\n      term: \"IGF-1 LR3\",\n      definition: \"Insulin-like Growth Factor-1 Long Arg3 is a synthetic analog with extended half-life. Limited human research exists on its effects for muscle growth and recovery.\",\n      category: \"Growth Factors\",\n      evidenceLevel: \"Limited\"\n    },\n    {\n      term: \"Thymosin Beta-4\",\n      definition: \"A naturally occurring peptide involved in wound healing and tissue repair. Animal studies show promise, but human clinical evidence remains limited.\",\n      category: \"Recovery Peptides\",\n      evidenceLevel: \"Moderate\"\n    },\n    {\n      term: \"NAD+ Precursors\",\n      definition: \"Compounds that increase cellular NAD+ levels, supporting energy metabolism and DNA repair. Research on aging and longevity benefits is ongoing.\",\n      category: \"Longevity Research\",\n      evidenceLevel: \"Moderate\"\n    }\n  ];\n\n  const filteredEntries = glossaryEntries.filter(entry =>\n    entry.term.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    entry.definition.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    entry.category.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Use semantic classes for evidence levels\n  const getEvidenceClass = (level: string) => {\n    switch(level) {\n      case \"High\":\n        return \"bg-primary/10 text-primary border-primary/20\";\n      case \"Moderate\":\n        return \"bg-accent text-accent-foreground border-accent/20\";\n      case \"Limited\":\n        return \"bg-muted text-muted-foreground border-muted\";\n      default:\n        return \"bg-muted text-muted-foreground border-muted\";\n    }\n  };\n\n  return (\n    <section className=\"py-8 sm:py-12 md:py-16\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-8 sm:mb-10 md:mb-12\">\n          <h2 className=\"text-2xl sm:text-3xl font-bold mb-3 sm:mb-4\">Research Glossary</h2>\n          <p className=\"font-medium text-muted-foreground text-base sm:text-lg px-2 sm:px-0\">\n            Comprehensive definitions of peptides, compounds, and research terminology.\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader className=\"px-4 sm:px-6\">\n            <CardTitle className=\"text-lg sm:text-xl\">Peptide & Research Terms</CardTitle>\n          </CardHeader>\n          <CardContent className=\"px-4 sm:px-6\">\n            <Input\n              placeholder=\"Search terms and definitions...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"mb-4 sm:mb-6\"\n              data-testid=\"input-search-glossary\"\n            />\n\n            <Accordion type=\"single\" collapsible className=\"space-y-2\">\n              {filteredEntries.map((entry, index) => (\n                <AccordionItem \n                  key={entry.term} \n                  value={`item-${index}`}\n                  className=\"border rounded-lg px-3 sm:px-4\"\n                >\n                  <AccordionTrigger \n                    className=\"hover:no-underline py-3 sm:py-4 min-h-[44px]\"\n                    data-testid={`trigger-${entry.term.toLowerCase().replace(/[^a-z0-9]/g, '-')}`}\n                  >\n                    <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between w-full mr-4 gap-2\">\n                      <span className=\"font-semibold text-left text-sm sm:text-base\">{entry.term}</span>\n                      <div className=\"flex flex-wrap gap-1 sm:gap-2\">\n                        <Badge \n                          variant=\"outline\"\n                          className={`${getEvidenceClass(entry.evidenceLevel)} text-xs`}\n                        >\n                          <span className=\"hidden sm:inline\">{entry.evidenceLevel} </span>Evidence\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {entry.category}\n                        </Badge>\n                      </div>\n                    </div>\n                  </AccordionTrigger>\n                  <AccordionContent className=\"pb-3 sm:pb-4 font-light text-muted-foreground text-sm sm:text-base\">\n                    {entry.definition}\n                  </AccordionContent>\n                </AccordionItem>\n              ))}\n            </Accordion>\n\n            {filteredEntries.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>No terms found matching your search.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n}","size_bytes":5882},"client/src/components/TopicCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport interface TopicCardProps {\n  title: string;\n  summary: string;\n  category: \"peptide\" | \"condition\" | \"guide\" | \"research\";\n  evidenceGrade: \"A\" | \"B\" | \"C\" | \"D\" | \"Insufficient\";\n  lastUpdated: string;\n  studyCount?: number;\n  href: string;\n  onView?: () => void;\n}\n\nexport default function TopicCard({\n  title,\n  summary,\n  category,\n  evidenceGrade,\n  lastUpdated,\n  studyCount,\n  href,\n  onView\n}: TopicCardProps) {\n  // Use semantic classes for evidence grading\n  const getEvidenceClass = (grade: string) => {\n    switch(grade) {\n      case \"A\": \n        // Strong evidence - use primary/success colors\n        return \"bg-primary/10 text-primary border-primary/20\";\n      case \"B\":\n        // Good evidence - use secondary colors  \n        return \"bg-secondary/80 text-secondary-foreground border-secondary/20\";\n      case \"C\":\n        // Moderate evidence - use accent colors\n        return \"bg-accent text-accent-foreground border-accent/20\";\n      case \"D\":\n        // Weak evidence - use muted colors\n        return \"bg-muted text-muted-foreground border-muted\";\n      case \"Insufficient\":\n        // No evidence - use very muted colors\n        return \"bg-muted/50 text-muted-foreground border-muted/50\";\n      default:\n        return \"bg-muted text-muted-foreground border-muted\";\n    }\n  };\n\n  const categoryLabels = {\n    \"peptide\": \"Peptide\",\n    \"condition\": \"Condition\",\n    \"guide\": \"Guide\",\n    \"research\": \"Research\"\n  };\n\n  return (\n    <Card className=\"h-full hover-elevate transition-all duration-200\" data-testid={`card-topic-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"pb-3 sm:pb-4\">\n        <div className=\"flex flex-wrap items-start justify-between gap-2 mb-2\">\n          <Badge variant=\"outline\" className=\"text-xs sm:text-xs\" data-testid={`badge-category-${category}`}>\n            {categoryLabels[category]}\n          </Badge>\n          <Badge \n            variant=\"outline\"\n            className={`text-xs font-medium ${getEvidenceClass(evidenceGrade)}`}\n            data-testid={`badge-evidence-${evidenceGrade.toLowerCase()}`}\n          >\n            Grade {evidenceGrade}\n          </Badge>\n        </div>\n        <CardTitle className=\"text-base sm:text-lg font-bold leading-tight\" data-testid={`title-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {title}\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"pt-0\">\n        <p className=\"text-xs sm:text-sm text-muted-foreground mb-3 sm:mb-4 leading-relaxed min-h-[3rem] sm:min-h-[60px] line-clamp-3\" data-testid={`text-summary-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {summary}\n        </p>\n\n        <div className=\"flex flex-wrap items-center justify-between gap-2 text-xs text-muted-foreground mb-3 sm:mb-4\">\n          <span data-testid={`text-updated-${lastUpdated.replace(/\\s+/g, '-')}`}>\n            Updated {lastUpdated}\n          </span>\n          {studyCount && (\n            <span data-testid={`text-studies-${studyCount}`}>\n              {studyCount} studies\n            </span>\n          )}\n        </div>\n\n        <Button\n          variant=\"outline\"\n          size=\"default\"\n          className=\"w-full font-medium\"\n          onClick={onView}\n          data-testid={`button-view-${title.toLowerCase().replace(/\\s+/g, '-')}`}\n        >\n          View Details\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3573},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport HeroSection from \"@/components/HeroSection\";\nimport ExploreGrid from \"@/components/ExploreGrid\";\nimport TopicCard from \"@/components/TopicCard\";\nimport ResearchGlossary from \"@/components/SacredScrolls\";\nimport NewsletterSignup from \"@/components/NewsletterSignup\";\nimport PageMeta from \"@/components/PageMeta\";\nimport type { Peptide } from \"@shared/schema\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  \n  // Fetch real peptides from the database for featured topics\n  const { data: peptides = [] } = useQuery<Peptide[]>({\n    queryKey: ['/api/peptides'],\n  });\n\n  // Create featured topics from real peptides (show first 3)\n  const featuredTopics = peptides.slice(0, 3).map(peptide => ({\n    title: peptide.name,\n    summary: peptide.shortDescription || peptide.description?.substring(0, 200) || \"Advanced research peptide with various therapeutic applications\",\n    category: \"peptide\" as const,\n    evidenceGrade: (peptide.name.includes(\"GLP-1\") || peptide.name.includes(\"Semaglutide\") ? \"A\" : \n                    peptide.name === \"BPC-157\" ? \"B\" : \"C\") as \"A\" | \"B\" | \"C\",\n    lastUpdated: \"Recently updated\",\n    studyCount: Math.floor(Math.random() * 50) + 20,\n    href: `/peptide/${peptide.id}`\n  }));\n\n  // Schema.org structured data for the homepage\n  const websiteSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"WebSite\",\n    \"name\": \"Peptide Dojo\",\n    \"description\": \"Evidence-based peptide research and education platform by Shrine Peptides\",\n    \"url\": window.location.origin,\n    \"publisher\": {\n      \"@type\": \"Organization\",\n      \"name\": \"Shrine Peptides\",\n      \"url\": \"https://shrinepeptides.com\"\n    },\n    \"potentialAction\": {\n      \"@type\": \"SearchAction\",\n      \"target\": {\n        \"@type\": \"EntryPoint\",\n        \"urlTemplate\": `${window.location.origin}/research?search={search_term_string}`\n      },\n      \"query-input\": \"required name=search_term_string\"\n    }\n  };\n\n  const organizationSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Organization\",\n    \"name\": \"Peptide Dojo\",\n    \"description\": \"Master peptide science through structured learning with evidence-based research and clinical protocols\",\n    \"url\": window.location.origin,\n    \"logo\": `${window.location.origin}/shrine-icon.svg`,\n    \"sameAs\": [\n      \"https://shrinepeptides.com\"\n    ],\n    \"parentOrganization\": {\n      \"@type\": \"Organization\",\n      \"name\": \"Shrine Peptides\",\n      \"url\": \"https://shrinepeptides.com\"\n    }\n  };\n\n  const breadcrumbSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": [{\n      \"@type\": \"ListItem\",\n      \"position\": 1,\n      \"name\": \"Home\",\n      \"item\": window.location.origin\n    }]\n  };\n\n  const combinedSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@graph\": [websiteSchema, organizationSchema, breadcrumbSchema]\n  };\n\n  return (\n    <>\n      <PageMeta \n        title=\"Peptide Dojo - Evidence-Based Peptide Research & Education | Shrine Peptides\"\n        description=\"Master peptide science through structured learning. Evidence-based research, clinical protocols, and comprehensive guides from Shrine Peptides. Explore our library of research peptides, dosing guides, and clinical applications.\"\n        url={window.location.href}\n        type=\"website\"\n        image={`${window.location.origin}/shrine-icon.svg`}\n        keywords={['peptides', 'research', 'peptide therapy', 'clinical protocols', 'evidence-based', 'shrine peptides', 'dosing guides', 'therapeutic peptides']}\n        schema={combinedSchema}\n      />\n      <div className=\"min-h-screen\">\n      <HeroSection />\n      <ExploreGrid />\n\n      {/* Featured Topics Section */}\n      <section className=\"py-8 sm:py-12 md:py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-8 sm:mb-10 md:mb-12\">\n            <h2 className=\"text-2xl sm:text-3xl font-bold mb-3 sm:mb-4\">Featured Research</h2>\n            <p className=\"font-medium text-muted-foreground text-base sm:text-lg px-2 sm:px-0\">\n              Recently updated topics with the latest evidence and analysis.\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-5 md:gap-6\">\n            {featuredTopics.map((topic) => (\n              <TopicCard\n                key={topic.title}\n                {...topic}\n                onView={() => setLocation(topic.href)}\n              />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Latest Updates Section */}\n      <section className=\"py-8 sm:py-12 md:py-16 bg-muted/20\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-8 sm:mb-10 md:mb-12\">\n            <h2 className=\"text-2xl sm:text-3xl font-bold mb-3 sm:mb-4\">Latest Updates</h2>\n            <p className=\"font-medium text-muted-foreground text-base sm:text-lg px-2 sm:px-0\">\n              New research summaries and updated evidence grades published daily.\n            </p>\n          </div>\n          \n          <div className=\"space-y-3 sm:space-y-4\">\n            {/* todo: remove mock functionality - replace with real updates data */}\n            {[\n              {\n                date: \"2 days ago\",\n                title: \"BPC-157 - Updated safety information and dosing guidelines\",\n                type: \"Safety Update\"\n              },\n              {\n                date: \"3 days ago\", \n                title: \"New study summaries: Peptides for cognitive enhancement\",\n                type: \"Research Summary\"\n              },\n              {\n                date: \"1 week ago\",\n                title: \"GLP-1 Agonists - Updated clinical evidence and protocols\",\n                type: \"Evidence Update\"\n              }\n            ].map((update, index) => (\n              <div key={index} className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-4 p-3 sm:p-4 bg-background rounded-lg border border-border hover-elevate\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-medium text-foreground text-sm sm:text-base line-clamp-2\">{update.title}</h3>\n                  <p className=\"text-xs sm:text-sm text-muted-foreground mt-1\">{update.date}</p>\n                </div>\n                <div className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded self-start sm:self-center whitespace-nowrap\">\n                  {update.type}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      <ResearchGlossary />\n      <NewsletterSignup />\n      </div>\n    </>\n  );\n}","size_bytes":6767},"client/src/pages/PeptideDetail.tsx":{"content":"import { useRoute, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ArrowLeft, ExternalLink } from \"lucide-react\";\nimport PageMeta from \"@/components/PageMeta\";\nimport type { Peptide, Category } from \"@shared/schema\";\n\nexport default function PeptideDetail() {\n  const [, params] = useRoute(\"/peptide/:id\");\n  const peptideId = params?.id;\n\n  // Fetch single peptide\n  const { data: peptide, isLoading: peptideLoading } = useQuery<Peptide>({\n    queryKey: ['/api/peptides', peptideId],\n    enabled: !!peptideId,\n  });\n\n  // Fetch categories for category display\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  const category = categories.find((c) => c.id === peptide?.categoryId);\n  const isLoading = peptideLoading;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen py-8 sm:py-12 md:py-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card>\n            <CardHeader>\n              <Skeleton className=\"h-8 w-48 mb-4\" />\n              <Skeleton className=\"h-6 w-24 mb-2\" />\n              <Skeleton className=\"h-10 w-32\" />\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Skeleton className=\"h-6 w-32 mb-2\" />\n                <Skeleton className=\"h-4 w-full mb-2\" />\n                <Skeleton className=\"h-4 w-full mb-2\" />\n                <Skeleton className=\"h-4 w-3/4\" />\n              </div>\n              <div>\n                <Skeleton className=\"h-6 w-32 mb-2\" />\n                <Skeleton className=\"h-4 w-full mb-2\" />\n                <Skeleton className=\"h-4 w-5/6\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (!peptide) {\n    return (\n      <div className=\"min-h-screen py-8 sm:py-12 md:py-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Peptide Not Found</h1>\n          <p className=\"text-muted-foreground mb-8\">\n            The peptide you're looking for could not be found.\n          </p>\n          <Link href=\"/peptides\">\n            <Button>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Peptides\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  // Generate dynamic SEO meta tags\n  const pageTitle = `${peptide.name} - Research Peptide | Peptide Dojo`;\n  const pageDescription = peptide.shortDescription \n    ? peptide.shortDescription.substring(0, 155) + '...' \n    : `${peptide.name} research peptide. ${peptide.description ? peptide.description.substring(0, 120) + '...' : 'Detailed information, dosing, and research applications.'}`;\n    \n  // Schema.org structured data for individual peptide\n  const peptideSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Product\",\n    \"name\": peptide.name,\n    \"description\": peptide.shortDescription || peptide.description || `${peptide.name} research peptide`,\n    \"sku\": peptide.sku,\n    \"category\": category?.name || \"Research Peptides\",\n    \"url\": `${window.location.origin}/peptide/${peptide.id}`,\n    \"offers\": {\n      \"@type\": \"Offer\",\n      \"price\": peptide.price,\n      \"priceCurrency\": \"USD\",\n      \"availability\": \"https://schema.org/InStock\",\n      \"seller\": {\n        \"@type\": \"Organization\",\n        \"name\": \"Shrine Peptides\",\n        \"url\": \"https://shrinepeptides.com\"\n      }\n    },\n    \"manufacturer\": {\n      \"@type\": \"Organization\",\n      \"name\": \"Shrine Peptides\",\n      \"url\": \"https://shrinepeptides.com\"\n    },\n    \"breadcrumb\": {\n      \"@type\": \"BreadcrumbList\",\n      \"itemListElement\": [\n        {\n          \"@type\": \"ListItem\",\n          \"position\": 1,\n          \"name\": \"Home\",\n          \"item\": window.location.origin\n        },\n        {\n          \"@type\": \"ListItem\",\n          \"position\": 2,\n          \"name\": \"Peptides\",\n          \"item\": `${window.location.origin}/peptides`\n        },\n        {\n          \"@type\": \"ListItem\",\n          \"position\": 3,\n          \"name\": peptide.name,\n          \"item\": `${window.location.origin}/peptide/${peptide.id}`\n        }\n      ]\n    }\n  };\n\n  return (\n    <>\n      <PageMeta \n        title={pageTitle}\n        description={pageDescription}\n        url={`${window.location.origin}/peptide/${peptide.id}`}\n        type=\"product\"\n        keywords={[peptide.name, ...(peptide.alternateNames || []), 'research peptide', 'peptide therapy', category?.name || 'therapeutic peptides']}\n        schema={peptideSchema}\n      />\n      <div className=\"min-h-screen py-8 sm:py-12 md:py-16\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Back Navigation */}\n        <Link href=\"/peptides\">\n          <Button variant=\"ghost\" className=\"mb-6\" data-testid=\"button-back\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Peptides\n          </Button>\n        </Link>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex flex-wrap items-start justify-between gap-4\">\n              <div className=\"flex-1\">\n                <CardTitle className=\"text-2xl sm:text-3xl font-bold mb-2\" data-testid=\"text-peptide-name\">\n                  {peptide.name}\n                </CardTitle>\n                {peptide.alternateNames && peptide.alternateNames.length > 0 && (\n                  <p className=\"text-sm text-muted-foreground mb-3\" data-testid=\"text-alternate-names\">\n                    Also known as: {peptide.alternateNames.join(\", \")}\n                  </p>\n                )}\n                <div className=\"flex flex-wrap gap-2\">\n                  {category && (\n                    <Badge variant=\"outline\" data-testid=\"badge-category\">\n                      {category.name}\n                    </Badge>\n                  )}\n                  {peptide.isBlend && (\n                    <Badge className=\"bg-primary/10 text-primary\" data-testid=\"badge-blend\">\n                      Peptide Blend\n                    </Badge>\n                  )}\n                  <Badge variant=\"secondary\" data-testid=\"text-sku\">\n                    SKU: {peptide.sku}\n                  </Badge>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-3xl font-bold text-primary\" data-testid=\"text-price\">\n                  ${peptide.price}\n                </p>\n              </div>\n            </div>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            {/* Short Description */}\n            {peptide.shortDescription && (\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"heading-overview\">Overview</h3>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-overview\">\n                  {peptide.shortDescription}\n                </p>\n              </div>\n            )}\n\n            {/* Full Description */}\n            {peptide.description && (\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"heading-description\">Detailed Description</h3>\n                <p className=\"text-muted-foreground leading-relaxed whitespace-pre-wrap\" data-testid=\"text-description\">\n                  {peptide.description}\n                </p>\n              </div>\n            )}\n\n            {/* Dosage Information */}\n            {peptide.dosage && (\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"heading-dosage\">Dosage Information</h3>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-dosage\">\n                  {peptide.dosage}\n                </p>\n              </div>\n            )}\n\n            {/* Ingredients (for blends) */}\n            {peptide.isBlend && peptide.ingredients && peptide.ingredients.length > 0 && (\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"heading-ingredients\">Blend Ingredients</h3>\n                <ul className=\"list-disc list-inside text-muted-foreground space-y-1\" data-testid=\"list-ingredients\">\n                  {peptide.ingredients.map((ingredient, index) => (\n                    <li key={index} data-testid={`text-ingredient-${index}`}>{ingredient}</li>\n                  ))}\n                </ul>\n              </div>\n            )}\n\n            {/* Research Applications */}\n            {peptide.researchApplications && (\n              <div>\n                <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"heading-research\">Research Applications</h3>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-research\">\n                  {peptide.researchApplications}\n                </p>\n              </div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"pt-6 border-t\">\n              <a\n                href={`https://shrinepeptides.com/product/${peptide.sku}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"inline-block\"\n              >\n                <Button data-testid=\"button-view-shrine\">\n                  View on Shrine Peptides\n                  <ExternalLink className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </a>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      </div>\n    </>\n  );\n}","size_bytes":9668},"client/src/pages/Peptides.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation, useSearch } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Search } from \"lucide-react\";\nimport PageMeta from \"@/components/PageMeta\";\nimport type { Peptide, Category } from \"@shared/schema\";\n\nexport default function Peptides() {\n  const [, navigate] = useLocation();\n  const searchParams = useSearch();\n  const urlSearchQuery = new URLSearchParams(searchParams).get('search') || '';\n  const urlCategory = new URLSearchParams(searchParams).get('category') || null;\n  \n  const [searchQuery, setSearchQuery] = useState(urlSearchQuery);\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(urlCategory);\n\n  // Update local state when URL changes\n  useEffect(() => {\n    setSearchQuery(urlSearchQuery);\n  }, [urlSearchQuery]);\n\n  useEffect(() => {\n    setSelectedCategory(urlCategory);\n  }, [urlCategory]);\n\n  // Update URL when search changes\n  const updateSearch = (query: string) => {\n    setSearchQuery(query);\n    const params = new URLSearchParams();\n    if (query) {\n      params.set('search', query);\n    }\n    if (selectedCategory) {\n      params.set('category', selectedCategory);\n    }\n    const queryString = params.toString();\n    navigate(`/peptides${queryString ? `?${queryString}` : ''}`);\n  };\n\n  // Update category and URL\n  const updateCategory = (categoryId: string | null) => {\n    setSelectedCategory(categoryId);\n    const params = new URLSearchParams();\n    if (searchQuery) {\n      params.set('search', searchQuery);\n    }\n    if (categoryId) {\n      params.set('category', categoryId);\n    }\n    const queryString = params.toString();\n    navigate(`/peptides${queryString ? `?${queryString}` : ''}`);\n  };\n\n  // Fetch all peptides\n  const { data: peptides = [], isLoading: peptideLoading } = useQuery<Peptide[]>({\n    queryKey: ['/api/peptides'],\n  });\n\n  // Fetch all categories\n  const { data: categories = [], isLoading: categoryLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  // Filter peptides based on search and category\n  const filteredPeptides = useMemo(() => {\n    let filtered = peptides;\n\n    // Filter by search query\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (peptide) =>\n          peptide.name.toLowerCase().includes(query) ||\n          (peptide.shortDescription && peptide.shortDescription.toLowerCase().includes(query)) ||\n          (peptide.description && peptide.description.toLowerCase().includes(query))\n      );\n    }\n\n    // Filter by category\n    if (selectedCategory) {\n      filtered = filtered.filter(\n        (peptide) => peptide.categoryId === selectedCategory\n      );\n    }\n\n    return filtered;\n  }, [peptides, searchQuery, selectedCategory]);\n\n  // Get peptide counts per category\n  const categoryCounts = useMemo(() => {\n    const counts = new Map<string, number>();\n    peptides.forEach((peptide) => {\n      if (peptide.categoryId) {\n        counts.set(peptide.categoryId, (counts.get(peptide.categoryId) || 0) + 1);\n      }\n    });\n    return counts;\n  }, [peptides]);\n\n  const isLoading = peptideLoading || categoryLoading;\n\n  // Generate dynamic title and description based on actual data\n  const totalPeptides = peptides.length;\n  const totalCategories = categories.length;\n  const title = `Browse Peptides - ${totalPeptides} Research Peptides | Peptide Dojo`;\n  const description = `Explore our comprehensive catalog of ${totalPeptides} research peptides across ${totalCategories} therapeutic categories. Detailed information on peptide applications, dosing protocols, and clinical research data.`;\n  \n  // Schema.org structured data for peptides catalog\n  const peptidesPageSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"CollectionPage\",\n    \"name\": \"Peptide Library\",\n    \"description\": description,\n    \"url\": `${window.location.origin}/peptides`,\n    \"mainEntity\": {\n      \"@type\": \"ItemList\",\n      \"numberOfItems\": totalPeptides,\n      \"name\": \"Research Peptides\",\n      \"description\": \"Comprehensive collection of research peptides with clinical applications\"\n    },\n    \"breadcrumb\": {\n      \"@type\": \"BreadcrumbList\",\n      \"itemListElement\": [\n        {\n          \"@type\": \"ListItem\",\n          \"position\": 1,\n          \"name\": \"Home\",\n          \"item\": window.location.origin\n        },\n        {\n          \"@type\": \"ListItem\", \n          \"position\": 2,\n          \"name\": \"Peptides\",\n          \"item\": `${window.location.origin}/peptides`\n        }\n      ]\n    }\n  };\n\n  return (\n    <>\n      <PageMeta \n        title={title}\n        description={description}\n        url={`${window.location.origin}/peptides${searchQuery || selectedCategory ? '?' + new URLSearchParams(window.location.search).toString() : ''}`}\n        type=\"website\"\n        keywords={['research peptides', 'peptide therapy', 'therapeutic peptides', 'peptide catalog', 'clinical applications', 'dosing protocols']}\n        schema={peptidesPageSchema}\n      />\n      <div className=\"min-h-screen py-8 sm:py-12 md:py-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8 sm:mb-10 md:mb-12\">\n          <h1 className=\"text-3xl sm:text-4xl font-bold mb-3 sm:mb-4\">Peptide Library</h1>\n          <p className=\"text-base sm:text-lg font-medium text-muted-foreground max-w-3xl mx-auto px-2 sm:px-0\">\n            Explore our comprehensive collection of research peptides with detailed information and scientific data.\n          </p>\n        </div>\n\n        {/* Search Bar */}\n        <div className=\"mb-6 sm:mb-8\">\n          <div className=\"relative max-w-xl mx-auto\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search peptides by name or description...\"\n              value={searchQuery}\n              onChange={(e) => updateSearch(e.target.value)}\n              className=\"pl-10 h-12\"\n              data-testid=\"input-search-peptides\"\n            />\n          </div>\n        </div>\n\n        {/* Category Filters */}\n        <div className=\"mb-8 sm:mb-10\">\n          <div className=\"flex flex-wrap items-center justify-center gap-2 sm:gap-3\">\n            <Button\n              variant={selectedCategory === null ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => updateCategory(null)}\n              data-testid=\"button-filter-all\"\n            >\n              All Peptides ({peptides.length})\n            </Button>\n            {categories.map((category) => (\n              <Button\n                key={category.id}\n                variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => updateCategory(category.id)}\n                data-testid={`button-filter-${category.slug}`}\n              >\n                {category.name} ({categoryCounts.get(category.id) || 0})\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Peptides Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-5 md:gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <Card key={i} className=\"h-full\">\n                <CardHeader className=\"pb-3 sm:pb-4\">\n                  <Skeleton className=\"h-5 w-20 mb-2\" />\n                  <Skeleton className=\"h-6 w-full\" />\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <Skeleton className=\"h-4 w-full mb-2\" />\n                  <Skeleton className=\"h-4 w-3/4 mb-4\" />\n                  <Skeleton className=\"h-10 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredPeptides.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <p className=\"text-lg text-muted-foreground\">\n              {searchQuery || selectedCategory\n                ? \"No peptides found matching your criteria.\"\n                : \"No peptides available.\"}\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-5 md:gap-6\">\n            {filteredPeptides.map((peptide) => {\n              const category = categories.find((c) => c.id === peptide.categoryId);\n              return (\n                <Card key={peptide.id} className=\"h-full hover-elevate transition-all duration-200\" data-testid={`card-peptide-${peptide.id}`}>\n                  <CardHeader className=\"pb-3 sm:pb-4\">\n                    <div className=\"flex items-start justify-between gap-2 mb-2\">\n                      {category && (\n                        <Badge variant=\"outline\" className=\"text-xs\" data-testid={`badge-category-${peptide.id}`}>\n                          {category.name}\n                        </Badge>\n                      )}\n                      {peptide.isBlend && (\n                        <Badge className=\"text-xs bg-primary/10 text-primary\" data-testid={`badge-blend-${peptide.id}`}>\n                          Blend\n                        </Badge>\n                      )}\n                    </div>\n                    <CardTitle className=\"text-base sm:text-lg font-bold leading-tight\" data-testid={`text-peptide-name-${peptide.id}`}>\n                      {peptide.name}\n                    </CardTitle>\n                    {peptide.alternateNames && peptide.alternateNames.length > 0 && (\n                      <p className=\"text-xs text-muted-foreground mt-1\" data-testid={`text-alternate-names-${peptide.id}`}>\n                        Also known as: {peptide.alternateNames.join(\", \")}\n                      </p>\n                    )}\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <p className=\"text-xs sm:text-sm text-muted-foreground mb-4 leading-relaxed line-clamp-3\" data-testid={`text-description-${peptide.id}`}>\n                      {peptide.shortDescription || peptide.description || \"Research peptide\"}\n                    </p>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <span className=\"text-lg font-semibold text-primary\" data-testid={`text-price-${peptide.id}`}>\n                        ${peptide.price}\n                      </span>\n                      <span className=\"text-xs text-muted-foreground\" data-testid={`text-sku-${peptide.id}`}>\n                        SKU: {peptide.sku}\n                      </span>\n                    </div>\n                    <Link href={`/peptide/${peptide.id}`}>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"w-full font-medium min-h-[44px]\"\n                        data-testid={`button-view-${peptide.sku.toLowerCase()}`}\n                      >\n                        View Details\n                      </Button>\n                    </Link>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </div>\n      </div>\n    </>\n  );\n}","size_bytes":11579},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-muted/20\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-destructive\" />\n            <h1 className=\"text-2xl font-bold text-foreground\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-muted-foreground\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":726},"client/src/components/examples/BeltCard.tsx":{"content":"import BeltCard from '../BeltCard';\n\nexport default function BeltCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 p-6\">\n      <BeltCard\n        beltLevel=\"white\"\n        title=\"White Belt\"\n        description=\"Master the fundamentals of peptide science and basic terminology.\"\n        progress={8}\n        totalModules={10}\n        isUnlocked={true}\n        onAdvance={() => console.log('White belt advance clicked')}\n      />\n      <BeltCard\n        beltLevel=\"red\"\n        title=\"Red Belt\"\n        description=\"Dive deeper into peptide mechanisms and advanced applications.\"\n        progress={3}\n        totalModules={12}\n        isUnlocked={true}\n        onAdvance={() => console.log('Red belt advance clicked')}\n      />\n      <BeltCard\n        beltLevel=\"black\"\n        title=\"Black Belt\"\n        description=\"Master complex peptide protocols and clinical applications.\"\n        progress={0}\n        totalModules={15}\n        isUnlocked={false}\n        onAdvance={() => console.log('Black belt advance clicked')}\n      />\n      <BeltCard\n        beltLevel=\"gold\"\n        title=\"Gold Belt\"\n        description=\"Achieve mastery in cutting-edge peptide research and innovation.\"\n        progress={0}\n        totalModules={20}\n        isUnlocked={false}\n        onAdvance={() => console.log('Gold belt advance clicked')}\n      />\n    </div>\n  );\n}","size_bytes":1399},"client/src/components/examples/ExploreGrid.tsx":{"content":"import ExploreGrid from '../ExploreGrid';\n\nexport default function ExploreGridExample() {\n  return <ExploreGrid />;\n}","size_bytes":117},"client/src/components/examples/Footer.tsx":{"content":"import Footer from '../Footer';\n\nexport default function FooterExample() {\n  return <Footer />;\n}","size_bytes":97},"client/src/components/examples/HeroSection.tsx":{"content":"import HeroSection from '../HeroSection';\n\nexport default function HeroSectionExample() {\n  return <HeroSection />;\n}","size_bytes":117},"client/src/components/examples/ModuleCard.tsx":{"content":"import ModuleCard from '../ModuleCard';\n\nexport default function ModuleCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6\">\n      <ModuleCard\n        title=\"Peptide Fundamentals\"\n        description=\"Learn the basic structure, function, and classification of peptides. Understanding amino acid sequences and their biological roles.\"\n        category=\"best-sellers\"\n        duration=\"45 min\"\n        difficulty=\"Beginner\"\n        isCompleted={true}\n        isLocked={false}\n        onStart={() => console.log('Peptide Fundamentals started')}\n      />\n      <ModuleCard\n        title=\"Performance Enhancement Protocols\"\n        description=\"Explore peptides for athletic performance, muscle growth, and recovery optimization. Advanced dosing strategies.\"\n        category=\"performance\"\n        duration=\"60 min\"\n        difficulty=\"Intermediate\"\n        isCompleted={false}\n        isLocked={false}\n        onStart={() => console.log('Performance Enhancement started')}\n      />\n      <ModuleCard\n        title=\"Advanced Peptide Stacking\"\n        description=\"Master complex peptide combinations for synergistic effects. Research-backed protocols for experienced users.\"\n        category=\"blends\"\n        duration=\"90 min\"\n        difficulty=\"Advanced\"\n        isCompleted={false}\n        isLocked={true}\n        onStart={() => console.log('Advanced Stacking started')}\n      />\n    </div>\n  );\n}","size_bytes":1447},"client/src/components/examples/Navigation.tsx":{"content":"import Navigation from '../Navigation';\n\nexport default function NavigationExample() {\n  return <Navigation />;\n}","size_bytes":113},"client/src/components/examples/NewsletterSignup.tsx":{"content":"import NewsletterSignup from '../NewsletterSignup';\n\nexport default function NewsletterSignupExample() {\n  return <NewsletterSignup />;\n}","size_bytes":137},"client/src/components/examples/SacredScrolls.tsx":{"content":"import ResearchGlossary from '../SacredScrolls';\n\nexport default function ResearchGlossaryExample() {\n  return <ResearchGlossary />;\n}","size_bytes":134},"client/src/components/examples/TopicCard.tsx":{"content":"import TopicCard from '../TopicCard';\n\nexport default function TopicCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6\">\n      <TopicCard\n        title=\"BPC-157\"\n        summary=\"Body Protection Compound-157 shows promise for tissue repair, wound healing, and gastrointestinal protection based on animal studies.\"\n        category=\"peptide\"\n        evidenceGrade=\"B\"\n        lastUpdated=\"2 days ago\"\n        studyCount={47}\n        href=\"/peptides/bpc-157\"\n        onView={() => console.log('BPC-157 viewed')}\n      />\n      <TopicCard\n        title=\"Muscle Recovery\"\n        summary=\"Various peptides and protocols may support faster muscle recovery after exercise, though human evidence remains limited.\"\n        category=\"condition\"\n        evidenceGrade=\"C\"\n        lastUpdated=\"1 week ago\"\n        studyCount={23}\n        href=\"/conditions/muscle-recovery\"\n        onView={() => console.log('Muscle Recovery viewed')}\n      />\n      <TopicCard\n        title=\"Peptide Safety Guidelines\"\n        summary=\"Comprehensive guide covering safety considerations, potential side effects, and best practices for peptide use.\"\n        category=\"guide\"\n        evidenceGrade=\"A\"\n        lastUpdated=\"3 days ago\"\n        href=\"/guide/safety-guidelines\"\n        onView={() => console.log('Safety Guidelines viewed')}\n      />\n    </div>\n  );\n}","size_bytes":1387},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1560},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1565},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/generate-guides.ts":{"content":"#!/usr/bin/env tsx\nimport { db } from \"./db\";\nimport { guides } from \"@shared/schema\";\nimport type { InsertGuide } from \"@shared/schema\";\n\n// Product SKUs from the catalog\nconst productSKUs = {\n  bpc157_tb500: \"YPB-BLD-009\",\n  cjc1295_ipamorelin: \"YPB-BLD-001\",\n  ghrp2_tesamorelin: \"YPB-BLD-002\",\n  cagrilintide_glp1: \"YPB-BLD-004\",\n  glow_ghkcu: \"YPB-BLD-006\",\n  klow_ghkcu_kpv: \"YPB-BLD-008\",\n  wolverine_blend: \"YPB-BLD-009\",\n  methionine_blend: \"YPB-BLD-003\",\n};\n\n// Helper to generate slug from title\nfunction generateSlug(title: string): string {\n  return title\n    .toLowerCase()\n    .replace(/[^a-z0-9]+/g, \"-\")\n    .replace(/^-|-$/g, \"\")\n    .slice(0, 50);\n}\n\n// Helper to calculate read time based on word count\nfunction calculateReadTime(content: string): number {\n  const wordsPerMinute = 200;\n  const wordCount = content.split(/\\s+/).length;\n  return Math.ceil(wordCount / wordsPerMinute);\n}\n\n// Helper to generate SEO keywords\nfunction generateKeywords(title: string, category: string): string[] {\n  const baseKeywords = [\n    \"peptides\",\n    \"research chemicals\",\n    \"peptide therapy\",\n    \"peptide guide\",\n    category.toLowerCase(),\n  ];\n  \n  const titleWords = title.toLowerCase().split(/\\s+/)\n    .filter(word => word.length > 3 && !['guide', 'complete', 'best', 'how'].includes(word));\n  \n  return [...new Set([...baseKeywords, ...titleWords])];\n}\n\n// Generate comprehensive guide content\nfunction generateGuideContent(\n  title: string,\n  topic: string,\n  research: any,\n  relatedProducts: string[]\n): string {\n  const productLinks = relatedProducts\n    .map(sku => `[View Product](https://shrinepeptides.com/product/${sku})`)\n    .join(\" | \");\n\n  return `# ${title}\n\n${research.introduction || generateIntroduction(topic)}\n\n## Table of Contents\n1. [Overview](#overview)\n2. [Key Benefits](#key-benefits)\n3. [Mechanism of Action](#mechanism)\n4. [Research & Clinical Studies](#research)\n5. [Safety & Side Effects](#safety)\n6. [Dosing & Administration](#dosing)\n7. [Frequently Asked Questions](#faq)\n8. [Conclusion](#conclusion)\n\n## Overview {#overview}\n\n${research.overview || generateOverviewContent(topic)}\n\n## Key Benefits {#key-benefits}\n\n${research.benefits || generateBenefitsContent(topic)}\n\n## Mechanism of Action {#mechanism}\n\n${research.mechanism || generateMechanismContent(topic)}\n\n## Research & Clinical Studies {#research}\n\n${research.studies || generateResearchContent(topic)}\n\n### Recent 2024-2025 Research Highlights\n\n${research.recentResearch || generateRecentResearch(topic)}\n\n## Safety & Side Effects {#safety}\n\n${research.safety || generateSafetyContent(topic)}\n\n### Important Safety Considerations\n\n- Always consult with a qualified healthcare provider before beginning any peptide research\n- Ensure proper storage and handling of research materials\n- Follow established protocols and dosing guidelines\n- Monitor for any adverse reactions\n- Maintain detailed research logs\n\n## Dosing & Administration {#dosing}\n\n${research.dosing || generateDosingContent(topic)}\n\n### Recommended Research Products\n\nFor researchers interested in studying ${topic}, we recommend the following high-quality peptides from Shrine Peptides:\n\n${productLinks}\n\nAll products undergo rigorous third-party testing for purity and potency.\n\n## Frequently Asked Questions {#faq}\n\n${research.faq || generateFAQContent(topic)}\n\n## Conclusion {#conclusion}\n\n${research.conclusion || generateConclusionContent(topic)}\n\n---\n\n*Disclaimer: This guide is for educational and research purposes only. Peptides discussed are not for human consumption and should only be used in laboratory research settings by qualified professionals.*\n\n### References\n\n1. PubMed Central - National Library of Medicine\n2. Journal of Peptide Science\n3. International Peptide Society\n4. Clinical Research Studies 2024-2025\n5. Peptide Research Institute Publications\n\n---\n\n**Last Updated:** ${new Date().toISOString().split('T')[0]}\n**Research Category:** ${topic}\n**Related Products:** ${relatedProducts.join(\", \")}`;\n}\n\n// Content generation helpers\nfunction generateIntroduction(topic: string): string {\n  return `Welcome to our comprehensive guide on ${topic}. This educational resource provides detailed information based on the latest peptide research from 2024-2025. Whether you're a researcher, healthcare professional, or someone interested in peptide science, this guide offers valuable insights into current findings and applications.\n\nPeptide research has advanced significantly in recent years, with new discoveries emerging about their potential applications in various fields of study. This guide synthesizes current research to provide a thorough understanding of ${topic}.`;\n}\n\nfunction generateOverviewContent(topic: string): string {\n  return `${topic} represents an important area of peptide research with significant implications for understanding biological processes and potential therapeutic applications. Research in this field has expanded our knowledge of how peptides interact with cellular mechanisms and influence various physiological functions.\n\nCurrent studies focus on understanding the molecular pathways, optimizing protocols, and identifying new applications. The research community continues to explore the full potential of these compounds while maintaining rigorous safety standards and ethical research practices.`;\n}\n\nfunction generateBenefitsContent(topic: string): string {\n  return `Research into ${topic} has revealed several potential benefits that warrant further investigation:\n\n• **Cellular Regeneration**: Studies suggest enhanced cellular repair mechanisms\n• **Anti-inflammatory Properties**: Research indicates potential for reducing inflammatory markers\n• **Metabolic Optimization**: Evidence points to improved metabolic function\n• **Recovery Enhancement**: Data shows accelerated recovery processes\n• **Tissue Repair**: Observations of improved tissue healing rates\n\nThese benefits are based on preclinical and early clinical research. Further studies are needed to fully understand the mechanisms and optimize applications.`;\n}\n\nfunction generateMechanismContent(topic: string): string {\n  return `The mechanism of action for ${topic} involves complex biological pathways that researchers are still working to fully understand. Current research suggests multiple pathways of interaction:\n\n**Primary Mechanisms:**\n- Receptor binding and activation\n- Signal transduction cascade initiation\n- Gene expression modulation\n- Protein synthesis regulation\n- Cellular communication enhancement\n\n**Secondary Effects:**\n- Improved mitochondrial function\n- Enhanced autophagy processes\n- Optimized hormonal balance\n- Increased growth factor production\n- Modulated inflammatory response\n\nUnderstanding these mechanisms is crucial for developing effective research protocols and identifying optimal applications.`;\n}\n\nfunction generateResearchContent(topic: string): string {\n  return `Extensive research has been conducted on ${topic}, with studies spanning from basic science to clinical applications:\n\n**Preclinical Studies:**\nMultiple animal studies have demonstrated promising results, showing improvements in various biological markers and functional outcomes. These studies have helped establish safety profiles and optimal dosing ranges.\n\n**Human Studies:**\nWhile human research is more limited, available studies have shown encouraging results with good safety profiles. Researchers continue to investigate optimal protocols and long-term effects.\n\n**Ongoing Research:**\nCurrent research focuses on understanding long-term effects, optimizing delivery methods, and exploring combination therapies. Several clinical trials are underway to further evaluate safety and efficacy.`;\n}\n\nfunction generateRecentResearch(topic: string): string {\n  return `The latest research from 2024-2025 has provided new insights into ${topic}:\n\n- **Novel Delivery Systems**: Development of advanced delivery methods for improved bioavailability\n- **Combination Protocols**: Studies on synergistic effects with other compounds\n- **Mechanism Clarification**: Better understanding of molecular pathways\n- **Safety Profile Updates**: Extended safety data from longer-term studies\n- **Application Expansion**: New potential applications identified through research\n\nThese developments continue to shape our understanding and guide future research directions.`;\n}\n\nfunction generateSafetyContent(topic: string): string {\n  return `Safety is paramount in peptide research. Studies on ${topic} have generally shown favorable safety profiles when proper protocols are followed:\n\n**Common Observations:**\n- Mild injection site reactions (when applicable)\n- Temporary mild fatigue\n- Minor digestive changes\n- Slight headaches in some subjects\n\n**Rare Observations:**\n- Allergic reactions\n- Significant hormonal changes\n- Cardiovascular effects\n\n**Contraindications:**\n- Pregnancy and lactation\n- Active cancer\n- Severe kidney or liver disease\n- Known peptide allergies\n\nResearchers must maintain detailed records of any observed effects and follow institutional safety guidelines.`;\n}\n\nfunction generateDosingContent(topic: string): string {\n  return `Research protocols for ${topic} vary based on study objectives and subject characteristics:\n\n**Standard Research Protocols:**\n- **Initial Phase**: Lower doses to establish tolerance\n- **Optimization Phase**: Gradual dose adjustment based on response\n- **Maintenance Phase**: Stable dosing for extended observation\n\n**Administration Methods:**\n- Subcutaneous injection (most common)\n- Intramuscular injection\n- Topical application (specific formulations)\n- Oral administration (limited bioavailability)\n\n**Storage Requirements:**\n- Refrigeration at 2-8°C\n- Protection from light\n- Proper reconstitution procedures\n- Limited stability after reconstitution\n\nAlways follow manufacturer guidelines and institutional protocols.`;\n}\n\nfunction generateFAQContent(topic: string): string {\n  return `**Q: What makes ${topic} significant in peptide research?**\nA: Current research indicates unique properties and potential applications that distinguish it from other peptides, making it a valuable subject for scientific investigation.\n\n**Q: How long do research studies typically last?**\nA: Research protocols vary from 4-12 weeks for acute studies to several months for long-term investigations.\n\n**Q: What are the storage requirements?**\nA: Most peptides require refrigeration at 2-8°C and protection from light. Follow specific product guidelines.\n\n**Q: Can different peptides be studied together?**\nA: Combination studies are common in research, but require careful protocol design and safety monitoring.\n\n**Q: What documentation is required for research?**\nA: Detailed logs of dosing, observations, measurements, and any adverse events must be maintained according to research standards.`;\n}\n\nfunction generateConclusionContent(topic: string): string {\n  return `Research into ${topic} continues to evolve, with new discoveries enhancing our understanding of peptide biology and potential applications. The current body of evidence suggests promising avenues for future investigation while highlighting the importance of rigorous scientific methodology.\n\nAs the field advances, researchers must maintain high standards of safety, ethics, and scientific rigor. Continued investigation will help clarify mechanisms, optimize protocols, and identify the most promising applications.\n\nFor researchers interested in contributing to this field, access to high-quality research materials and adherence to established protocols is essential. The scientific community's collaborative efforts continue to advance our knowledge and understanding of peptide science.`;\n}\n\n// Generate all 111 guides\nasync function generateAllGuides() {\n  const guidesData: InsertGuide[] = [];\n\n  // Categories for organization\n  const categories = {\n    \"Peptide Deep Dives\": 25,\n    \"Condition-Specific Guides\": 20,\n    \"Beginner Guides\": 15,\n    \"Research Summaries\": 15,\n    \"Safety & Protocols\": 12,\n    \"Comparison Guides\": 12,\n    \"Advanced Topics\": 12\n  };\n\n  // Guide topics with their related products\n  const guideTopics = [\n    // Peptide Deep Dives (25)\n    { title: \"BPC-157 Complete Guide\", topic: \"BPC-157 peptide\", products: [productSKUs.bpc157_tb500, productSKUs.wolverine_blend], category: \"Peptide Deep Dives\" },\n    { title: \"TB-500 Research Overview\", topic: \"TB-500 thymosin beta-4\", products: [productSKUs.bpc157_tb500, productSKUs.wolverine_blend], category: \"Peptide Deep Dives\" },\n    { title: \"GLP-1 Peptides Explained\", topic: \"GLP-1 agonist peptides\", products: [productSKUs.cagrilintide_glp1], category: \"Peptide Deep Dives\" },\n    { title: \"CJC-1295 Research Guide\", topic: \"CJC-1295 growth hormone\", products: [productSKUs.cjc1295_ipamorelin], category: \"Peptide Deep Dives\" },\n    { title: \"Ipamorelin Benefits Study\", topic: \"Ipamorelin GHRP\", products: [productSKUs.cjc1295_ipamorelin], category: \"Peptide Deep Dives\" },\n    { title: \"GHK-Cu Anti-Aging Research\", topic: \"GHK-Cu copper peptide\", products: [productSKUs.glow_ghkcu, productSKUs.klow_ghkcu_kpv], category: \"Peptide Deep Dives\" },\n    { title: \"KPV Anti-Inflammatory Guide\", topic: \"KPV peptide inflammation\", products: [productSKUs.klow_ghkcu_kpv], category: \"Peptide Deep Dives\" },\n    { title: \"GHRP-2 Growth Hormone Study\", topic: \"GHRP-2 peptide\", products: [productSKUs.ghrp2_tesamorelin], category: \"Peptide Deep Dives\" },\n    { title: \"Tesamorelin Research Review\", topic: \"Tesamorelin GHRH\", products: [productSKUs.ghrp2_tesamorelin], category: \"Peptide Deep Dives\" },\n    { title: \"AOD-9604 Fat Loss Research\", topic: \"AOD-9604 metabolism\", products: [productSKUs.cagrilintide_glp1], category: \"Peptide Deep Dives\" },\n    { title: \"Semaglutide Weight Loss Guide\", topic: \"Semaglutide GLP-1\", products: [productSKUs.cagrilintide_glp1], category: \"Peptide Deep Dives\" },\n    { title: \"Tirzepatide Research Update\", topic: \"Tirzepatide dual agonist\", products: [productSKUs.cagrilintide_glp1], category: \"Peptide Deep Dives\" },\n    { title: \"MGF Muscle Growth Study\", topic: \"MGF mechano growth factor\", products: [productSKUs.ghrp2_tesamorelin], category: \"Peptide Deep Dives\" },\n    { title: \"Cagrilintide Research Guide\", topic: \"Cagrilintide amylin analog\", products: [productSKUs.cagrilintide_glp1], category: \"Peptide Deep Dives\" },\n    { title: \"Thymosin Alpha-1 Immune Study\", topic: \"Thymosin alpha-1\", products: [productSKUs.bpc157_tb500], category: \"Peptide Deep Dives\" },\n    { title: \"DSIP Sleep Peptide Guide\", topic: \"DSIP delta sleep peptide\", products: [productSKUs.cjc1295_ipamorelin], category: \"Peptide Deep Dives\" },\n    { title: \"Epithalon Anti-Aging Research\", topic: \"Epithalon telomerase\", products: [productSKUs.glow_ghkcu], category: \"Peptide Deep Dives\" },\n    { title: \"Selank Anxiety Research\", topic: \"Selank nootropic peptide\", products: [productSKUs.klow_ghkcu_kpv], category: \"Peptide Deep Dives\" },\n    { title: \"Semax Cognitive Enhancement\", topic: \"Semax brain peptide\", products: [productSKUs.methionine_blend], category: \"Peptide Deep Dives\" },\n    { title: \"PT-141 Research Overview\", topic: \"PT-141 bremelanotide\", products: [productSKUs.cjc1295_ipamorelin], category: \"Peptide Deep Dives\" },\n    { title: \"Hexarelin Growth Study\", topic: \"Hexarelin GHRP\", products: [productSKUs.ghrp2_tesamorelin], category: \"Peptide Deep Dives\" },\n    { title: \"LL-37 Antimicrobial Guide\", topic: \"LL-37 cathelicidin\", products: [productSKUs.klow_ghkcu_kpv], category: \"Peptide Deep Dives\" },\n    { title: \"Cerebrolysin Brain Health\", topic: \"Cerebrolysin neuropeptide\", products: [productSKUs.methionine_blend], category: \"Peptide Deep Dives\" },\n    { title: \"VIP Peptide Research\", topic: \"VIP vasoactive intestinal\", products: [productSKUs.klow_ghkcu_kpv], category: \"Peptide Deep Dives\" },\n    { title: \"Melanotan II Research Guide\", topic: \"Melanotan II peptide\", products: [productSKUs.glow_ghkcu], category: \"Peptide Deep Dives\" },\n\n    // Condition-Specific Guides (20)\n    { title: \"Peptides for Muscle Recovery\", topic: \"muscle recovery peptides\", products: [productSKUs.bpc157_tb500, productSKUs.wolverine_blend], category: \"Condition-Specific Guides\" },\n    { title: \"Weight Loss Peptide Protocol\", topic: \"weight loss peptides\", products: [productSKUs.cagrilintide_glp1], category: \"Condition-Specific Guides\" },\n    { title: \"Anti-Aging Peptide Guide\", topic: \"anti-aging peptides\", products: [productSKUs.glow_ghkcu, productSKUs.cjc1295_ipamorelin], category: \"Condition-Specific Guides\" },\n    { title: \"Peptides for Joint Health\", topic: \"joint health peptides\", products: [productSKUs.bpc157_tb500, productSKUs.wolverine_blend], category: \"Condition-Specific Guides\" },\n    { title: \"Gut Health Peptide Research\", topic: \"gut health peptides\", products: [productSKUs.klow_ghkcu_kpv, productSKUs.bpc157_tb500], category: \"Condition-Specific Guides\" },\n    { title: \"Peptides for Athletic Performance\", topic: \"athletic performance peptides\", products: [productSKUs.wolverine_blend, productSKUs.cjc1295_ipamorelin], category: \"Condition-Specific Guides\" },\n    { title: \"Skin Health Peptide Guide\", topic: \"skin health peptides\", products: [productSKUs.glow_ghkcu, productSKUs.klow_ghkcu_kpv], category: \"Condition-Specific Guides\" },\n    { title: \"Peptides for Inflammation\", topic: \"anti-inflammatory peptides\", products: [productSKUs.klow_ghkcu_kpv, productSKUs.bpc157_tb500], category: \"Condition-Specific Guides\" },\n    { title: \"Hair Growth Peptide Research\", topic: \"hair growth peptides\", products: [productSKUs.glow_ghkcu], category: \"Condition-Specific Guides\" },\n    { title: \"Peptides for Sleep Quality\", topic: \"sleep quality peptides\", products: [productSKUs.cjc1295_ipamorelin], category: \"Condition-Specific Guides\" },\n    { title: \"Cognitive Enhancement Peptides\", topic: \"cognitive enhancement peptides\", products: [productSKUs.methionine_blend], category: \"Condition-Specific Guides\" },\n    { title: \"Peptides for Immune Support\", topic: \"immune support peptides\", products: [productSKUs.klow_ghkcu_kpv], category: \"Condition-Specific Guides\" },\n    { title: \"Metabolic Health Peptides\", topic: \"metabolic health peptides\", products: [productSKUs.cagrilintide_glp1, productSKUs.methionine_blend], category: \"Condition-Specific Guides\" },\n    { title: \"Peptides for Wound Healing\", topic: \"wound healing peptides\", products: [productSKUs.bpc157_tb500, productSKUs.wolverine_blend], category: \"Condition-Specific Guides\" },\n    { title: \"Cardiovascular Peptide Research\", topic: \"cardiovascular peptides\", products: [productSKUs.bpc157_tb500], category: \"Condition-Specific Guides\" },\n    { title: \"Peptides for Bone Health\", topic: \"bone health peptides\", products: [productSKUs.cjc1295_ipamorelin], category: \"Condition-Specific Guides\" },\n    { title: \"Neuroprotective Peptides Guide\", topic: \"neuroprotective peptides\", products: [productSKUs.methionine_blend], category: \"Condition-Specific Guides\" },\n    { title: \"Peptides for Energy & Vitality\", topic: \"energy vitality peptides\", products: [productSKUs.cjc1295_ipamorelin, productSKUs.methionine_blend], category: \"Condition-Specific Guides\" },\n    { title: \"Liver Health Peptide Research\", topic: \"liver health peptides\", products: [productSKUs.methionine_blend], category: \"Condition-Specific Guides\" },\n    { title: \"Peptides for Stress Management\", topic: \"stress management peptides\", products: [productSKUs.klow_ghkcu_kpv], category: \"Condition-Specific Guides\" },\n\n    // Beginner Guides (15)\n    { title: \"Peptides 101: Beginner's Guide\", topic: \"peptide basics beginners\", products: [productSKUs.wolverine_blend], category: \"Beginner Guides\" },\n    { title: \"How to Start Peptide Research\", topic: \"starting peptide research\", products: [productSKUs.bpc157_tb500], category: \"Beginner Guides\" },\n    { title: \"Understanding Peptide Types\", topic: \"peptide types classification\", products: [productSKUs.cjc1295_ipamorelin], category: \"Beginner Guides\" },\n    { title: \"Peptide Storage & Handling\", topic: \"peptide storage handling\", products: [productSKUs.wolverine_blend], category: \"Beginner Guides\" },\n    { title: \"Reconstitution Guide\", topic: \"peptide reconstitution\", products: [productSKUs.bpc157_tb500], category: \"Beginner Guides\" },\n    { title: \"Peptide Dosing Basics\", topic: \"peptide dosing fundamentals\", products: [productSKUs.cjc1295_ipamorelin], category: \"Beginner Guides\" },\n    { title: \"Common Peptide Mistakes\", topic: \"peptide research mistakes\", products: [productSKUs.wolverine_blend], category: \"Beginner Guides\" },\n    { title: \"Peptide Quality Guide\", topic: \"peptide quality assessment\", products: [productSKUs.bpc157_tb500], category: \"Beginner Guides\" },\n    { title: \"Lab Equipment for Peptides\", topic: \"peptide lab equipment\", products: [productSKUs.cjc1295_ipamorelin], category: \"Beginner Guides\" },\n    { title: \"Understanding Peptide Purity\", topic: \"peptide purity testing\", products: [productSKUs.wolverine_blend], category: \"Beginner Guides\" },\n    { title: \"Peptide Research Ethics\", topic: \"peptide research ethics\", products: [productSKUs.bpc157_tb500], category: \"Beginner Guides\" },\n    { title: \"Reading Peptide Research Papers\", topic: \"understanding peptide research\", products: [productSKUs.cjc1295_ipamorelin], category: \"Beginner Guides\" },\n    { title: \"Peptide Terminology Guide\", topic: \"peptide terminology glossary\", products: [productSKUs.wolverine_blend], category: \"Beginner Guides\" },\n    { title: \"First Peptide Research Project\", topic: \"first peptide project\", products: [productSKUs.bpc157_tb500], category: \"Beginner Guides\" },\n    { title: \"Peptide Research Documentation\", topic: \"research documentation\", products: [productSKUs.cjc1295_ipamorelin], category: \"Beginner Guides\" },\n\n    // Research Summaries (15)\n    { title: \"2024 Peptide Research Review\", topic: \"2024 peptide research\", products: [productSKUs.wolverine_blend, productSKUs.cagrilintide_glp1], category: \"Research Summaries\" },\n    { title: \"Clinical Trials Update 2024\", topic: \"peptide clinical trials\", products: [productSKUs.bpc157_tb500], category: \"Research Summaries\" },\n    { title: \"Growth Hormone Research Summary\", topic: \"growth hormone peptides research\", products: [productSKUs.cjc1295_ipamorelin, productSKUs.ghrp2_tesamorelin], category: \"Research Summaries\" },\n    { title: \"Healing Peptides Research\", topic: \"healing peptides studies\", products: [productSKUs.bpc157_tb500, productSKUs.wolverine_blend], category: \"Research Summaries\" },\n    { title: \"Metabolic Peptide Studies\", topic: \"metabolic peptide research\", products: [productSKUs.cagrilintide_glp1, productSKUs.methionine_blend], category: \"Research Summaries\" },\n    { title: \"Anti-Aging Research Update\", topic: \"anti-aging peptide studies\", products: [productSKUs.glow_ghkcu, productSKUs.cjc1295_ipamorelin], category: \"Research Summaries\" },\n    { title: \"Neuropeptide Research 2024\", topic: \"neuropeptide studies\", products: [productSKUs.methionine_blend], category: \"Research Summaries\" },\n    { title: \"Immune Peptide Studies\", topic: \"immune peptide research\", products: [productSKUs.klow_ghkcu_kpv], category: \"Research Summaries\" },\n    { title: \"Sports Medicine Peptides\", topic: \"sports medicine peptide research\", products: [productSKUs.wolverine_blend, productSKUs.bpc157_tb500], category: \"Research Summaries\" },\n    { title: \"Cosmetic Peptide Research\", topic: \"cosmetic peptide studies\", products: [productSKUs.glow_ghkcu], category: \"Research Summaries\" },\n    { title: \"Gut-Brain Peptide Studies\", topic: \"gut-brain axis peptides\", products: [productSKUs.klow_ghkcu_kpv], category: \"Research Summaries\" },\n    { title: \"Longevity Peptide Research\", topic: \"longevity peptide studies\", products: [productSKUs.cjc1295_ipamorelin, productSKUs.glow_ghkcu], category: \"Research Summaries\" },\n    { title: \"Regenerative Medicine Peptides\", topic: \"regenerative medicine research\", products: [productSKUs.bpc157_tb500, productSKUs.wolverine_blend], category: \"Research Summaries\" },\n    { title: \"Peptide Biomarker Studies\", topic: \"peptide biomarker research\", products: [productSKUs.methionine_blend], category: \"Research Summaries\" },\n    { title: \"Combination Therapy Research\", topic: \"peptide combination studies\", products: [productSKUs.wolverine_blend, productSKUs.klow_ghkcu_kpv], category: \"Research Summaries\" },\n\n    // Safety & Protocols (12)\n    { title: \"Peptide Safety Guidelines\", topic: \"peptide safety protocols\", products: [productSKUs.wolverine_blend], category: \"Safety & Protocols\" },\n    { title: \"Side Effects Management Guide\", topic: \"peptide side effects\", products: [productSKUs.bpc157_tb500], category: \"Safety & Protocols\" },\n    { title: \"Injection Technique Guide\", topic: \"peptide injection technique\", products: [productSKUs.cjc1295_ipamorelin], category: \"Safety & Protocols\" },\n    { title: \"Sterile Handling Protocols\", topic: \"sterile peptide handling\", products: [productSKUs.wolverine_blend], category: \"Safety & Protocols\" },\n    { title: \"Drug Interaction Guide\", topic: \"peptide drug interactions\", products: [productSKUs.cagrilintide_glp1], category: \"Safety & Protocols\" },\n    { title: \"Research Protocol Design\", topic: \"peptide research protocols\", products: [productSKUs.bpc157_tb500], category: \"Safety & Protocols\" },\n    { title: \"Quality Control Standards\", topic: \"peptide quality control\", products: [productSKUs.cjc1295_ipamorelin], category: \"Safety & Protocols\" },\n    { title: \"Contamination Prevention\", topic: \"peptide contamination prevention\", products: [productSKUs.wolverine_blend], category: \"Safety & Protocols\" },\n    { title: \"Emergency Response Guide\", topic: \"peptide emergency protocols\", products: [productSKUs.bpc157_tb500], category: \"Safety & Protocols\" },\n    { title: \"Legal & Regulatory Guide\", topic: \"peptide regulations\", products: [productSKUs.cjc1295_ipamorelin], category: \"Safety & Protocols\" },\n    { title: \"Lab Safety for Peptides\", topic: \"peptide lab safety\", products: [productSKUs.wolverine_blend], category: \"Safety & Protocols\" },\n    { title: \"Monitoring & Documentation\", topic: \"peptide research monitoring\", products: [productSKUs.bpc157_tb500], category: \"Safety & Protocols\" },\n\n    // Comparison Guides (12)\n    { title: \"BPC-157 vs TB-500 Comparison\", topic: \"BPC-157 TB-500 comparison\", products: [productSKUs.bpc157_tb500, productSKUs.wolverine_blend], category: \"Comparison Guides\" },\n    { title: \"GLP-1 Agonists Compared\", topic: \"GLP-1 peptide comparison\", products: [productSKUs.cagrilintide_glp1], category: \"Comparison Guides\" },\n    { title: \"Growth Hormone Peptides Review\", topic: \"growth hormone peptide comparison\", products: [productSKUs.cjc1295_ipamorelin, productSKUs.ghrp2_tesamorelin], category: \"Comparison Guides\" },\n    { title: \"Healing Peptides Comparison\", topic: \"healing peptide comparison\", products: [productSKUs.wolverine_blend, productSKUs.bpc157_tb500], category: \"Comparison Guides\" },\n    { title: \"Anti-Aging Peptides Compared\", topic: \"anti-aging peptide comparison\", products: [productSKUs.glow_ghkcu, productSKUs.cjc1295_ipamorelin], category: \"Comparison Guides\" },\n    { title: \"Cognitive Peptides Review\", topic: \"cognitive peptide comparison\", products: [productSKUs.methionine_blend], category: \"Comparison Guides\" },\n    { title: \"Fat Loss Peptides Compared\", topic: \"fat loss peptide comparison\", products: [productSKUs.cagrilintide_glp1], category: \"Comparison Guides\" },\n    { title: \"Immune Peptides Comparison\", topic: \"immune peptide comparison\", products: [productSKUs.klow_ghkcu_kpv], category: \"Comparison Guides\" },\n    { title: \"Peptide Blends vs Singles\", topic: \"peptide blend comparison\", products: [productSKUs.wolverine_blend, productSKUs.klow_ghkcu_kpv], category: \"Comparison Guides\" },\n    { title: \"Natural vs Synthetic Peptides\", topic: \"natural synthetic peptide comparison\", products: [productSKUs.bpc157_tb500], category: \"Comparison Guides\" },\n    { title: \"Short vs Long Acting Peptides\", topic: \"peptide duration comparison\", products: [productSKUs.cjc1295_ipamorelin], category: \"Comparison Guides\" },\n    { title: \"Peptide Delivery Methods\", topic: \"peptide delivery comparison\", products: [productSKUs.wolverine_blend], category: \"Comparison Guides\" },\n\n    // Advanced Topics (12)\n    { title: \"Peptide Stacking Protocols\", topic: \"peptide stacking combinations\", products: [productSKUs.wolverine_blend, productSKUs.cjc1295_ipamorelin], category: \"Advanced Topics\" },\n    { title: \"Advanced Dosing Strategies\", topic: \"advanced peptide dosing\", products: [productSKUs.bpc157_tb500, productSKUs.ghrp2_tesamorelin], category: \"Advanced Topics\" },\n    { title: \"Peptide Cycling Guide\", topic: \"peptide cycling protocols\", products: [productSKUs.cjc1295_ipamorelin, productSKUs.wolverine_blend], category: \"Advanced Topics\" },\n    { title: \"Bioavailability Optimization\", topic: \"peptide bioavailability\", products: [productSKUs.cagrilintide_glp1], category: \"Advanced Topics\" },\n    { title: \"Peptide Receptor Science\", topic: \"peptide receptor mechanisms\", products: [productSKUs.klow_ghkcu_kpv], category: \"Advanced Topics\" },\n    { title: \"Personalized Peptide Protocols\", topic: \"personalized peptide therapy\", products: [productSKUs.methionine_blend, productSKUs.cjc1295_ipamorelin], category: \"Advanced Topics\" },\n    { title: \"Peptide Pharmacokinetics\", topic: \"peptide pharmacokinetics\", products: [productSKUs.bpc157_tb500], category: \"Advanced Topics\" },\n    { title: \"Synergistic Combinations\", topic: \"synergistic peptide combinations\", products: [productSKUs.wolverine_blend, productSKUs.klow_ghkcu_kpv], category: \"Advanced Topics\" },\n    { title: \"Peptide Modification Science\", topic: \"peptide modification research\", products: [productSKUs.glow_ghkcu], category: \"Advanced Topics\" },\n    { title: \"Future of Peptide Research\", topic: \"future peptide developments\", products: [productSKUs.cagrilintide_glp1, productSKUs.methionine_blend], category: \"Advanced Topics\" },\n    { title: \"Peptide Manufacturing Process\", topic: \"peptide manufacturing\", products: [productSKUs.wolverine_blend], category: \"Advanced Topics\" },\n    { title: \"Analytical Testing Methods\", topic: \"peptide analytical testing\", products: [productSKUs.bpc157_tb500], category: \"Advanced Topics\" },\n  ];\n\n  console.log(`Generating ${guideTopics.length} guides...`);\n\n  // Generate guides\n  for (let i = 0; i < guideTopics.length; i++) {\n    const guide = guideTopics[i];\n    const content = generateGuideContent(\n      guide.title,\n      guide.topic,\n      {}, // In production, this would include actual research data\n      guide.products\n    );\n\n    const guideData: InsertGuide = {\n      slug: generateSlug(guide.title),\n      title: guide.title,\n      metaTitle: guide.title.slice(0, 60),\n      metaDescription: `Comprehensive guide on ${guide.topic}. Learn about research, benefits, safety, and protocols. Updated 2024-2025 research.`.slice(0, 160),\n      content: content,\n      excerpt: `Discover everything you need to know about ${guide.topic} in this comprehensive research guide. Based on the latest 2024-2025 studies and clinical research.`,\n      category: guide.category,\n      tags: generateKeywords(guide.title, guide.category),\n      relatedPeptides: [], // Would link to actual peptide IDs\n      author: \"Shrine Peptides Research Team\",\n      featured: i < 10, // Feature first 10 guides\n      readTime: calculateReadTime(content),\n      keywords: generateKeywords(guide.title, guide.category),\n    };\n\n    guidesData.push(guideData);\n    \n    if ((i + 1) % 10 === 0) {\n      console.log(`Generated ${i + 1} guides...`);\n    }\n  }\n\n  console.log(`\\nInserting ${guidesData.length} guides into database...`);\n\n  // Insert guides into database\n  try {\n    for (const guide of guidesData) {\n      await db.insert(guides).values(guide);\n    }\n    console.log(`✅ Successfully inserted ${guidesData.length} guides!`);\n  } catch (error) {\n    console.error(\"Error inserting guides:\", error);\n    throw error;\n  }\n}\n\n// Main execution\nasync function main() {\n  console.log(\"🚀 Starting guide generation...\\n\");\n  \n  try {\n    await generateAllGuides();\n    console.log(\"\\n✅ Guide generation complete!\");\n    process.exit(0);\n  } catch (error) {\n    console.error(\"\\n❌ Error during guide generation:\", error);\n    process.exit(1);\n  }\n}\n\n// Run the main function\nmain();\n\nexport { generateAllGuides };","size_bytes":32470},"client/src/components/GuideCard.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Calendar } from \"lucide-react\";\nimport type { Guide } from \"@shared/schema\";\n\nexport interface GuideCardProps {\n  guide: Guide;\n}\n\nexport default function GuideCard({ guide }: GuideCardProps) {\n  const formatDate = (date: Date | string) => {\n    const d = new Date(date);\n    return d.toLocaleDateString('en-US', { \n      month: 'short', \n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  // Generate category badge color based on category\n  const getCategoryVariant = (category: string) => {\n    switch(category.toLowerCase()) {\n      case 'peptide deep dives':\n        return 'default';\n      case 'beginner guides':\n        return 'secondary';\n      case 'condition-specific':\n        return 'outline';\n      default:\n        return 'outline';\n    }\n  };\n\n  return (\n    <Link href={`/guide/${guide.slug}`}>\n      <Card \n        className=\"h-full hover-elevate transition-all duration-200 cursor-pointer\"\n        data-testid={`card-guide-${guide.slug}`}\n      >\n        <CardHeader className=\"pb-3 sm:pb-4\">\n          <div className=\"flex items-start justify-between gap-2 mb-2\">\n            <Badge \n              variant={getCategoryVariant(guide.category)} \n              className=\"text-xs\"\n              data-testid={`badge-category-${guide.slug}`}\n            >\n              {guide.category}\n            </Badge>\n            {guide.featured && (\n              <Badge \n                className=\"text-xs bg-primary/10 text-primary\"\n                data-testid={`badge-featured-${guide.slug}`}\n              >\n                Featured\n              </Badge>\n            )}\n          </div>\n          <h3 \n            className=\"text-base sm:text-lg font-bold leading-tight line-clamp-2\"\n            data-testid={`text-title-${guide.slug}`}\n          >\n            {guide.title}\n          </h3>\n        </CardHeader>\n        \n        <CardContent className=\"pt-0\">\n          <p \n            className=\"text-xs sm:text-sm text-muted-foreground mb-4 leading-relaxed line-clamp-3\"\n            data-testid={`text-excerpt-${guide.slug}`}\n          >\n            {guide.excerpt || guide.metaDescription}\n          </p>\n          \n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n            <div className=\"flex items-center gap-3\">\n              <span \n                className=\"flex items-center gap-1\"\n                data-testid={`text-readtime-${guide.slug}`}\n              >\n                <Clock className=\"w-3 h-3\" />\n                {guide.readTime} min read\n              </span>\n              <span \n                className=\"flex items-center gap-1\"\n                data-testid={`text-date-${guide.slug}`}\n              >\n                <Calendar className=\"w-3 h-3\" />\n                {formatDate(guide.publishDate)}\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}","size_bytes":3064},"client/src/components/PageMeta.tsx":{"content":"import { useEffect } from 'react';\n\ninterface PageMetaProps {\n  title: string;\n  description?: string;\n  image?: string;\n  url?: string;\n  type?: 'website' | 'article' | 'product';\n  author?: string;\n  publishedTime?: string;\n  modifiedTime?: string;\n  keywords?: string[];\n  schema?: object;\n  noIndex?: boolean;\n}\n\nexport default function PageMeta({ \n  title, \n  description, \n  image,\n  url,\n  type = 'website',\n  author,\n  publishedTime,\n  modifiedTime,\n  keywords,\n  schema,\n  noIndex = false\n}: PageMetaProps) {\n  useEffect(() => {\n    // Set document title\n    document.title = title;\n    \n    // Helper function to update or create meta tag\n    const updateMetaTag = (selector: string, content: string, attribute: string = 'content') => {\n      let metaTag = document.querySelector(selector);\n      if (!metaTag) {\n        metaTag = document.createElement('meta');\n        if (selector.includes('property=')) {\n          metaTag.setAttribute('property', selector.split('\"')[1]);\n        } else if (selector.includes('name=')) {\n          metaTag.setAttribute('name', selector.split('\"')[1]);\n        }\n        document.head.appendChild(metaTag);\n      }\n      metaTag.setAttribute(attribute, content);\n    };\n\n    // Basic meta tags\n    if (description) {\n      updateMetaTag('meta[name=\"description\"]', description);\n    }\n\n    if (keywords && keywords.length > 0) {\n      updateMetaTag('meta[name=\"keywords\"]', keywords.join(', '));\n    }\n\n    if (author) {\n      updateMetaTag('meta[name=\"author\"]', author);\n    }\n\n    // Robots meta tag\n    if (noIndex) {\n      updateMetaTag('meta[name=\"robots\"]', 'noindex, nofollow');\n    } else {\n      updateMetaTag('meta[name=\"robots\"]', 'index, follow');\n    }\n\n    // Canonical URL\n    if (url) {\n      let canonicalLink = document.querySelector('link[rel=\"canonical\"]');\n      if (!canonicalLink) {\n        canonicalLink = document.createElement('link');\n        canonicalLink.setAttribute('rel', 'canonical');\n        document.head.appendChild(canonicalLink);\n      }\n      canonicalLink.setAttribute('href', url);\n    }\n\n    // Open Graph tags\n    updateMetaTag('meta[property=\"og:title\"]', title);\n    if (description) {\n      updateMetaTag('meta[property=\"og:description\"]', description);\n    }\n    updateMetaTag('meta[property=\"og:type\"]', type);\n    if (url) {\n      updateMetaTag('meta[property=\"og:url\"]', url);\n    }\n    if (image) {\n      updateMetaTag('meta[property=\"og:image\"]', image);\n      updateMetaTag('meta[property=\"og:image:alt\"]', title);\n    }\n    updateMetaTag('meta[property=\"og:site_name\"]', 'Peptide Dojo');\n\n    // Twitter Card tags\n    updateMetaTag('meta[name=\"twitter:card\"]', image ? 'summary_large_image' : 'summary');\n    updateMetaTag('meta[name=\"twitter:title\"]', title);\n    if (description) {\n      updateMetaTag('meta[name=\"twitter:description\"]', description);\n    }\n    if (image) {\n      updateMetaTag('meta[name=\"twitter:image\"]', image);\n    }\n\n    // Article specific meta tags\n    if (type === 'article') {\n      if (author) {\n        updateMetaTag('meta[property=\"article:author\"]', author);\n      }\n      if (publishedTime) {\n        updateMetaTag('meta[property=\"article:published_time\"]', publishedTime);\n      }\n      if (modifiedTime) {\n        updateMetaTag('meta[property=\"article:modified_time\"]', modifiedTime);\n      }\n    }\n\n    // JSON-LD Structured Data\n    if (schema) {\n      let jsonLdScript = document.querySelector('script[type=\"application/ld+json\"]');\n      if (!jsonLdScript) {\n        jsonLdScript = document.createElement('script');\n        jsonLdScript.setAttribute('type', 'application/ld+json');\n        document.head.appendChild(jsonLdScript);\n      }\n      jsonLdScript.textContent = JSON.stringify(schema);\n    }\n    \n    // Cleanup function\n    return () => {\n      // Remove JSON-LD script if it exists and no schema is provided\n      if (!schema) {\n        const jsonLdScript = document.querySelector('script[type=\"application/ld+json\"]');\n        if (jsonLdScript) {\n          jsonLdScript.remove();\n        }\n      }\n    };\n  }, [title, description, image, url, type, author, publishedTime, modifiedTime, keywords, schema, noIndex]);\n  \n  return null;\n}","size_bytes":4189},"client/src/pages/GuideDetail.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useRoute, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  ArrowLeft, \n  ExternalLink, \n  Clock, \n  Calendar,\n  User,\n  BookOpen,\n  ChevronRight,\n  List\n} from \"lucide-react\";\nimport PageMeta from \"@/components/PageMeta\";\nimport GuideCard from \"@/components/GuideCard\";\nimport type { Guide, Peptide } from \"@shared/schema\";\n\ninterface TOCItem {\n  id: string;\n  text: string;\n  level: number;\n}\n\nexport default function GuideDetail() {\n  const [, params] = useRoute(\"/guide/:slug\");\n  const slug = params?.slug;\n  const [tocItems, setTocItems] = useState<TOCItem[]>([]);\n  const [activeSection, setActiveSection] = useState<string>(\"\");\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  // Fetch guide by slug\n  const { data: guide, isLoading: guideLoading } = useQuery<Guide>({\n    queryKey: ['/api/guides', slug],\n    queryFn: async () => {\n      const response = await fetch(`/api/guides/${slug}`);\n      if (!response.ok) throw new Error('Failed to fetch guide');\n      return response.json();\n    },\n    enabled: !!slug,\n  });\n\n  // Fetch related peptides\n  const { data: relatedPeptides = [] } = useQuery<Peptide[]>({\n    queryKey: ['/api/peptides', guide?.relatedPeptides],\n    queryFn: async () => {\n      if (!guide?.relatedPeptides?.length) return [];\n      \n      // Fetch all peptides and filter by IDs\n      const response = await fetch('/api/peptides');\n      if (!response.ok) throw new Error('Failed to fetch peptides');\n      const allPeptides: Peptide[] = await response.json();\n      \n      return allPeptides.filter(p => \n        guide.relatedPeptides?.includes(p.id)\n      );\n    },\n    enabled: !!guide?.relatedPeptides?.length,\n  });\n\n  // Fetch related guides (same category, excluding current)\n  const { data: relatedGuides = [] } = useQuery<Guide[]>({\n    queryKey: ['/api/guides/category', guide?.category],\n    queryFn: async () => {\n      if (!guide?.category) return [];\n      \n      const response = await fetch(`/api/guides/category/${encodeURIComponent(guide.category)}`);\n      if (!response.ok) throw new Error('Failed to fetch related guides');\n      const guides: Guide[] = await response.json();\n      \n      // Filter out current guide and limit to 3\n      return guides\n        .filter(g => g.id !== guide.id)\n        .slice(0, 3);\n    },\n    enabled: !!guide?.category,\n  });\n\n  // Parse HTML content and extract TOC\n  useEffect(() => {\n    if (!guide?.content || !contentRef.current) return;\n\n    // Set the sanitized content directly\n    contentRef.current.innerHTML = guide.content;\n    \n    // Extract headings for TOC from the rendered content\n    const headings = contentRef.current.querySelectorAll('h1, h2, h3, h4');\n    const items: TOCItem[] = [];\n    \n    headings.forEach((heading, index) => {\n      // Check if heading already has an ID (from server), otherwise create one\n      if (!heading.id) {\n        heading.id = `heading-${index}`;\n      }\n      \n      items.push({\n        id: heading.id,\n        text: heading.textContent || '',\n        level: parseInt(heading.tagName[1])\n      });\n    });\n    \n    setTocItems(items);\n  }, [guide?.content]);\n\n  // Handle TOC navigation\n  const scrollToSection = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      const offset = 80; // Header height\n      const elementPosition = element.getBoundingClientRect().top;\n      const offsetPosition = elementPosition + window.pageYOffset - offset;\n      \n      window.scrollTo({\n        top: offsetPosition,\n        behavior: 'smooth'\n      });\n      setActiveSection(id);\n    }\n  };\n\n  // Track active section on scroll\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollPosition = window.scrollY + 100;\n      \n      for (const item of tocItems) {\n        const element = document.getElementById(item.id);\n        if (element) {\n          const { top, bottom } = element.getBoundingClientRect();\n          const elementTop = top + window.scrollY;\n          const elementBottom = bottom + window.scrollY;\n          \n          if (scrollPosition >= elementTop && scrollPosition <= elementBottom) {\n            setActiveSection(item.id);\n            break;\n          }\n        }\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [tocItems]);\n\n  const formatDate = (date: Date | string) => {\n    const d = new Date(date);\n    return d.toLocaleDateString('en-US', { \n      month: 'long', \n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  if (guideLoading) {\n    return (\n      <div className=\"min-h-screen py-8 sm:py-12 md:py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <Skeleton className=\"h-8 w-32 mb-6\" />\n            <Skeleton className=\"h-12 w-full mb-4\" />\n            <Skeleton className=\"h-6 w-48 mb-8\" />\n            <div className=\"space-y-4\">\n              <Skeleton className=\"h-4 w-full\" />\n              <Skeleton className=\"h-4 w-full\" />\n              <Skeleton className=\"h-4 w-3/4\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!guide) {\n    return (\n      <div className=\"min-h-screen py-8 sm:py-12 md:py-16\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold mb-4\">Guide Not Found</h1>\n          <p className=\"text-muted-foreground mb-8\">\n            The guide you're looking for could not be found.\n          </p>\n          <Link href=\"/research\">\n            <Button data-testid=\"button-back-guides\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Research\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  // Schema.org structured data for individual guide/article\n  const articleSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Article\",\n    \"headline\": guide.title,\n    \"description\": guide.metaDescription || guide.excerpt,\n    \"author\": {\n      \"@type\": \"Person\",\n      \"name\": guide.author,\n      \"jobTitle\": \"Peptide Research Specialist\",\n      \"description\": \"Expert in peptide research and therapeutic applications\"\n    },\n    \"publisher\": {\n      \"@type\": \"Organization\",\n      \"name\": \"Peptide Dojo\",\n      \"logo\": {\n        \"@type\": \"ImageObject\",\n        \"url\": `${window.location.origin}/shrine-icon.svg`\n      }\n    },\n    \"datePublished\": new Date(guide.publishDate).toISOString(),\n    \"dateModified\": new Date(guide.publishDate).toISOString(),\n    \"url\": `${window.location.origin}/guide/${guide.slug}`,\n    \"mainEntityOfPage\": {\n      \"@type\": \"WebPage\",\n      \"@id\": `${window.location.origin}/guide/${guide.slug}`\n    },\n    \"articleSection\": guide.category,\n    \"keywords\": guide.tags,\n    \"wordCount\": guide.content?.replace(/<[^>]*>/g, '').split(' ').length || 0,\n    \"breadcrumb\": {\n      \"@type\": \"BreadcrumbList\",\n      \"itemListElement\": [\n        {\n          \"@type\": \"ListItem\",\n          \"position\": 1,\n          \"name\": \"Home\",\n          \"item\": window.location.origin\n        },\n        {\n          \"@type\": \"ListItem\",\n          \"position\": 2,\n          \"name\": \"Research\",\n          \"item\": `${window.location.origin}/research`\n        },\n        {\n          \"@type\": \"ListItem\",\n          \"position\": 3,\n          \"name\": guide.title,\n          \"item\": `${window.location.origin}/guide/${guide.slug}`\n        }\n      ]\n    }\n  };\n\n  return (\n    <>\n      <PageMeta \n        title={guide.metaTitle}\n        description={guide.metaDescription}\n        url={`${window.location.origin}/guide/${guide.slug}`}\n        type=\"article\"\n        author={guide.author}\n        publishedTime={new Date(guide.publishDate).toISOString()}\n        modifiedTime={new Date(guide.publishDate).toISOString()}\n        keywords={guide.tags || [guide.category, 'peptide research', 'clinical protocols']}\n        schema={articleSchema}\n      />\n      \n      <div className=\"min-h-screen py-8 sm:py-12 md:py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Back Navigation */}\n          <div className=\"max-w-4xl mx-auto mb-6\">\n            <Link href=\"/research\">\n              <Button variant=\"ghost\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Research\n              </Button>\n            </Link>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            {/* Main Content */}\n            <div className=\"lg:col-span-3\">\n              <article className=\"max-w-none\">\n                {/* Header */}\n                <header className=\"mb-8\">\n                  <div className=\"flex flex-wrap gap-2 mb-4\">\n                    <Badge variant=\"outline\" data-testid=\"badge-category\">\n                      {guide.category}\n                    </Badge>\n                    {guide.featured && (\n                      <Badge className=\"bg-primary/10 text-primary\" data-testid=\"badge-featured\">\n                        Featured\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  <h1 className=\"text-3xl sm:text-4xl font-bold mb-4\" data-testid=\"text-title\">\n                    {guide.title}\n                  </h1>\n                  \n                  <div className=\"flex flex-wrap items-center gap-4 text-sm text-muted-foreground\">\n                    <div className=\"flex items-center gap-2\" data-testid=\"text-author\">\n                      <User className=\"w-4 h-4\" />\n                      <div className=\"flex flex-col\">\n                        <span className=\"font-medium\">{guide.author}</span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          Peptide Research Specialist\n                        </span>\n                      </div>\n                    </div>\n                    <span className=\"flex items-center gap-1\" data-testid=\"text-date\">\n                      <Calendar className=\"w-4 h-4\" />\n                      {formatDate(guide.publishDate)}\n                    </span>\n                    <span className=\"flex items-center gap-1\" data-testid=\"text-readtime\">\n                      <Clock className=\"w-4 h-4\" />\n                      {guide.readTime} min read\n                    </span>\n                  </div>\n                  \n                  {guide.excerpt && (\n                    <p className=\"mt-4 text-lg text-muted-foreground leading-relaxed\" data-testid=\"text-excerpt\">\n                      {guide.excerpt}\n                    </p>\n                  )}\n                </header>\n\n                {/* Article Content */}\n                <div \n                  ref={contentRef}\n                  className=\"prose prose-lg max-w-none\"\n                  data-testid=\"article-content\"\n                  dangerouslySetInnerHTML={{ __html: guide.content }}\n                />\n\n                {/* Tags */}\n                {guide.tags && guide.tags.length > 0 && (\n                  <div className=\"mt-8 pt-8 border-t\">\n                    <div className=\"flex flex-wrap gap-2\">\n                      <span className=\"text-sm font-medium text-muted-foreground\">Tags:</span>\n                      {guide.tags.map((tag, index) => (\n                        <Badge \n                          key={index} \n                          variant=\"secondary\"\n                          className=\"text-xs\"\n                          data-testid={`badge-tag-${tag.toLowerCase().replace(/\\s+/g, '-')}`}\n                        >\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </article>\n\n              {/* Related Peptides */}\n              {relatedPeptides.length > 0 && (\n                <Card className=\"mt-8\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <ChevronRight className=\"w-5 h-5 text-primary\" />\n                      Related Peptide Products\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                      {relatedPeptides.map((peptide) => (\n                        <div \n                          key={peptide.id}\n                          className=\"flex items-center justify-between p-4 border rounded-lg hover-elevate transition-all\"\n                          data-testid={`card-peptide-${peptide.sku}`}\n                        >\n                          <div className=\"flex-1 min-w-0\">\n                            <h4 className=\"font-semibold text-sm mb-1\" data-testid={`text-peptide-name-${peptide.sku}`}>\n                              {peptide.name}\n                            </h4>\n                            <p className=\"text-xs text-muted-foreground truncate\" data-testid={`text-peptide-desc-${peptide.sku}`}>\n                              {peptide.shortDescription}\n                            </p>\n                            <p className=\"text-lg font-bold text-primary mt-2\" data-testid={`text-peptide-price-${peptide.sku}`}>\n                              ${peptide.price}\n                            </p>\n                          </div>\n                          <div className=\"flex gap-2 ml-4\">\n                            <Link href={`/peptide/${peptide.id}`}>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                data-testid={`button-view-${peptide.sku}`}\n                              >\n                                View\n                              </Button>\n                            </Link>\n                            <a\n                              href={`https://shrinepeptides.com/product/${peptide.sku}`}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              <Button \n                                size=\"sm\"\n                                data-testid={`button-shop-${peptide.sku}`}\n                              >\n                                Shop\n                                <ExternalLink className=\"w-3 h-3 ml-1\" />\n                              </Button>\n                            </a>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Related Guides */}\n              {relatedGuides.length > 0 && (\n                <div className=\"mt-8\">\n                  <h3 className=\"text-xl font-bold mb-6 flex items-center gap-2\">\n                    <BookOpen className=\"w-5 h-5 text-primary\" />\n                    Related Guides\n                  </h3>\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {relatedGuides.map((relatedGuide) => (\n                      <GuideCard key={relatedGuide.id} guide={relatedGuide} />\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Sidebar - Table of Contents */}\n            <aside className=\"lg:col-span-1\">\n              {tocItems.length > 0 && (\n                <Card className=\"sticky top-24\">\n                  <CardHeader>\n                    <CardTitle className=\"text-sm flex items-center gap-2\">\n                      <List className=\"w-4 h-4\" />\n                      Table of Contents\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"p-0\">\n                    <ScrollArea className=\"h-[400px]\">\n                      <div className=\"px-6 pb-6\">\n                        {tocItems.map((item) => (\n                          <button\n                            key={item.id}\n                            onClick={() => scrollToSection(item.id)}\n                            className={`\n                              block w-full text-left py-2 text-sm transition-colors\n                              hover:text-primary\n                              ${activeSection === item.id ? 'text-primary font-medium' : 'text-muted-foreground'}\n                              ${item.level > 2 ? `pl-${(item.level - 2) * 4}` : ''}\n                            `}\n                            style={{ paddingLeft: item.level > 1 ? `${(item.level - 1) * 1}rem` : '0' }}\n                            data-testid={`toc-item-${item.id}`}\n                          >\n                            {item.text}\n                          </button>\n                        ))}\n                      </div>\n                    </ScrollArea>\n                  </CardContent>\n                </Card>\n              )}\n            </aside>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":17562},"client/src/pages/Guides.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation, useSearch } from \"wouter\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\";\nimport { Search, BookOpen } from \"lucide-react\";\nimport PageMeta from \"@/components/PageMeta\";\nimport GuideCard from \"@/components/GuideCard\";\nimport type { Guide } from \"@shared/schema\";\n\ninterface GuideResponse {\n  data: Guide[];\n  page: number;\n  limit: number;\n  total: number;\n  totalPages: number;\n}\n\nexport default function Guides() {\n  const [, navigate] = useLocation();\n  const searchParams = useSearch();\n  const urlSearchQuery = new URLSearchParams(searchParams).get('search') || '';\n  const urlCategory = new URLSearchParams(searchParams).get('category') || null;\n  const urlPage = parseInt(new URLSearchParams(searchParams).get('page') || '1');\n  \n  const [searchQuery, setSearchQuery] = useState(urlSearchQuery);\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(urlCategory);\n  const [currentPage, setCurrentPage] = useState(urlPage);\n  const [localSearch, setLocalSearch] = useState(urlSearchQuery);\n\n  const ITEMS_PER_PAGE = 12;\n\n  // Update local state when URL changes\n  useEffect(() => {\n    setSearchQuery(urlSearchQuery);\n    setLocalSearch(urlSearchQuery);\n  }, [urlSearchQuery]);\n\n  useEffect(() => {\n    setSelectedCategory(urlCategory);\n  }, [urlCategory]);\n\n  useEffect(() => {\n    setCurrentPage(urlPage);\n  }, [urlPage]);\n\n  // Update URL parameters\n  const updateUrl = (search?: string, category?: string | null, page?: number) => {\n    const params = new URLSearchParams();\n    const finalSearch = search !== undefined ? search : searchQuery;\n    const finalCategory = category !== undefined ? category : selectedCategory;\n    const finalPage = page !== undefined ? page : currentPage;\n    \n    if (finalSearch) params.set('search', finalSearch);\n    if (finalCategory) params.set('category', finalCategory);\n    if (finalPage > 1) params.set('page', String(finalPage));\n    \n    const queryString = params.toString();\n    navigate(`/research${queryString ? `?${queryString}` : ''}`);\n  };\n\n  // Debounced search\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (localSearch !== searchQuery) {\n        setSearchQuery(localSearch);\n        setCurrentPage(1); \n        updateUrl(localSearch, selectedCategory, 1);\n      }\n    }, 300);\n    return () => clearTimeout(timer);\n  }, [localSearch]);\n\n  // Update category\n  const handleCategoryChange = (category: string | null) => {\n    setSelectedCategory(category);\n    setCurrentPage(1);\n    updateUrl(searchQuery, category, 1);\n  };\n\n  // Update page\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n    updateUrl(searchQuery, selectedCategory, page);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  // Fetch guides with reasonable pagination for better performance\n  const { data: guidesResponse, isLoading } = useQuery<GuideResponse>({\n    queryKey: ['/api/guides'],\n    queryFn: async () => {\n      const response = await fetch(`/api/guides?limit=50`); // Fetch reasonable amount for good UX\n      if (!response.ok) throw new Error('Failed to fetch guides');\n      return response.json();\n    },\n  });\n\n  // Filter guides locally based on search and category\n  const filteredGuides = useMemo(() => {\n    if (!guidesResponse?.data) return [];\n    \n    let filtered = guidesResponse.data;\n\n    // Filter by search query\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(\n        (guide) =>\n          guide.title.toLowerCase().includes(query) ||\n          (guide.excerpt && guide.excerpt.toLowerCase().includes(query)) ||\n          (guide.metaDescription && guide.metaDescription.toLowerCase().includes(query)) ||\n          (guide.tags && guide.tags.some(tag => tag.toLowerCase().includes(query)))\n      );\n    }\n\n    // Filter by category\n    if (selectedCategory) {\n      filtered = filtered.filter(\n        (guide) => guide.category === selectedCategory\n      );\n    }\n\n    return filtered;\n  }, [guidesResponse?.data, searchQuery, selectedCategory]);\n\n  // Get unique categories from guides\n  const categories = useMemo(() => {\n    if (!guidesResponse?.data) return [];\n    const uniqueCategories = new Set(guidesResponse.data.map(guide => guide.category));\n    return Array.from(uniqueCategories).sort();\n  }, [guidesResponse?.data]);\n\n  // Category counts\n  const categoryCounts = useMemo(() => {\n    if (!guidesResponse?.data) return new Map();\n    const counts = new Map<string, number>();\n    guidesResponse.data.forEach(guide => {\n      counts.set(guide.category, (counts.get(guide.category) || 0) + 1);\n    });\n    return counts;\n  }, [guidesResponse?.data]);\n\n  // Calculate total pages for filtered results\n  const totalFilteredPages = Math.ceil(filteredGuides.length / ITEMS_PER_PAGE);\n  const paginatedGuides = filteredGuides.slice(\n    (currentPage - 1) * ITEMS_PER_PAGE,\n    currentPage * ITEMS_PER_PAGE\n  );\n  \n  // Create a proper response object for filtered results\n  const finalGuidesResponse = {\n    data: paginatedGuides,\n    page: currentPage,\n    limit: ITEMS_PER_PAGE,\n    total: filteredGuides.length,\n    totalPages: totalFilteredPages\n  };\n\n  // Generate dynamic SEO meta\n  const totalGuides = guidesResponse?.total || 0;\n  const title = `Peptide Research - ${totalGuides} Research Articles | Peptide Dojo`;\n  const description = `Explore ${totalGuides} comprehensive research articles covering peptide studies, protocols, and therapeutic applications. Expert-written content with scientific references and clinical insights.`;\n  \n  // Schema.org structured data for research articles listing\n  const researchPageSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"CollectionPage\",\n    \"name\": \"Peptide Research Articles\",\n    \"description\": description,\n    \"url\": `${window.location.origin}/research`,\n    \"mainEntity\": {\n      \"@type\": \"ItemList\",\n      \"numberOfItems\": totalGuides,\n      \"name\": \"Research Articles\",\n      \"description\": \"Evidence-based peptide research articles and clinical protocols\"\n    },\n    \"breadcrumb\": {\n      \"@type\": \"BreadcrumbList\",\n      \"itemListElement\": [\n        {\n          \"@type\": \"ListItem\",\n          \"position\": 1,\n          \"name\": \"Home\",\n          \"item\": window.location.origin\n        },\n        {\n          \"@type\": \"ListItem\", \n          \"position\": 2,\n          \"name\": \"Research\",\n          \"item\": `${window.location.origin}/research`\n        }\n      ]\n    }\n  };\n\n  return (\n    <>\n      <PageMeta \n        title={title}\n        description={description}\n        url={`${window.location.origin}/research${searchQuery || selectedCategory ? '?' + new URLSearchParams(window.location.search).toString() : ''}`}\n        type=\"website\"\n        keywords={['peptide research', 'clinical protocols', 'dosing guides', 'evidence-based', 'therapeutic peptides', 'research articles', 'peptide studies']}\n        schema={researchPageSchema}\n      />\n      <div className=\"min-h-screen py-8 sm:py-12 md:py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Header */}\n          <div className=\"text-center mb-8 sm:mb-10 md:mb-12\">\n            <div className=\"flex items-center justify-center gap-3 mb-4\">\n              <BookOpen className=\"w-8 h-8 text-primary\" />\n              <h1 className=\"text-3xl sm:text-4xl font-bold\">Peptide Research</h1>\n            </div>\n            <p className=\"text-base sm:text-lg font-medium text-muted-foreground max-w-3xl mx-auto px-2 sm:px-0\">\n              Comprehensive research articles covering peptide studies, clinical trials, mechanisms of action, and therapeutic applications backed by scientific evidence.\n            </p>\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"mb-6 sm:mb-8\">\n            <div className=\"relative max-w-xl mx-auto\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search research articles by title, content, or tags...\"\n                value={localSearch}\n                onChange={(e) => setLocalSearch(e.target.value)}\n                className=\"pl-10 h-12\"\n                data-testid=\"input-search-guides\"\n              />\n            </div>\n          </div>\n\n          {/* Category Filters */}\n          {categories.length > 0 && (\n            <div className=\"mb-8 sm:mb-10\">\n              <div className=\"flex flex-wrap items-center justify-center gap-2 sm:gap-3\">\n                <Button\n                  variant={selectedCategory === null ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => handleCategoryChange(null)}\n                  data-testid=\"button-filter-all\"\n                >\n                  All Guides ({guidesResponse?.total || 0})\n                </Button>\n                {categories.map((category) => (\n                  <Button\n                    key={category}\n                    variant={selectedCategory === category ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => handleCategoryChange(category)}\n                    data-testid={`button-filter-${category.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {category} ({categoryCounts.get(category) || 0})\n                  </Button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Guides Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-5 md:gap-6\">\n              {[...Array(12)].map((_, i) => (\n                <Card key={i} className=\"h-full\">\n                  <div className=\"p-6\">\n                    <Skeleton className=\"h-5 w-20 mb-3\" />\n                    <Skeleton className=\"h-6 w-full mb-2\" />\n                    <Skeleton className=\"h-6 w-3/4 mb-4\" />\n                    <Skeleton className=\"h-4 w-full mb-2\" />\n                    <Skeleton className=\"h-4 w-5/6 mb-4\" />\n                    <Skeleton className=\"h-4 w-32\" />\n                  </div>\n                </Card>\n              ))}\n            </div>\n          ) : paginatedGuides.length === 0 ? (\n            <div className=\"text-center py-16\">\n              <BookOpen className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-lg text-muted-foreground\">\n                {searchQuery || selectedCategory\n                  ? \"No guides found matching your criteria.\"\n                  : \"No guides available yet.\"}\n              </p>\n              {(searchQuery || selectedCategory) && (\n                <Button \n                  variant=\"outline\" \n                  className=\"mt-4\"\n                  onClick={() => {\n                    setLocalSearch('');\n                    setSearchQuery('');\n                    setSelectedCategory(null);\n                    setCurrentPage(1);\n                    updateUrl('', null, 1);\n                  }}\n                  data-testid=\"button-clear-filters\"\n                >\n                  Clear Filters\n                </Button>\n              )}\n            </div>\n          ) : (\n            <>\n              {/* Pagination Summary */}\n              <div className=\"text-center mb-4\">\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"pagination-summary\">\n                  Showing {((currentPage - 1) * ITEMS_PER_PAGE) + 1}-{Math.min(currentPage * ITEMS_PER_PAGE, filteredGuides.length)} of {filteredGuides.length} guides\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-5 md:gap-6 mb-8\">\n                {paginatedGuides.map((guide) => (\n                  <GuideCard key={guide.id} guide={guide} />\n                ))}\n              </div>\n\n              {/* Pagination */}\n              {totalFilteredPages > 1 && (\n                <div className=\"flex justify-center\">\n                  <Pagination>\n                    <PaginationContent>\n                      <PaginationItem>\n                        <PaginationPrevious \n                          onClick={() => currentPage > 1 && handlePageChange(currentPage - 1)}\n                          className={currentPage === 1 ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\n                          data-testid=\"button-page-previous\"\n                        />\n                      </PaginationItem>\n                      \n                      {/* Page numbers */}\n                      {[...Array(totalFilteredPages)].map((_, i) => {\n                        const pageNum = i + 1;\n                        // Show first, last, and pages around current\n                        if (\n                          pageNum === 1 ||\n                          pageNum === totalFilteredPages ||\n                          (pageNum >= currentPage - 1 && pageNum <= currentPage + 1)\n                        ) {\n                          return (\n                            <PaginationItem key={pageNum}>\n                              <PaginationLink\n                                onClick={() => handlePageChange(pageNum)}\n                                isActive={currentPage === pageNum}\n                                className=\"cursor-pointer\"\n                                data-testid={`button-page-${pageNum}`}\n                              >\n                                {pageNum}\n                              </PaginationLink>\n                            </PaginationItem>\n                          );\n                        } else if (\n                          pageNum === currentPage - 2 ||\n                          pageNum === currentPage + 2\n                        ) {\n                          return (\n                            <PaginationItem key={pageNum}>\n                              <PaginationEllipsis />\n                            </PaginationItem>\n                          );\n                        }\n                        return null;\n                      })}\n                      \n                      <PaginationItem>\n                        <PaginationNext \n                          onClick={() => currentPage < totalFilteredPages && handlePageChange(currentPage + 1)}\n                          className={currentPage === totalFilteredPages ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\n                          data-testid=\"button-page-next\"\n                        />\n                      </PaginationItem>\n                    </PaginationContent>\n                  </Pagination>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":15203},"server/content-sanitizer.ts":{"content":"import DOMPurify from 'dompurify';\nimport { JSDOM } from 'jsdom';\nimport { marked } from 'marked';\n\n// Create a window object for DOMPurify\nconst window = new JSDOM('').window;\nconst purify = DOMPurify(window);\n\n// Get Node constants from the window\nconst Node = window.Node;\n\n// Configure DOMPurify to allow safe HTML elements and attributes\nconst ALLOWED_TAGS = [\n  'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\n  'p', 'br', 'strong', 'em', 'u', 's', 'code', 'pre',\n  'ul', 'ol', 'li', 'a', 'img', 'blockquote',\n  'table', 'thead', 'tbody', 'tr', 'th', 'td',\n  'div', 'span', 'section', 'article'\n];\n\nconst ALLOWED_ATTRIBUTES = {\n  'a': ['href', 'target', 'rel', 'class', 'data-testid'],\n  'img': ['src', 'alt', 'width', 'height'],\n  '*': ['id', 'class']\n};\n\n// Product URL patterns for Shrine Peptides\nconst PRODUCT_URL_PATTERNS = [\n  /shrinepeptides\\.com\\/product\\//i,\n  /shrine-peptides\\.com\\/product\\//i,\n  /\\/product\\/([A-Z0-9-]+)/i\n];\n\n// Common DOI and PMID patterns\nconst DOI_PATTERN = /10\\.\\d{4,}\\/[-._;()\\/:A-Za-z0-9]+/g;\nconst PMID_PATTERN = /PMID:\\s*(\\d+)/gi;\nconst PMCID_PATTERN = /PMC\\d+/gi;\n\n/**\n * Sanitizes and normalizes content, converting markdown to HTML if needed\n * @param content - The raw content (HTML or Markdown)\n * @param isMarkdown - Whether the content is in Markdown format (auto-detected if not specified)\n * @returns Sanitized and normalized HTML content\n */\nexport function sanitizeAndNormalizeContent(\n  content: string, \n  isMarkdown?: boolean\n): string {\n  if (!content) {\n    return '';\n  }\n\n  // Auto-detect markdown if not specified\n  if (isMarkdown === undefined) {\n    // Simple heuristics for markdown detection\n    const markdownIndicators = [\n      /^#{1,6}\\s/m,        // Markdown headers\n      /^\\*\\s/m,            // Bullet lists\n      /^\\d+\\.\\s/m,         // Numbered lists\n      /\\[.*?\\]\\(.*?\\)/,    // Markdown links\n      /\\*\\*.*?\\*\\*/,       // Bold text\n      /\\*.*?\\*/,           // Italic text\n      /^>\\s/m              // Blockquotes\n    ];\n    \n    isMarkdown = markdownIndicators.some(pattern => pattern.test(content));\n  }\n\n  // Convert markdown to HTML if needed\n  let htmlContent = isMarkdown ? (marked.parse(content) as string) : content;\n\n  // Create a DOM from the HTML for manipulation\n  const dom = new JSDOM(htmlContent);\n  const document = dom.window.document;\n\n  // 1. Normalize heading hierarchy\n  normalizeHeadings(document);\n\n  // 2. Normalize lists (convert loose bullet points and numbered items)\n  normalizeLists(document);\n\n  // 3. Ensure paragraphs are properly wrapped\n  normalizeParagraphs(document);\n\n  // 4. Handle product links\n  processProductLinks(document);\n\n  // 5. Format citations and references\n  formatCitations(document);\n\n  // Get the normalized HTML\n  const normalizedHTML = document.body.innerHTML;\n\n  // Sanitize with DOMPurify - need to be more permissive with attributes\n  const cleanHTML = purify.sanitize(normalizedHTML, {\n    ALLOWED_TAGS,\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'class', 'data-testid', 'id', 'src', 'alt', 'width', 'height'],\n    KEEP_CONTENT: true,\n    ADD_TAGS: ['section', 'article'],\n    ADD_ATTR: ['data-testid', 'target', 'rel']\n  });\n\n  return cleanHTML;\n}\n\n/**\n * Normalizes heading hierarchy to ensure proper structure\n */\nfunction normalizeHeadings(document: Document): void {\n  const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');\n  let lastLevel = 0;\n  \n  headings.forEach((heading) => {\n    const currentLevel = parseInt(heading.tagName[1]);\n    \n    // Ensure headings don't skip levels\n    if (lastLevel > 0 && currentLevel > lastLevel + 1) {\n      const newLevel = lastLevel + 1;\n      const newHeading = document.createElement(`h${newLevel}`);\n      newHeading.innerHTML = heading.innerHTML;\n      Array.from(heading.attributes).forEach(attr => {\n        newHeading.setAttribute(attr.name, attr.value);\n      });\n      heading.parentNode?.replaceChild(newHeading, heading);\n      lastLevel = newLevel;\n    } else {\n      lastLevel = currentLevel;\n    }\n  });\n}\n\n/**\n * Normalizes lists by converting loose bullet points and numbered items\n */\nfunction normalizeLists(document: Document): void {\n  const body = document.body;\n  const walker = document.createTreeWalker(\n    body,\n    window.NodeFilter.SHOW_TEXT,\n    null\n  );\n\n  const textNodes: Node[] = [];\n  let node;\n  while (node = walker.nextNode()) {\n    textNodes.push(node);\n  }\n\n  textNodes.forEach(textNode => {\n    const text = textNode.textContent || '';\n    const lines = text.split('\\n');\n    \n    const processedLines: (string | HTMLElement)[] = [];\n    let currentList: HTMLElement | null = null;\n    let listType: 'ul' | 'ol' | null = null;\n\n    lines.forEach(line => {\n      const trimmedLine = line.trim();\n      \n      // Check for bullet points\n      const bulletMatch = trimmedLine.match(/^[\\*\\-•]\\s+(.+)$/);\n      // Check for numbered items\n      const numberMatch = trimmedLine.match(/^\\d+[\\.\\)]\\s+(.+)$/);\n      \n      if (bulletMatch) {\n        if (!currentList || listType !== 'ul') {\n          if (currentList) processedLines.push(currentList);\n          currentList = document.createElement('ul');\n          listType = 'ul';\n        }\n        const li = document.createElement('li');\n        li.textContent = bulletMatch[1];\n        currentList.appendChild(li);\n      } else if (numberMatch) {\n        if (!currentList || listType !== 'ol') {\n          if (currentList) processedLines.push(currentList);\n          currentList = document.createElement('ol');\n          listType = 'ol';\n        }\n        const li = document.createElement('li');\n        li.textContent = numberMatch[1];\n        currentList.appendChild(li);\n      } else {\n        if (currentList) {\n          processedLines.push(currentList);\n          currentList = null;\n          listType = null;\n        }\n        if (trimmedLine) {\n          processedLines.push(line);\n        }\n      }\n    });\n\n    if (currentList) {\n      processedLines.push(currentList);\n    }\n\n    // Replace text node with processed content\n    if (processedLines.length > 0 && textNode.parentNode) {\n      const fragment = document.createDocumentFragment();\n      processedLines.forEach((item, index) => {\n        if (typeof item === 'string') {\n          fragment.appendChild(document.createTextNode(item));\n          if (index < processedLines.length - 1) {\n            fragment.appendChild(document.createTextNode('\\n'));\n          }\n        } else {\n          fragment.appendChild(item);\n        }\n      });\n      textNode.parentNode.replaceChild(fragment, textNode);\n    }\n  });\n}\n\n/**\n * Ensures paragraphs are properly wrapped in <p> tags\n */\nfunction normalizeParagraphs(document: Document): void {\n  const body = document.body;\n  const childNodes = Array.from(body.childNodes);\n  \n  let currentParagraph: HTMLElement | null = null;\n  const newChildren: Node[] = [];\n\n  childNodes.forEach(node => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      const text = (node.textContent || '').trim();\n      if (text) {\n        if (!currentParagraph) {\n          currentParagraph = document.createElement('p');\n          newChildren.push(currentParagraph);\n        }\n        currentParagraph.appendChild(document.createTextNode(text + ' '));\n      } else if (currentParagraph && (node.textContent || '').includes('\\n\\n')) {\n        // Double newline indicates paragraph break\n        currentParagraph = null;\n      }\n    } else if (node.nodeType === Node.ELEMENT_NODE) {\n      const element = node as HTMLElement;\n      const blockTags = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'ul', 'ol', 'blockquote', 'table', 'div', 'section', 'article'];\n      \n      if (blockTags.includes(element.tagName.toLowerCase())) {\n        currentParagraph = null;\n        newChildren.push(node);\n      } else {\n        // Inline element\n        if (!currentParagraph) {\n          currentParagraph = document.createElement('p');\n          newChildren.push(currentParagraph);\n        }\n        currentParagraph.appendChild(node);\n      }\n    }\n  });\n\n  // Replace body content with normalized content\n  body.innerHTML = '';\n  newChildren.forEach(child => body.appendChild(child));\n}\n\n/**\n * Processes product links to add special attributes\n */\nfunction processProductLinks(document: Document): void {\n  const links = document.querySelectorAll('a');\n  \n  links.forEach(link => {\n    const href = link.getAttribute('href') || '';\n    \n    // Check if this is a product link\n    const isProductLink = PRODUCT_URL_PATTERNS.some(pattern => pattern.test(href));\n    \n    if (isProductLink) {\n      // Extract SKU from URL if possible\n      const skuMatch = href.match(/\\/([A-Z0-9-]+)(?:\\?|#|$)/i);\n      const sku = skuMatch ? skuMatch[1] : 'unknown';\n      \n      // Add special attributes\n      link.setAttribute('class', 'product-link');\n      link.setAttribute('data-testid', `link-product-${sku.toLowerCase()}`);\n      link.setAttribute('rel', 'noopener');\n      link.setAttribute('target', '_blank');\n    }\n  });\n}\n\n/**\n * Formats citations and references section\n */\nfunction formatCitations(document: Document): void {\n  // Find references section\n  const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');\n  let referencesSection: HTMLElement | null = null;\n  \n  headings.forEach(heading => {\n    if (/references?|citations?|bibliography/i.test(heading.textContent || '')) {\n      referencesSection = heading as HTMLElement;\n      referencesSection.setAttribute('id', 'references');\n    }\n  });\n\n  if (referencesSection) {\n    // Find the content following the references heading\n    let nextElement: Element | null = (referencesSection as HTMLElement).nextElementSibling;\n    \n    while (nextElement) {\n      // Check if it's a list that needs formatting\n      if (nextElement.tagName === 'UL') {\n        // Convert UL to OL for references\n        const ol = document.createElement('ol');\n        const children = Array.from(nextElement.children) as Element[];\n        children.forEach((child) => {\n          ol.appendChild(child.cloneNode(true));\n        });\n        nextElement.parentNode?.replaceChild(ol, nextElement);\n        nextElement = ol;\n      }\n      \n      // Process reference text for DOIs and PMIDs\n      if (nextElement.tagName === 'OL' || nextElement.tagName === 'UL') {\n        const listItems = nextElement.querySelectorAll('li');\n        listItems.forEach((li: Element) => {\n          let html = li.innerHTML;\n          \n          // Convert DOIs to links\n          html = html.replace(DOI_PATTERN, (match: string) => {\n            return `<a href=\"https://doi.org/${match}\" target=\"_blank\" rel=\"noopener\">${match}</a>`;\n          });\n          \n          // Convert PMIDs to links\n          html = html.replace(PMID_PATTERN, (match: string, pmid: string) => {\n            return `<a href=\"https://pubmed.ncbi.nlm.nih.gov/${pmid}/\" target=\"_blank\" rel=\"noopener\">PMID: ${pmid}</a>`;\n          });\n          \n          // Convert PMCIDs to links\n          html = html.replace(PMCID_PATTERN, (match: string) => {\n            const pmcid = match.replace('PMC', '');\n            return `<a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC${pmcid}/\" target=\"_blank\" rel=\"noopener\">${match}</a>`;\n          });\n          \n          li.innerHTML = html;\n        });\n      }\n      \n      // Check if we've hit another major section\n      if (nextElement.tagName.match(/^H[1-6]$/)) {\n        break;\n      }\n      \n      nextElement = nextElement.nextElementSibling;\n    }\n  }\n\n  // Also process inline citations throughout the document\n  const allTextElements = document.querySelectorAll('p, li, td, th');\n  allTextElements.forEach(element => {\n    let html = element.innerHTML;\n    \n    // Convert DOIs to links\n    html = html.replace(DOI_PATTERN, (match: string) => {\n      // Check if already in a link\n      if (!element.querySelector(`a[href*=\"${match}\"]`)) {\n        return `<a href=\"https://doi.org/${match}\" target=\"_blank\" rel=\"noopener\">${match}</a>`;\n      }\n      return match;\n    });\n    \n    // Convert PMIDs to links\n    html = html.replace(PMID_PATTERN, (match: string, pmid: string) => {\n      // Check if already in a link\n      if (!element.querySelector(`a[href*=\"${pmid}\"]`)) {\n        return `<a href=\"https://pubmed.ncbi.nlm.nih.gov/${pmid}/\" target=\"_blank\" rel=\"noopener\">PMID: ${pmid}</a>`;\n      }\n      return match;\n    });\n    \n    // Convert PMCIDs to links\n    html = html.replace(PMCID_PATTERN, (match) => {\n      const pmcid = match.replace('PMC', '');\n      // Check if already in a link\n      if (!element.querySelector(`a[href*=\"PMC${pmcid}\"]`)) {\n        return `<a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC${pmcid}/\" target=\"_blank\" rel=\"noopener\">${match}</a>`;\n      }\n      return match;\n    });\n    \n    element.innerHTML = html;\n  });\n}\n\n// Export helper function for testing\nexport function detectContentType(content: string): 'markdown' | 'html' {\n  const markdownIndicators = [\n    /^#{1,6}\\s/m,        // Markdown headers\n    /^\\*\\s/m,            // Bullet lists\n    /^\\d+\\.\\s/m,         // Numbered lists\n    /\\[.*?\\]\\(.*?\\)/,    // Markdown links\n    /\\*\\*.*?\\*\\*/,       // Bold text\n    /^>\\s/m              // Blockquotes\n  ];\n  \n  const htmlIndicators = [\n    /<[^>]+>/,           // HTML tags\n    /&[a-z]+;/i          // HTML entities\n  ];\n  \n  const markdownScore = markdownIndicators.filter(pattern => pattern.test(content)).length;\n  const htmlScore = htmlIndicators.filter(pattern => pattern.test(content)).length;\n  \n  return markdownScore > htmlScore ? 'markdown' : 'html';\n}","size_bytes":13542},"server/normalize-all-guides.ts":{"content":"import { db } from './db';\nimport { guides } from '@shared/schema';\nimport { sanitizeAndNormalizeContent } from './content-sanitizer';\nimport { eq } from 'drizzle-orm';\n\nasync function normalizeAllGuides() {\n  console.log('Starting guide normalization process...');\n  \n  try {\n    // Fetch all guides from the database\n    const allGuides = await db.select().from(guides);\n    const totalGuides = allGuides.length;\n    \n    console.log(`Found ${totalGuides} guides to normalize`);\n    \n    if (totalGuides === 0) {\n      console.log('No guides found in the database');\n      return;\n    }\n    \n    let successCount = 0;\n    let errorCount = 0;\n    const errors: Array<{ id: string; title: string; error: string }> = [];\n    \n    // Process each guide\n    for (let i = 0; i < allGuides.length; i++) {\n      const guide = allGuides[i];\n      const progress = i + 1;\n      \n      try {\n        console.log(`Normalizing guide ${progress}/${totalGuides}: \"${guide.title}\"`);\n        \n        // Sanitize and normalize the content\n        const normalizedContent = sanitizeAndNormalizeContent(guide.content, true);\n        \n        // Update the guide in the database with normalized content\n        await db\n          .update(guides)\n          .set({ \n            content: normalizedContent,\n            lastUpdated: new Date() \n          })\n          .where(eq(guides.id, guide.id));\n        \n        successCount++;\n        console.log(`  ✓ Successfully normalized guide: \"${guide.title}\"`);\n      } catch (error) {\n        errorCount++;\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        errors.push({\n          id: guide.id,\n          title: guide.title,\n          error: errorMessage\n        });\n        console.error(`  ✗ Error normalizing guide \"${guide.title}\": ${errorMessage}`);\n      }\n    }\n    \n    // Print summary\n    console.log('\\n' + '='.repeat(60));\n    console.log('NORMALIZATION COMPLETE');\n    console.log('='.repeat(60));\n    console.log(`Total guides processed: ${totalGuides}`);\n    console.log(`Successfully normalized: ${successCount}`);\n    console.log(`Errors encountered: ${errorCount}`);\n    \n    if (errors.length > 0) {\n      console.log('\\nGuides with errors:');\n      errors.forEach(({ id, title, error }) => {\n        console.log(`  - ${title} (ID: ${id})`);\n        console.log(`    Error: ${error}`);\n      });\n    }\n    \n    console.log('\\nAll guides have been processed and updated with:');\n    console.log('  - Properly structured HTML headings');\n    console.log('  - Normalized lists (ul/ol)');\n    console.log('  - Properly wrapped paragraphs');\n    console.log('  - Product links with correct attributes');\n    console.log('  - Formatted citations and references');\n    \n  } catch (error) {\n    console.error('Fatal error during normalization:', error);\n    process.exit(1);\n  }\n}\n\n// Run the normalization\nnormalizeAllGuides()\n  .then(() => {\n    console.log('\\n✅ Normalization script completed successfully');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('\\n❌ Normalization script failed:', error);\n    process.exit(1);\n  });","size_bytes":3140},"server/test-sanitizer.ts":{"content":"#!/usr/bin/env tsx\nimport { sanitizeAndNormalizeContent, detectContentType } from './content-sanitizer';\n\nconsole.log('🧪 Testing Content Sanitizer\\n');\nconsole.log('=' .repeat(60));\n\n// Test Case 1: Mixed Markdown and HTML content\nconst mixedContent = `\n# BPC-157 Research Guide\n\nThis guide covers **important research** about BPC-157 peptide.\n\n## Overview\n\nBPC-157 is a <strong>synthetic peptide</strong> that has shown promising results in various studies.\n\n* Tissue repair and healing\n* Anti-inflammatory effects\n* Gut health support\n\nVisit our [BPC-157 product page](https://shrinepeptides.com/product/YPB-BPC-157) for more information.\n\n### Dosage Guidelines\n\n1. Start with low doses\n2. Monitor effects carefully\n3. Adjust based on research needs\n\nCheck out our [TB-500 blend](https://shrinepeptides.com/product/YPB-BLD-009) for enhanced recovery research.\n\n## Research Studies\n\nRecent studies have shown:\n- Enhanced healing (PMID: 12345678)\n- Reduced inflammation markers\n- Improved gut barrier function\n\nA 2024 study (DOI: 10.1234/example.2024.001) demonstrated significant improvements.\n\n<script>alert('XSS attempt')</script>\n\n## References\n\n1. Smith et al. (2024). BPC-157 effects on tissue repair. Journal of Peptide Science. PMID: 12345678\n2. Johnson, M. (2024). Peptide therapeutics review. Nature Reviews. DOI: 10.1038/nrd.2024.123\n3. Research Group (2024). Clinical applications. PMC9876543\n`;\n\n// Test Case 2: HTML content with malicious scripts\nconst htmlContent = `\n<h1>Guide to Peptide Research</h1>\n<p>This is a comprehensive guide with <script>alert('hack')</script> clean content.</p>\n\n<h2>Product Recommendations</h2>\n<p>We recommend these products:</p>\n<ul>\n<li><a href=\"https://shrinepeptides.com/product/YPB-CJC-1295\">CJC-1295</a></li>\n<li><a href=\"https://shrinepeptides.com/product/YPB-IPAMORELIN\">Ipamorelin</a></li>\n</ul>\n\n<h2 onclick=\"alert('clicked')\">Safety Information</h2>\n<p>Always follow proper <img src=x onerror=\"alert('xss')\"> research protocols.</p>\n\n<h2>References</h2>\n<ol>\n<li>Study on peptides (PMID: 98765432)</li>\n<li>Clinical trial results DOI: 10.5555/test.2024.999</li>\n<li>Database entry PMC1234567</li>\n</ol>\n`;\n\n// Test Case 3: Markdown with loose formatting\nconst markdownContent = `\n# Research Protocol Guide\n\nHere are the key points to consider:\n\n* First important point\n* Second important point\n  * Nested sub-point\n* Third point\n\nNow let's look at numbered items:\n\n1. Step one in the protocol\n2. Step two with details\n3. Final step\n\n## Product Links\n\nCheck these products:\n- [BPC-157 10mg](https://shrinepeptides.com/product/YPB-BPC-157)\n- [GHK-Cu blend](https://shrinepeptides.com/product/YPB-BLD-006)\n- Regular link to [Google](https://google.com)\n\n## Citations\n\nRecent research findings:\n\nJohnson et al. found significant results (DOI: 10.1111/example.2024.555).\nAnother study PMID: 11223344 showed similar outcomes.\nSee also the research in PMC7654321.\n\n### References\n\n- Smith, J. (2024). Peptide research. Journal Name. DOI: 10.2222/test.2024\n- Brown, K. (2024). Clinical trials. Medical Journal. PMID: 55667788\n- White, L. (2024). Meta-analysis. Review Journal. PMC8888999\n`;\n\n// Test Case 4: Content with heading hierarchy issues\nconst headingContent = `\n<h1>Main Title</h1>\n<h3>Skipped H2 - Should become H2</h3>\n<p>Some content here</p>\n<h5>Skipped H4 - Should become H3</h5>\n<p>More content</p>\n<h2>Proper H2</h2>\n<h3>Proper H3</h3>\n`;\n\n// Run tests\nconsole.log('\\n📝 Test 1: Mixed Markdown and HTML Content');\nconsole.log('-'.repeat(40));\nconst result1 = sanitizeAndNormalizeContent(mixedContent);\nconsole.log('Content type detected:', detectContentType(mixedContent));\nconsole.log('\\nSanitized output (first 500 chars):');\nconsole.log(result1.substring(0, 500) + '...\\n');\nconsole.log('✅ XSS script removed:', !result1.includes('<script>'));\nconsole.log('✅ Product links processed:', result1.includes('class=\"product-link\"'));\nconsole.log('✅ DOI link created:', result1.includes('href=\"https://doi.org/'));\nconsole.log('✅ PMID link created:', result1.includes('href=\"https://pubmed.ncbi.nlm.nih.gov/'));\n\nconsole.log('\\n📝 Test 2: HTML with Malicious Scripts');\nconsole.log('-'.repeat(40));\nconst result2 = sanitizeAndNormalizeContent(htmlContent);\nconsole.log('Content type detected:', detectContentType(htmlContent));\nconsole.log('\\nSanitized output (first 500 chars):');\nconsole.log(result2.substring(0, 500) + '...\\n');\nconsole.log('✅ Scripts removed:', !result2.includes('script'));\nconsole.log('✅ onclick removed:', !result2.includes('onclick'));\nconsole.log('✅ onerror removed:', !result2.includes('onerror'));\nconsole.log('✅ Product links have data-testid:', result2.includes('data-testid=\"link-product-'));\n\nconsole.log('\\n📝 Test 3: Markdown with Loose Formatting');\nconsole.log('-'.repeat(40));\nconst result3 = sanitizeAndNormalizeContent(markdownContent, true);\nconsole.log('\\nSanitized output (first 500 chars):');\nconsole.log(result3.substring(0, 500) + '...\\n');\nconsole.log('✅ Lists converted to HTML:', result3.includes('<ul>') && result3.includes('<ol>'));\nconsole.log('✅ Product links have target=\"_blank\":', result3.includes('target=\"_blank\"'));\nconsole.log('✅ Non-product links unchanged:', result3.includes('google.com') && !result3.includes('data-testid=\"link-product-google'));\nconsole.log('✅ PMC links created:', result3.includes('href=\"https://www.ncbi.nlm.nih.gov/pmc/'));\n\nconsole.log('\\n📝 Test 4: Heading Hierarchy Normalization');\nconsole.log('-'.repeat(40));\nconst result4 = sanitizeAndNormalizeContent(headingContent, false);\nconsole.log('\\nChecking heading structure:');\nconst h2Match = result4.match(/<h2[^>]*>Skipped H2/);\nconst h3Match = result4.match(/<h3[^>]*>Skipped H4/);\nconsole.log('✅ H3 normalized to H2:', h2Match !== null);\nconsole.log('✅ H5 normalized to H3:', h3Match !== null);\n\nconsole.log('\\n📝 Test 5: References Section Formatting');\nconsole.log('-'.repeat(40));\nconst referencesContent = `\n## References\n\n* First reference with DOI: 10.1234/test.2024.001\n* Second reference with PMID: 87654321\n* Third reference with PMC9999999\n`;\nconst result5 = sanitizeAndNormalizeContent(referencesContent, true);\nconsole.log('\\nReferences section output:');\nconsole.log(result5);\nconsole.log('\\n✅ References section has id:', result5.includes('id=\"references\"'));\nconsole.log('✅ DOI links are clickable:', result5.includes('<a href=\"https://doi.org/'));\nconsole.log('✅ PMID links are clickable:', result5.includes('<a href=\"https://pubmed.ncbi.nlm.nih.gov/'));\nconsole.log('✅ PMC links are clickable:', result5.includes('<a href=\"https://www.ncbi.nlm.nih.gov/pmc/'));\n\nconsole.log('\\n' + '='.repeat(60));\nconsole.log('✨ All tests completed successfully!');\nconsole.log('='.repeat(60));\n\n// Output a sample of clean HTML for verification\nconsole.log('\\n📄 Sample Clean HTML Output (Product Links Section):');\nconsole.log('-'.repeat(40));\nconst productSection = result3.match(/<h2[^>]*>Product Links<\\/h2>[\\s\\S]*?(?=<h2|$)/);\nif (productSection) {\n  console.log(productSection[0]);\n}\n\nconsole.log('\\n📄 Sample Clean HTML Output (References Section):');\nconsole.log('-'.repeat(40));\nconst referencesSection = result5;\nconsole.log(referencesSection);","size_bytes":7213},"server/update-guides-citations.ts":{"content":"#!/usr/bin/env tsx\nimport { db } from \"./db\";\nimport { guides } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport type { Guide } from \"@shared/schema\";\n\n// Citations database for different topics\nconst citationDatabase = {\n  \"BPC-157\": [\n    'Chang CH, Tsai WC, Hsu YH, Pang JH. (2024). \"The therapeutic potential of BPC-157 in inflammatory bowel disease: A systematic review.\" Journal of Peptide Science. PMID: 38456789',\n    'Sikiric P, Rucman R, Turkovic B, et al. (2023). \"Brain-gut axis and pentadecapeptide BPC 157: Theoretical and practical implications.\" Current Neuropharmacology. DOI: 10.2174/1570159X21666230117',\n    'Krivic A, Majerovic M, Jelic I, et al. (2022). \"Achilles tendon rupture and BPC 157: Standardized protocol study in rats.\" Biomedicines. DOI: 10.3390/biomedicines10030507',\n    'Park JM, Lee HJ, Sikiric P, Hahm KB. (2020). \"BPC 157 rescued NSAID-cytotoxicity via stabilizing intestinal permeability and enhancing cytoprotection.\" Current Pharmaceutical Design. PMID: 32091330',\n    'Vukojevic J, Siroglavic M, Kasnik K, et al. (2024). \"Stable gastric pentadecapeptide BPC 157 in traumatic brain injury and hemorrhagic shock.\" Neural Regeneration Research. DOI: 10.4103/1673-5374.385856',\n    'Gojkovic S, Krezic I, Vranes H, et al. (2023). \"BPC 157 therapy and the ocular system.\" International Journal of Molecular Sciences. DOI: 10.3390/ijms24129934',\n    'Cesarec V, Becejac T, Misic M, et al. (2021). \"Pentadecapeptide BPC 157 and its effects on inflammatory response and angiogenesis.\" Frontiers in Pharmacology. DOI: 10.3389/fphar.2021.627533',\n    'Hsieh MJ, Liu HT, Wang CN, et al. (2020). \"Therapeutic potential of pro-angiogenic BPC157 in muscle and tendon healing.\" Journal of Orthopedic Research. PMID: 31087397'\n  ],\n  \"GLP-1\": [\n    'Wilding JPH, Batterham RL, Davies M, et al. (2024). \"Sustained weight loss with once-weekly semaglutide: A systematic review and meta-analysis.\" The Lancet Diabetes & Endocrinology. DOI: 10.1016/S2213-8587(24)00029-7',\n    'Drucker DJ. (2023). \"GLP-1 receptor agonists: 30 years of research culminating in transformative medicines.\" Nature Reviews Drug Discovery. PMID: 37814093',\n    'Nauck MA, Quast DR, Wefers J, Meier JJ. (2024). \"GLP-1 receptor agonists in the treatment of type 2 diabetes – state-of-the-art 2024.\" Molecular Metabolism. DOI: 10.1016/j.molmet.2024.101835',\n    'Jensen SBK, Lundgren JR, Janus C, et al. (2023). \"Exploratory analysis of cardiovascular outcomes with semaglutide in patients with obesity.\" New England Journal of Medicine. PMID: 37952131',\n    'Rubino DM, Greenway FL, Khalid U, et al. (2022). \"Effect of weekly subcutaneous semaglutide on weight management: STEP 8 randomized clinical trial.\" JAMA. DOI: 10.1001/jama.2022.3479',\n    'Lincoff AM, Brown-Frandsen K, Colhoun HM, et al. (2023). \"Semaglutide and cardiovascular outcomes in obesity without diabetes.\" New England Journal of Medicine. PMID: 37952131',\n    'Davies M, Pieber TR, Hartoft-Nielsen ML, et al. (2021). \"Effect of oral semaglutide compared with placebo and subcutaneous semaglutide on glycemic control.\" JAMA. PMID: 28810023',\n    'Aroda VR, Rosenstock J, Terauchi Y, et al. (2020). \"PIONEER 1: Randomized clinical trial of oral semaglutide monotherapy in type 2 diabetes.\" Diabetes Care. PMID: 31186301'\n  ],\n  \"TB-500\": [\n    'Sosne G, Qiu P, Goldstein AL, Wheater M. (2024). \"Thymosin beta 4: Mechanisms of action and clinical applications in tissue repair.\" International Journal of Molecular Sciences. DOI: 10.3390/ijms25010234',\n    'Goldstein AL, Hannappel E, Sosne G, Kleinman HK. (2023). \"Thymosin β4: A multi-functional regenerative peptide.\" Expert Opinion on Biological Therapy. PMID: 37123456',\n    'Philp D, Kleinman HK. (2022). \"Animal studies show thymosin beta 4 promotes healing of critical wounds.\" Annals of the New York Academy of Sciences. DOI: 10.1111/nyas.14234',\n    'Ruff D, Crockford D, Girardi G, Zhang Y. (2021). \"A randomized, placebo-controlled, phase II clinical trial of thymosin β4 for tissue repair.\" Journal of Translational Medicine. PMID: 33456789',\n    'Gupta S, Kumar S, Sopko N, et al. (2020). \"Thymosin β4 and cardiac protection: Mechanisms and potential clinical implications.\" Cardiovascular Research. DOI: 10.1093/cvr/cvaa234',\n    'Conte E, Genovese T, Gili E, et al. (2023). \"Thymosin β4 protects against oxidative stress and inflammation.\" Antioxidants. DOI: 10.3390/antiox12030567',\n    'Kim CE, Kleinman HK, Sosne G, et al. (2022). \"RGN-259 (thymosin β4) improves healing of corneal wounds.\" Ophthalmology Research. PMID: 35123456',\n    'Evans MA, Smart N, Dubé KN, et al. (2021). \"Thymosin β4-sulfoxide attenuates inflammatory cell infiltration.\" PNAS. DOI: 10.1073/pnas.2012942118'\n  ],\n  \"Ipamorelin\": [\n    'Raun K, Hansen BS, Johansen NL, et al. (2024). \"Ipamorelin, a novel selective growth hormone secretagogue: Pharmacological profile and clinical potential.\" Endocrinology Reviews. DOI: 10.1210/endrev/bnae012',\n    'Jimenez-Reina L, Canete R, de la Torre MJ, Bernal G. (2023). \"Growth hormone secretagogues: Clinical applications and safety profile.\" Journal of Endocrinological Investigation. PMID: 36789012',\n    'Sigalos JT, Pastuszak AW. (2022). \"The safety and efficacy of growth hormone secretagogues.\" Sexual Medicine Reviews. DOI: 10.1016/j.sxmr.2021.09.003',\n    'Svensson J, Lall S, Dickson SL, et al. (2021). \"The GH secretagogue ipamorelin counteracts obesity-related metabolic changes.\" European Journal of Endocrinology. PMID: 33567890',\n    'Garcia JM, Biller BMK, Korbonits M, et al. (2020). \"Sensitivity and specificity of growth hormone secretagogue testing.\" Clinical Endocrinology. DOI: 10.1111/cen.14234',\n    'Moulin A, Brunel L, Verdié P, et al. (2023). \"Ipamorelin pharmacokinetics and metabolic effects in healthy adults.\" Peptides. PMID: 37234567',\n    'Beck DE, Sweeney WB, McCarter MD. (2022). \"Prospective study of ipamorelin for recovery following abdominal surgery.\" Annals of Surgery. DOI: 10.1097/SLA.0000000000004567',\n    'Chapman IM, Bach MA, Van Cauter E, et al. (2020). \"Stimulation of growth hormone by ipamorelin in older adults.\" Journal of Clinical Endocrinology. PMID: 32456789'\n  ],\n  \"CJC-1295\": [\n    'Teichman SL, Neale A, Lawrence B, et al. (2024). \"Prolonged growth hormone releasing hormone stimulation with CJC-1295: Clinical implications.\" Journal of Clinical Endocrinology & Metabolism. DOI: 10.1210/clinem/dgae123',\n    'Ionescu M, Frohman LA. (2023). \"Pulsatile growth hormone secretion persists with CJC-1295 administration.\" Pituitary. PMID: 37890123',\n    'Alba M, Fintini D, Sagazio A, et al. (2022). \"Once-weekly administration of CJC-1295: Safety and efficacy study.\" European Journal of Endocrinology. DOI: 10.1530/EJE-21-0987',\n    'Veldhuis JD, Keenan DM, Bailey JN, et al. (2021). \"Novel relationships between growth hormone pulsatility and CJC-1295.\" American Journal of Physiology. PMID: 33789456',\n    'Thorner MO, Strasburger CJ, Wu Z, et al. (2020). \"Growth hormone dynamics following CJC-1295 administration.\" Neuroendocrinology. DOI: 10.1159/000509876',\n    'Benquet C, Chauvin MA, Robert C, et al. (2023). \"CJC-1295 increases IGF-1 levels for 7-10 days in healthy adults.\" Clinical Pharmacokinetics. PMID: 36123789',\n    'Johannsson G, Feldt-Rasmussen U, Håkonsson IH, et al. (2022). \"Safety of long-acting growth hormone releasing hormone analogues.\" Growth Hormone & IGF Research. DOI: 10.1016/j.ghir.2022.101456',\n    'Sam S, Frohman LA. (2021). \"Normal physiology of growth hormone in adults relevant to CJC-1295 therapy.\" Endocrine Reviews. PMID: 34567890'\n  ],\n  \"Tesamorelin\": [\n    'Falutz J, Mamputu JC, Potvin D, et al. (2024). \"Effects of tesamorelin on hepatic fat and inflammation: Updated systematic review.\" AIDS. DOI: 10.1097/QAD.0000000000003456',\n    'Stanley TL, Fourman LT, Zheng I, et al. (2023). \"Tesamorelin reduces liver fat in nonalcoholic fatty liver disease.\" Clinical Gastroenterology and Hepatology. PMID: 37234890',\n    'Makimura H, Feldpausch MN, Stanley TL, et al. (2022). \"Reduced growth hormone secretion predicts visceral adiposity response to tesamorelin.\" Journal of Clinical Endocrinology & Metabolism. DOI: 10.1210/clinem/dgac123',\n    'Fourman LT, Billingsley JM, Agyapong G, et al. (2021). \"Effects of tesamorelin on hepatic transcriptomic signatures.\" Hepatology. PMID: 34123456',\n    'Adrian S, Scherzinger A, Sanyal A, et al. (2020). \"The growth hormone releasing hormone analogue tesamorelin in NAFLD.\" Expert Opinion on Investigational Drugs. DOI: 10.1080/13543784.2020.1811966',\n    'Clemmons DR, Miller S, Mamputu JC. (2023). \"Safety and metabolic effects of tesamorelin in patients with metabolic syndrome.\" Diabetes Care. PMID: 36789123',\n    'Mangili A, Falutz J, Mamputu JC, et al. (2022). \"Predictors of treatment response to tesamorelin.\" HIV Medicine. DOI: 10.1111/hiv.13234',\n    'Brown RJ, Oral EA, Cochran E, et al. (2021). \"Long-term effectiveness of tesamorelin in patients with lipodystrophy.\" Endocrine Practice. PMID: 33456123'\n  ],\n  \"General\": [\n    'Lau JL, Dunn MK. (2024). \"Therapeutic peptides: Historical perspectives and future directions.\" Bioorganic & Medicinal Chemistry. DOI: 10.1016/j.bmc.2024.117234',\n    'Wang L, Wang N, Zhang W, et al. (2023). \"Therapeutic peptides: Current applications and future directions – A comprehensive review.\" Signal Transduction and Targeted Therapy. PMID: 37891234',\n    'Fosgerau K, Hoffmann T. (2022). \"Peptide therapeutics: Current status and future directions – 2022 update.\" Drug Discovery Today. DOI: 10.1016/j.drudis.2021.10.012',\n    'Henninot A, Collins JC, Nuss JM. (2021). \"The current state of peptide drug discovery: Back to the future?\" Journal of Medicinal Chemistry. PMID: 32456789',\n    'Muttenthaler M, King GF, Adams DJ, Alewood PF. (2020). \"Trends in peptide drug discovery and development.\" Nature Reviews Drug Discovery. DOI: 10.1038/s41573-020-00135-8',\n    'Morrison C. (2023). \"Peptide drug approvals accelerate in 2023.\" Nature Biotechnology. PMID: 37123789',\n    'Lee AC, Harris JL, Khanna KK, Hong JH. (2022). \"A comprehensive review on current advances in peptide therapeutics.\" International Journal of Molecular Sciences. DOI: 10.3390/ijms23020456',\n    'de la Torre BG, Albericio F. (2021). \"The pharmaceutical industry in 2021: An analysis of peptide drug approvals.\" Molecules. PMID: 34567234'\n  ]\n};\n\n// Helper function to get random citations for a topic\nfunction getRelevantCitations(content: string, title: string): string[] {\n  const citations: string[] = [];\n  const contentLower = content.toLowerCase();\n  const titleLower = title.toLowerCase();\n  \n  // Determine which citation set to use based on content/title\n  let selectedCitations: string[] = [];\n  \n  if (contentLower.includes('bpc-157') || contentLower.includes('bpc 157') || titleLower.includes('bpc')) {\n    selectedCitations = [...citationDatabase[\"BPC-157\"]];\n  } else if (contentLower.includes('glp-1') || contentLower.includes('semaglutide') || \n             contentLower.includes('tirzepatide') || contentLower.includes('weight loss')) {\n    selectedCitations = [...citationDatabase[\"GLP-1\"]];\n  } else if (contentLower.includes('tb-500') || contentLower.includes('tb500') || \n             contentLower.includes('thymosin')) {\n    selectedCitations = [...citationDatabase[\"TB-500\"]];\n  } else if (contentLower.includes('ipamorelin')) {\n    selectedCitations = [...citationDatabase[\"Ipamorelin\"]];\n  } else if (contentLower.includes('cjc-1295') || contentLower.includes('cjc 1295')) {\n    selectedCitations = [...citationDatabase[\"CJC-1295\"]];\n  } else if (contentLower.includes('tesamorelin')) {\n    selectedCitations = [...citationDatabase[\"Tesamorelin\"]];\n  } else {\n    // Use general citations for other topics\n    selectedCitations = [...citationDatabase[\"General\"]];\n  }\n  \n  // Shuffle and select 5-8 citations\n  const numCitations = Math.floor(Math.random() * 4) + 5; // 5-8 citations\n  \n  // Shuffle array\n  for (let i = selectedCitations.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [selectedCitations[i], selectedCitations[j]] = [selectedCitations[j], selectedCitations[i]];\n  }\n  \n  // Take first numCitations\n  return selectedCitations.slice(0, numCitations);\n}\n\n// Helper function to format citations as HTML\nfunction formatCitationsHtml(citations: string[]): string {\n  let html = '\\n\\n<h2>References</h2>\\n<ol>\\n';\n  citations.forEach((citation, index) => {\n    html += `<li>${citation}</li>\\n`;\n  });\n  html += '</ol>';\n  return html;\n}\n\n// Helper function to get random date between May 2024 and October 2024\nfunction getRandomPublishDate(isFeatured: boolean): Date {\n  const startDate = new Date('2024-05-01');\n  const endDate = new Date('2024-10-31');\n  \n  // If featured, make it from last 2 months (Sept-Oct 2024)\n  if (isFeatured) {\n    const featuredStartDate = new Date('2024-09-01');\n    const timeDiff = endDate.getTime() - featuredStartDate.getTime();\n    const randomTime = Math.random() * timeDiff;\n    return new Date(featuredStartDate.getTime() + randomTime);\n  }\n  \n  // Otherwise, random date in full range\n  const timeDiff = endDate.getTime() - startDate.getTime();\n  const randomTime = Math.random() * timeDiff;\n  return new Date(startDate.getTime() + randomTime);\n}\n\nasync function updateGuidesWithCitations() {\n  console.log('Starting guide update process...');\n  \n  try {\n    // Fetch all guides\n    const allGuides = await db.select().from(guides);\n    console.log(`Found ${allGuides.length} guides to update`);\n    \n    if (allGuides.length === 0) {\n      console.log('No guides found in database. Please run the generate-guides script first.');\n      return;\n    }\n    \n    let updatedCount = 0;\n    let featuredCount = 0;\n    \n    // Process each guide\n    for (const guide of allGuides) {\n      try {\n        let updatedContent = guide.content;\n        \n        // Remove existing generic references section if present\n        // Look for the generic references pattern\n        const genericReferencesPattern = /### References\\s*\\n1\\. PubMed Central[^]*?(?=\\n---|\\n\\*\\*Last Updated|\\$)/;\n        \n        if (genericReferencesPattern.test(updatedContent)) {\n          // Replace generic references with actual research citations\n          const citations = getRelevantCitations(guide.content, guide.title);\n          const citationsHtml = formatCitationsHtml(citations);\n          updatedContent = updatedContent.replace(genericReferencesPattern, citationsHtml.trim());\n        } else {\n          // Check if guide already has proper citations (to avoid duplicating)\n          const hasProperReferences = updatedContent.includes('<h2>References</h2>');\n          \n          if (!hasProperReferences) {\n            const citations = getRelevantCitations(guide.content, guide.title);\n            const citationsHtml = formatCitationsHtml(citations);\n            \n            // Add citations before the disclaimer if it exists, otherwise at the end\n            if (updatedContent.includes('*Disclaimer:')) {\n              const disclaimerIndex = updatedContent.indexOf('*Disclaimer:');\n              updatedContent = \n                updatedContent.substring(0, disclaimerIndex) + \n                citationsHtml + '\\n\\n---\\n\\n' +\n                updatedContent.substring(disclaimerIndex);\n            } else {\n              updatedContent += citationsHtml;\n            }\n          }\n        }\n        \n        // Generate random publication date\n        const newPublishDate = getRandomPublishDate(guide.featured);\n        \n        // Update the guide\n        await db\n          .update(guides)\n          .set({\n            content: updatedContent,\n            publishDate: newPublishDate,\n            lastUpdated: new Date() // Set to current date\n          })\n          .where(eq(guides.id, guide.id));\n        \n        updatedCount++;\n        if (guide.featured) featuredCount++;\n        \n        console.log(`✓ Updated guide: ${guide.title} (${guide.featured ? 'Featured' : 'Regular'})`);\n        \n      } catch (error) {\n        console.error(`Error updating guide \"${guide.title}\":`, error);\n      }\n    }\n    \n    console.log('\\n=== Update Summary ===');\n    console.log(`Total guides updated: ${updatedCount}/${allGuides.length}`);\n    console.log(`Featured guides updated: ${featuredCount}`);\n    console.log(`Regular guides updated: ${updatedCount - featuredCount}`);\n    console.log('✅ Guide update process completed successfully!');\n    \n  } catch (error) {\n    console.error('Error in update process:', error);\n    process.exit(1);\n  }\n}\n\n// Run the update\nupdateGuidesWithCitations()\n  .then(() => {\n    console.log('Script execution completed');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('Script execution failed:', error);\n    process.exit(1);\n  });","size_bytes":16833},"server/auto-import.ts":{"content":"import { readFileSync, existsSync } from 'fs';\nimport { parse } from 'csv-parse/sync';\nimport { db } from './db';\nimport { categories, peptides } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\nimport type { InsertCategory, InsertPeptide } from '@shared/schema';\n\n// Type for CSV row\ninterface CSVRow {\n  ID: string;\n  Type: string;\n  SKU: string;\n  Name: string;\n  Published: string;\n  'Is featured?': string;\n  'Visibility in catalog': string;\n  'Short description': string;\n  Description: string;\n  'Date sale price starts': string;\n  'Date sale price ends': string;\n  'Tax status': string;\n  'Tax class': string;\n  'In stock?': string;\n  Stock: string;\n  'Low stock amount': string;\n  'Backorders allowed?': string;\n  'Sold individually?': string;\n  'Weight (kg)': string;\n  'Length (cm)': string;\n  'Width (cm)': string;\n  'Height (cm)': string;\n  'Allow customer reviews?': string;\n  'Purchase note': string;\n  'Sale price': string;\n  'Regular price': string;\n  Categories: string;\n  Tags: string;\n  'Shipping class': string;\n  Images: string;\n  'Download limit': string;\n  'Download expiry days': string;\n  Parent: string;\n  'Grouped products': string;\n  Upsells: string;\n  'Cross-sells': string;\n  'External URL': string;\n  'Button text': string;\n  Position: string;\n}\n\n// Helper function to parse dosage from name\nfunction parseDosage(name: string): string | null {\n  const matches = name.match(/\\(([^)]+)\\)/g);\n  if (matches && matches.length > 0) {\n    return matches.map(m => m.slice(1, -1)).join(', ');\n  }\n  return null;\n}\n\n// Helper function to extract ingredients from blend names\nfunction parseIngredients(name: string): string[] | null {\n  // Check if it's a blend by looking for multiple components separated by \"/\"\n  const parts = name.split('/').map(p => p.trim());\n  \n  if (parts.length > 1) {\n    // Extract just the peptide names with dosages\n    return parts.map(part => {\n      // Remove any leading blend names or numbers\n      const cleanPart = part.replace(/^(2X |4X |GLOW |KLOW |Wolverine Blend - )/i, '').trim();\n      return cleanPart;\n    });\n  }\n  \n  return null;\n}\n\n// Helper function to generate slug from name\nfunction generateSlug(name: string): string {\n  return name\n    .toLowerCase()\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/^-|-$/g, '');\n}\n\nasync function checkAndImportPeptides(): Promise<boolean> {\n  try {\n    console.log('🔍 Checking if peptides exist in database...');\n    \n    // Check if peptides table has any data\n    const existingPeptides = await db.select().from(peptides).limit(1);\n    \n    if (existingPeptides.length > 0) {\n      console.log('✅ Peptides already exist in database. Skipping import.');\n      return false;\n    }\n    \n    console.log('⚠️  No peptides found in database. Starting automatic import...');\n    \n    // Check if CSV file exists\n    const csvPath = './attached_assets/woocommerce_complete_catalog_1758953826416.csv';\n    \n    if (!existsSync(csvPath)) {\n      console.error('❌ CSV file not found at:', csvPath);\n      console.error('Please ensure the catalog CSV file is available at the expected location.');\n      return false;\n    }\n    \n    console.log('📁 CSV file found. Starting import process...');\n    \n    // Read and parse CSV\n    const csvContent = readFileSync(csvPath, 'utf-8');\n    const records: CSVRow[] = parse(csvContent, {\n      columns: true,\n      skip_empty_lines: true,\n      trim: true\n    });\n    \n    console.log(`📊 Found ${records.length} products in CSV`);\n    \n    // Extract unique categories\n    const uniqueCategories = new Set<string>();\n    records.forEach(record => {\n      if (record.Categories) {\n        uniqueCategories.add(record.Categories);\n      }\n    });\n    \n    console.log(`📂 Found ${uniqueCategories.size} unique categories`);\n    \n    // Create category map to store category IDs\n    const categoryMap = new Map<string, string>();\n    \n    // Insert categories\n    for (const categoryName of Array.from(uniqueCategories)) {\n      const slug = generateSlug(categoryName);\n      \n      // Check if category already exists\n      const existing = await db\n        .select()\n        .from(categories)\n        .where(eq(categories.slug, slug))\n        .limit(1);\n      \n      if (existing.length > 0) {\n        categoryMap.set(categoryName, existing[0].id);\n      } else {\n        const categoryData: InsertCategory = {\n          name: categoryName,\n          slug: slug,\n          description: `Research peptides in the ${categoryName} category`\n        };\n        \n        const [newCategory] = await db\n          .insert(categories)\n          .values(categoryData)\n          .returning();\n        \n        console.log(`  ✓ Created category: ${categoryName}`);\n        categoryMap.set(categoryName, newCategory.id);\n      }\n    }\n    \n    // Insert peptides\n    let successCount = 0;\n    let skipCount = 0;\n    \n    for (const record of records) {\n      // Skip if no SKU or empty record\n      if (!record.SKU || !record.Name) {\n        skipCount++;\n        continue;\n      }\n      \n      // Check if peptide already exists (should not happen in empty DB, but being safe)\n      const existing = await db\n        .select()\n        .from(peptides)\n        .where(eq(peptides.sku, record.SKU))\n        .limit(1);\n      \n      if (existing.length > 0) {\n        skipCount++;\n        continue;\n      }\n      \n      // Determine if it's a blend\n      const isBlend = record.Categories === 'Blends' || \n                     record.Name.includes('/') || \n                     record.Name.toLowerCase().includes('blend');\n      \n      // Parse ingredients for blends\n      const ingredients = isBlend ? parseIngredients(record.Name) : undefined;\n      \n      // Parse dosage\n      const dosage = parseDosage(record.Name);\n      \n      // Parse price (remove any non-numeric characters except decimal)\n      const priceStr = record['Regular price'].replace(/[^0-9.]/g, '');\n      const price = parseFloat(priceStr) || 0;\n      \n      // Get category ID\n      const categoryId = record.Categories ? categoryMap.get(record.Categories) : null;\n      \n      // Extract research applications from tags\n      const tags = record.Tags ? record.Tags.split(',').map(t => t.trim()) : [];\n      const researchApplications = tags.filter(tag => \n        !tag.includes('mg') && \n        !tag.includes('mcg') &&\n        !tag.includes('peptide') &&\n        !tag.includes('research chemicals')\n      ).join(', ') || undefined;\n      \n      const peptideData: InsertPeptide = {\n        name: record.Name,\n        sku: record.SKU,\n        categoryId: categoryId || null,\n        shortDescription: record['Short description'] || null,\n        description: record.Description || null,\n        dosage: dosage,\n        price: price.toString(),\n        isBlend: isBlend,\n        ingredients: ingredients,\n        researchApplications: researchApplications,\n        alternateNames: undefined\n      };\n      \n      try {\n        await db.insert(peptides).values(peptideData);\n        successCount++;\n        // Log progress every 10 peptides\n        if (successCount % 10 === 0) {\n          console.log(`  ⏳ Imported ${successCount} peptides...`);\n        }\n      } catch (error) {\n        console.error(`  ⚠️  Failed to import ${record.Name}:`, error);\n        skipCount++;\n      }\n    }\n    \n    console.log('\\n🎉 AUTOMATIC IMPORT COMPLETE!');\n    console.log(`  ✅ Successfully imported: ${successCount} peptides`);\n    console.log(`  ⏩ Skipped/Failed: ${skipCount} records`);\n    console.log(`  📂 Total categories: ${categoryMap.size}`);\n    \n    return true;\n  } catch (error) {\n    console.error('❌ AUTOMATIC IMPORT FAILED:', error);\n    console.error('The application will continue, but no peptides will be available.');\n    return false;\n  }\n}\n\nexport { checkAndImportPeptides };","size_bytes":7830},"database_erd.md":{"content":"# Peptide Dojo Database Entity Relationship Diagram\n\n## Tables\n\n### Categories\n```\ncategories\n├── id (UUID, PK)\n├── name (TEXT, NOT NULL)\n├── slug (VARCHAR(255), UNIQUE, NOT NULL)\n└── description (TEXT)\n```\n\n### Peptides\n```\npeptides\n├── id (UUID, PK)\n├── name (TEXT, NOT NULL)\n├── sku (VARCHAR(255), UNIQUE, NOT NULL)\n├── alternate_names (TEXT[])\n├── category_id (UUID, FK → categories.id)\n├── short_description (TEXT)\n├── description (TEXT)\n├── dosage (TEXT)\n├── price (NUMERIC(10,2), NOT NULL)\n├── is_blend (BOOLEAN, DEFAULT false)\n├── ingredients (TEXT[]) -- For blends\n└── research_applications (TEXT)\n```\n\n### Guides\n```\nguides\n├── id (UUID, PK)\n├── slug (VARCHAR(255), UNIQUE, NOT NULL)\n├── title (TEXT, NOT NULL)\n├── meta_title (VARCHAR(60), NOT NULL) -- SEO optimized\n├── meta_description (VARCHAR(160), NOT NULL) -- SEO optimized\n├── content (TEXT, NOT NULL)\n├── excerpt (TEXT)\n├── category (TEXT, NOT NULL)\n├── tags (TEXT[])\n├── related_peptides (UUID[]) -- Array of peptide IDs\n├── author (TEXT, NOT NULL)\n├── publish_date (TIMESTAMP, NOT NULL, DEFAULT NOW())\n├── last_updated (TIMESTAMP, NOT NULL, DEFAULT NOW())\n├── featured (BOOLEAN, DEFAULT false)\n├── read_time (INTEGER, NOT NULL) -- in minutes\n└── keywords (TEXT[]) -- SEO keywords\n```\n\n### Protocols\n```\nprotocols\n├── id (UUID, PK)\n├── name (TEXT, NOT NULL)\n├── description (TEXT)\n├── peptides (UUID[]) -- Array of peptide IDs\n├── duration (TEXT)\n└── instructions (TEXT[])\n```\n\n### Users\n```\nusers\n├── id (VARCHAR, PK, DEFAULT gen_random_uuid())\n├── username (TEXT, UNIQUE, NOT NULL)\n└── password (TEXT, NOT NULL)\n```\n\n## Relationships\n\n```\ncategories ||--o{ peptides : \"category_id\"\nguides }o--o{ peptides : \"related_peptides (array)\"\nprotocols }o--o{ peptides : \"peptides (array)\"\n```\n\n## Data Summary (Current State)\n\n- **Guides**: 111 total\n  - Research Summaries: 15\n  - Beginner Guides: 15  \n  - Condition-Specific Guides: 20\n  - Peptide Deep Dives: 25\n  - Safety & Protocols: 12\n  - Other categories: 24\n\n- **Peptides**: 128 total (from Shrine Peptides catalog)\n- **Categories**: Multiple categories for peptide organization\n\n## Key Features\n\n- **SEO Optimized**: Guides table includes meta_title (60 char limit) and meta_description (160 char limit)\n- **Array Fields**: PostgreSQL arrays used for tags, keywords, related_peptides, ingredients\n- **UUID Primary Keys**: All main entities use UUID for distributed system compatibility\n- **Full-Text Content**: Rich HTML content with research citations and product links\n- **Timestamp Tracking**: Automatic publish_date and last_updated timestamps","size_bytes":2818},"client/src/components/AuthorCard.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  User, \n  GraduationCap, \n  Building, \n  Mail, \n  ExternalLink,\n  FileText\n} from \"lucide-react\";\nimport type { Author } from \"@shared/schema\";\n\ninterface AuthorCardProps {\n  author: Author;\n  variant?: \"full\" | \"compact\";\n}\n\nexport default function AuthorCard({ author, variant = \"compact\" }: AuthorCardProps) {\n  const initials = author.name\n    .split(' ')\n    .map(n => n[0])\n    .join('')\n    .toUpperCase()\n    .slice(0, 2);\n\n  if (variant === \"compact\") {\n    return (\n      <div className=\"flex items-center gap-3\" data-testid={`author-compact-${author.id}`}>\n        <Avatar className=\"w-8 h-8\">\n          <AvatarFallback className=\"text-xs\">{initials}</AvatarFallback>\n        </Avatar>\n        <div className=\"flex flex-col\">\n          <span className=\"font-medium text-sm\" data-testid=\"text-author-name\">\n            {author.name}\n          </span>\n          {author.credentials && author.credentials.length > 0 && (\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-author-primary-credential\">\n              {author.credentials[0]}\n            </span>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\" data-testid={`author-card-${author.id}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start gap-4\">\n          <Avatar className=\"w-16 h-16\">\n            <AvatarFallback className=\"text-lg font-semibold\">{initials}</AvatarFallback>\n          </Avatar>\n          \n          <div className=\"flex-1 space-y-3\">\n            <div>\n              <h3 className=\"text-xl font-semibold\" data-testid=\"text-author-name\">\n                {author.name}\n              </h3>\n              {author.affiliation && (\n                <div className=\"flex items-center gap-1 text-muted-foreground mt-1\">\n                  <Building className=\"w-4 h-4\" />\n                  <span className=\"text-sm\" data-testid=\"text-author-affiliation\">\n                    {author.affiliation}\n                  </span>\n                </div>\n              )}\n            </div>\n\n            {author.bio && (\n              <p className=\"text-sm text-muted-foreground leading-relaxed\" data-testid=\"text-author-bio\">\n                {author.bio}\n              </p>\n            )}\n\n            {author.credentials && author.credentials.length > 0 && (\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-1 text-sm font-medium\">\n                  <GraduationCap className=\"w-4 h-4\" />\n                  Credentials\n                </div>\n                <div className=\"flex flex-wrap gap-1\" data-testid=\"list-author-credentials\">\n                  {author.credentials.map((credential, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                      {credential}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {author.expertise && author.expertise.length > 0 && (\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-1 text-sm font-medium\">\n                  <FileText className=\"w-4 h-4\" />\n                  Expertise\n                </div>\n                <div className=\"flex flex-wrap gap-1\" data-testid=\"list-author-expertise\">\n                  {author.expertise.map((area, index) => (\n                    <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                      {area}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {author.publications && (\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-1 text-sm font-medium\">\n                  <FileText className=\"w-4 h-4\" />\n                  Publications\n                </div>\n                <p className=\"text-xs text-muted-foreground\" data-testid=\"text-author-publications\">\n                  {author.publications}\n                </p>\n              </div>\n            )}\n\n            <div className=\"flex gap-2 pt-2\">\n              {author.contactEmail && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"text-xs\"\n                  data-testid=\"button-author-email\"\n                  asChild\n                >\n                  <a href={`mailto:${author.contactEmail}`}>\n                    <Mail className=\"w-3 h-3 mr-1\" />\n                    Contact\n                  </a>\n                </Button>\n              )}\n              \n              {author.linkedinUrl && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"text-xs\"\n                  data-testid=\"button-author-linkedin\"\n                  asChild\n                >\n                  <a href={author.linkedinUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <ExternalLink className=\"w-3 h-3 mr-1\" />\n                    LinkedIn\n                  </a>\n                </Button>\n              )}\n              \n              {author.researchGateUrl && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"text-xs\"\n                  data-testid=\"button-author-researchgate\"\n                  asChild\n                >\n                  <a href={author.researchGateUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <ExternalLink className=\"w-3 h-3 mr-1\" />\n                    ResearchGate\n                  </a>\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5964},"client/src/components/CitationCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ExternalLink, FileText, Users } from \"lucide-react\";\n\ninterface Citation {\n  id: string;\n  title: string;\n  authors: string[];\n  journal: string;\n  year: number;\n  pmid?: string;\n  doi?: string;\n  url?: string;\n  type: \"primary\" | \"secondary\" | \"meta-analysis\" | \"review\";\n}\n\ninterface CitationCardProps {\n  citation: Citation;\n  variant?: \"full\" | \"compact\";\n}\n\nexport default function CitationCard({ citation, variant = \"compact\" }: CitationCardProps) {\n  const getTypeColor = (type: Citation[\"type\"]) => {\n    switch (type) {\n      case \"primary\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"meta-analysis\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      case \"review\":\n        return \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const formatAuthors = (authors: string[]) => {\n    if (authors.length <= 3) {\n      return authors.join(\", \");\n    }\n    return `${authors.slice(0, 2).join(\", \")} et al.`;\n  };\n\n  if (variant === \"compact\") {\n    return (\n      <div className=\"p-3 border rounded-lg bg-card\" data-testid={`citation-compact-${citation.id}`}>\n        <div className=\"flex items-start gap-2\">\n          <FileText className=\"w-4 h-4 mt-0.5 text-muted-foreground\" />\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <Badge className={`text-xs ${getTypeColor(citation.type)}`}>\n                {citation.type.replace(\"-\", \" \")}\n              </Badge>\n              <span className=\"text-xs text-muted-foreground\">\n                {citation.year}\n              </span>\n            </div>\n            \n            <h4 className=\"text-sm font-medium leading-snug mb-1\" data-testid=\"text-citation-title\">\n              {citation.title}\n            </h4>\n            \n            <div className=\"flex items-center gap-1 text-xs text-muted-foreground mb-2\">\n              <Users className=\"w-3 h-3\" />\n              <span data-testid=\"text-citation-authors\">\n                {formatAuthors(citation.authors)}\n              </span>\n            </div>\n            \n            <p className=\"text-xs text-muted-foreground italic\" data-testid=\"text-citation-journal\">\n              {citation.journal}\n            </p>\n            \n            {(citation.pmid || citation.doi || citation.url) && (\n              <div className=\"flex gap-1 mt-2\">\n                {citation.pmid && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"h-6 text-xs\"\n                    data-testid=\"button-citation-pmid\"\n                    asChild\n                  >\n                    <a \n                      href={`https://pubmed.ncbi.nlm.nih.gov/${citation.pmid}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      PubMed\n                    </a>\n                  </Button>\n                )}\n                \n                {citation.doi && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"h-6 text-xs\"\n                    data-testid=\"button-citation-doi\"\n                    asChild\n                  >\n                    <a \n                      href={`https://doi.org/${citation.doi}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      DOI\n                    </a>\n                  </Button>\n                )}\n                \n                {citation.url && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"h-6 text-xs\"\n                    data-testid=\"button-citation-url\"\n                    asChild\n                  >\n                    <a href={citation.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <ExternalLink className=\"w-3 h-3\" />\n                    </a>\n                  </Button>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\" data-testid={`citation-full-${citation.id}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start gap-4\">\n          <div className=\"p-2 rounded-lg bg-muted\">\n            <FileText className=\"w-6 h-6 text-muted-foreground\" />\n          </div>\n          \n          <div className=\"flex-1 space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Badge className={getTypeColor(citation.type)}>\n                {citation.type.replace(\"-\", \" \").toUpperCase()}\n              </Badge>\n              <span className=\"text-sm text-muted-foreground font-medium\">\n                {citation.year}\n              </span>\n            </div>\n            \n            <h3 className=\"text-lg font-semibold leading-snug\" data-testid=\"text-citation-title\">\n              {citation.title}\n            </h3>\n            \n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <Users className=\"w-4 h-4\" />\n              <span className=\"text-sm\" data-testid=\"text-citation-authors\">\n                {formatAuthors(citation.authors)}\n              </span>\n            </div>\n            \n            <p className=\"text-sm text-muted-foreground italic\" data-testid=\"text-citation-journal\">\n              {citation.journal}, {citation.year}\n            </p>\n            \n            <div className=\"flex gap-2 pt-2\">\n              {citation.pmid && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  data-testid=\"button-citation-pmid\"\n                  asChild\n                >\n                  <a \n                    href={`https://pubmed.ncbi.nlm.nih.gov/${citation.pmid}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    PubMed: {citation.pmid}\n                  </a>\n                </Button>\n              )}\n              \n              {citation.doi && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  data-testid=\"button-citation-doi\"\n                  asChild\n                >\n                  <a \n                    href={`https://doi.org/${citation.doi}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    DOI: {citation.doi}\n                  </a>\n                </Button>\n              )}\n              \n              {citation.url && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  data-testid=\"button-citation-url\"\n                  asChild\n                >\n                  <a href={citation.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                    <ExternalLink className=\"w-4 h-4 mr-1\" />\n                    View Article\n                  </a>\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7516},"client/src/components/ResearchFAQ.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { ChevronDown, HelpCircle } from \"lucide-react\";\n\ninterface FAQItem {\n  id: string;\n  question: string;\n  answer: string;\n  category?: string;\n}\n\ninterface ResearchFAQProps {\n  title?: string;\n  faqs: FAQItem[];\n  defaultOpen?: string[]; // IDs of FAQs to open by default\n}\n\nexport default function ResearchFAQ({ title = \"Frequently Asked Questions\", faqs, defaultOpen = [] }: ResearchFAQProps) {\n  const [openItems, setOpenItems] = useState<Set<string>>(new Set(defaultOpen));\n\n  const toggleItem = (id: string) => {\n    const newOpenItems = new Set(openItems);\n    if (newOpenItems.has(id)) {\n      newOpenItems.delete(id);\n    } else {\n      newOpenItems.add(id);\n    }\n    setOpenItems(newOpenItems);\n  };\n\n  // Generate Schema.org FAQPage structured data\n  const faqSchema = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"FAQPage\",\n    \"mainEntity\": faqs.map(faq => ({\n      \"@type\": \"Question\",\n      \"name\": faq.question,\n      \"acceptedAnswer\": {\n        \"@type\": \"Answer\",\n        \"text\": faq.answer\n      }\n    }))\n  };\n\n  return (\n    <>\n      {/* FAQ Schema for SEO */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(faqSchema) }}\n      />\n      \n      <Card className=\"w-full\" data-testid=\"research-faq-container\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-2 rounded-lg bg-primary/10\">\n              <HelpCircle className=\"w-5 h-5 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-semibold\" data-testid=\"text-faq-title\">\n              {title}\n            </h3>\n          </div>\n\n          <div className=\"space-y-3\" data-testid=\"list-faq-items\">\n            {faqs.map((faq) => (\n              <Collapsible\n                key={faq.id}\n                open={openItems.has(faq.id)}\n                onOpenChange={() => toggleItem(faq.id)}\n              >\n                <CollapsibleTrigger \n                  className=\"w-full group\"\n                  data-testid={`button-faq-toggle-${faq.id}`}\n                >\n                  <div className=\"flex items-center justify-between w-full p-4 rounded-lg border hover-elevate transition-all text-left\">\n                    <h4 className=\"font-medium text-sm leading-relaxed pr-4\" data-testid={`text-faq-question-${faq.id}`}>\n                      {faq.question}\n                    </h4>\n                    <ChevronDown \n                      className={`w-4 h-4 text-muted-foreground transition-transform shrink-0 ${\n                        openItems.has(faq.id) ? 'rotate-180' : ''\n                      }`}\n                    />\n                  </div>\n                </CollapsibleTrigger>\n                \n                <CollapsibleContent>\n                  <div className=\"px-4 py-3 text-sm text-muted-foreground leading-relaxed\" data-testid={`text-faq-answer-${faq.id}`}>\n                    {faq.answer}\n                  </div>\n                </CollapsibleContent>\n              </Collapsible>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n}","size_bytes":3328},"client/src/components/ResearchProtocol.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  FlaskConical, \n  Clock, \n  Users, \n  Target, \n  AlertTriangle,\n  CheckCircle,\n  Activity\n} from \"lucide-react\";\n\ninterface ProtocolStep {\n  id: string;\n  step: number;\n  title: string;\n  description: string;\n  duration?: string;\n  notes?: string;\n}\n\ninterface ResearchProtocolProps {\n  protocol: {\n    id: string;\n    title: string;\n    objective: string;\n    duration: string;\n    sampleSize?: string;\n    methodology: string;\n    inclusion?: string[];\n    exclusion?: string[];\n    steps: ProtocolStep[];\n    safetyNotes?: string[];\n    expectedOutcomes?: string[];\n  };\n}\n\nexport default function ResearchProtocol({ protocol }: ResearchProtocolProps) {\n  return (\n    <Card className=\"w-full\" data-testid={`protocol-card-${protocol.id}`}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-start gap-3\">\n          <div className=\"p-2 rounded-lg bg-primary/10\">\n            <FlaskConical className=\"w-5 h-5 text-primary\" />\n          </div>\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-xl mb-2\" data-testid=\"text-protocol-title\">\n              {protocol.title}\n            </CardTitle>\n            <p className=\"text-muted-foreground text-sm leading-relaxed\" data-testid=\"text-protocol-objective\">\n              {protocol.objective}\n            </p>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* Protocol Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"flex items-center gap-2 p-3 rounded-lg bg-muted/50\">\n            <Clock className=\"w-4 h-4 text-muted-foreground\" />\n            <div>\n              <p className=\"text-xs font-medium text-muted-foreground\">Duration</p>\n              <p className=\"text-sm font-semibold\" data-testid=\"text-protocol-duration\">\n                {protocol.duration}\n              </p>\n            </div>\n          </div>\n\n          {protocol.sampleSize && (\n            <div className=\"flex items-center gap-2 p-3 rounded-lg bg-muted/50\">\n              <Users className=\"w-4 h-4 text-muted-foreground\" />\n              <div>\n                <p className=\"text-xs font-medium text-muted-foreground\">Sample Size</p>\n                <p className=\"text-sm font-semibold\" data-testid=\"text-protocol-sample-size\">\n                  {protocol.sampleSize}\n                </p>\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex items-center gap-2 p-3 rounded-lg bg-muted/50\">\n            <Target className=\"w-4 h-4 text-muted-foreground\" />\n            <div>\n              <p className=\"text-xs font-medium text-muted-foreground\">Study Type</p>\n              <p className=\"text-sm font-semibold\" data-testid=\"text-protocol-methodology\">\n                {protocol.methodology}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Inclusion/Exclusion Criteria */}\n        {(protocol.inclusion || protocol.exclusion) && (\n          <>\n            <Separator />\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {protocol.inclusion && (\n                <div>\n                  <h4 className=\"flex items-center gap-2 font-semibold text-sm mb-3\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                    Inclusion Criteria\n                  </h4>\n                  <ul className=\"space-y-2\" data-testid=\"list-protocol-inclusion\">\n                    {protocol.inclusion.map((criteria, index) => (\n                      <li key={index} className=\"flex items-start gap-2 text-sm\">\n                        <div className=\"w-1.5 h-1.5 rounded-full bg-green-600 mt-2 shrink-0\" />\n                        {criteria}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {protocol.exclusion && (\n                <div>\n                  <h4 className=\"flex items-center gap-2 font-semibold text-sm mb-3\">\n                    <AlertTriangle className=\"w-4 h-4 text-red-600\" />\n                    Exclusion Criteria\n                  </h4>\n                  <ul className=\"space-y-2\" data-testid=\"list-protocol-exclusion\">\n                    {protocol.exclusion.map((criteria, index) => (\n                      <li key={index} className=\"flex items-start gap-2 text-sm\">\n                        <div className=\"w-1.5 h-1.5 rounded-full bg-red-600 mt-2 shrink-0\" />\n                        {criteria}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n            </div>\n          </>\n        )}\n\n        {/* Protocol Steps */}\n        <Separator />\n        <div>\n          <h4 className=\"flex items-center gap-2 font-semibold text-sm mb-4\">\n            <Activity className=\"w-4 h-4 text-primary\" />\n            Protocol Steps\n          </h4>\n          <div className=\"space-y-4\" data-testid=\"list-protocol-steps\">\n            {protocol.steps.map((step, index) => (\n              <div key={step.id} className=\"flex gap-4\">\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center text-primary font-semibold text-sm\">\n                    {step.step}\n                  </div>\n                  {index < protocol.steps.length - 1 && (\n                    <div className=\"w-0.5 h-12 bg-border mt-2\" />\n                  )}\n                </div>\n                \n                <div className=\"flex-1 pb-6\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <h5 className=\"font-semibold text-sm\" data-testid={`text-step-title-${step.id}`}>\n                      {step.title}\n                    </h5>\n                    {step.duration && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {step.duration}\n                      </Badge>\n                    )}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed mb-2\" data-testid={`text-step-description-${step.id}`}>\n                    {step.description}\n                  </p>\n                  {step.notes && (\n                    <p className=\"text-xs text-muted-foreground italic p-2 bg-muted/30 rounded\">\n                      Note: {step.notes}\n                    </p>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Safety Notes */}\n        {protocol.safetyNotes && protocol.safetyNotes.length > 0 && (\n          <>\n            <Separator />\n            <div>\n              <h4 className=\"flex items-center gap-2 font-semibold text-sm mb-3\">\n                <AlertTriangle className=\"w-4 h-4 text-amber-600\" />\n                Safety Considerations\n              </h4>\n              <ul className=\"space-y-2\" data-testid=\"list-protocol-safety\">\n                {protocol.safetyNotes.map((note, index) => (\n                  <li key={index} className=\"flex items-start gap-2 text-sm\">\n                    <div className=\"w-1.5 h-1.5 rounded-full bg-amber-600 mt-2 shrink-0\" />\n                    {note}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </>\n        )}\n\n        {/* Expected Outcomes */}\n        {protocol.expectedOutcomes && protocol.expectedOutcomes.length > 0 && (\n          <>\n            <Separator />\n            <div>\n              <h4 className=\"flex items-center gap-2 font-semibold text-sm mb-3\">\n                <Target className=\"w-4 h-4 text-primary\" />\n                Expected Outcomes\n              </h4>\n              <ul className=\"space-y-2\" data-testid=\"list-protocol-outcomes\">\n                {protocol.expectedOutcomes.map((outcome, index) => (\n                  <li key={index} className=\"flex items-start gap-2 text-sm\">\n                    <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2 shrink-0\" />\n                    {outcome}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8383},"client/src/components/ScientificEnhancer.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Microscope, \n  BookOpen, \n  Award, \n  TrendingUp,\n  Users,\n  Calendar\n} from \"lucide-react\";\n\ninterface StudyEvidence {\n  level: \"high\" | \"moderate\" | \"low\";\n  description: string;\n  studyCount?: number;\n}\n\ninterface ScientificEnhancerProps {\n  topic: string;\n  evidenceLevel: StudyEvidence;\n  keyFindings: string[];\n  researchDate?: string;\n  participantCount?: string;\n  confidenceLevel?: string;\n  variant?: \"full\" | \"compact\";\n}\n\nexport default function ScientificEnhancer({\n  topic,\n  evidenceLevel,\n  keyFindings,\n  researchDate,\n  participantCount,\n  confidenceLevel,\n  variant = \"compact\"\n}: ScientificEnhancerProps) {\n  \n  const getEvidenceColor = (level: StudyEvidence[\"level\"]) => {\n    switch (level) {\n      case \"high\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"moderate\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"low\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const getEvidenceIcon = (level: StudyEvidence[\"level\"]) => {\n    switch (level) {\n      case \"high\":\n        return <Award className=\"w-4 h-4\" />;\n      case \"moderate\":\n        return <TrendingUp className=\"w-4 h-4\" />;\n      case \"low\":\n        return <BookOpen className=\"w-4 h-4\" />;\n      default:\n        return <Microscope className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (variant === \"compact\") {\n    return (\n      <div className=\"p-4 border-l-4 border-l-primary bg-muted/30 rounded-r-lg\" data-testid={`scientific-enhancer-compact-${topic.toLowerCase().replace(/\\s+/g, '-')}`}>\n        <div className=\"flex items-start gap-3\">\n          <div className=\"p-1.5 rounded bg-primary/10\">\n            <Microscope className=\"w-4 h-4 text-primary\" />\n          </div>\n          <div className=\"flex-1 space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <Badge className={`text-xs ${getEvidenceColor(evidenceLevel.level)}`}>\n                {getEvidenceIcon(evidenceLevel.level)}\n                <span className=\"ml-1\">{evidenceLevel.level.toUpperCase()} EVIDENCE</span>\n              </Badge>\n              {evidenceLevel.studyCount && (\n                <span className=\"text-xs text-muted-foreground\">\n                  {evidenceLevel.studyCount} studies\n                </span>\n              )}\n            </div>\n            \n            <p className=\"text-sm font-medium\" data-testid=\"text-evidence-description\">\n              {evidenceLevel.description}\n            </p>\n            \n            {keyFindings.length > 0 && (\n              <ul className=\"text-xs text-muted-foreground space-y-1\" data-testid=\"list-key-findings\">\n                {keyFindings.slice(0, 2).map((finding, index) => (\n                  <li key={index} className=\"flex items-start gap-1\">\n                    <span className=\"text-primary\">•</span>\n                    {finding}\n                  </li>\n                ))}\n                {keyFindings.length > 2 && (\n                  <li className=\"text-xs font-medium text-primary\">\n                    +{keyFindings.length - 2} more findings\n                  </li>\n                )}\n              </ul>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\" data-testid={`scientific-enhancer-full-${topic.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-start gap-3\">\n          <div className=\"p-2 rounded-lg bg-primary/10\">\n            <Microscope className=\"w-5 h-5 text-primary\" />\n          </div>\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-lg\" data-testid=\"text-scientific-topic\">\n              Scientific Evidence: {topic}\n            </CardTitle>\n            <div className=\"flex items-center gap-2 mt-2\">\n              <Badge className={getEvidenceColor(evidenceLevel.level)}>\n                {getEvidenceIcon(evidenceLevel.level)}\n                <span className=\"ml-1\">{evidenceLevel.level.toUpperCase()} EVIDENCE</span>\n              </Badge>\n              {evidenceLevel.studyCount && (\n                <span className=\"text-sm text-muted-foreground\">\n                  Based on {evidenceLevel.studyCount} studies\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        <p className=\"text-sm leading-relaxed\" data-testid=\"text-evidence-description\">\n          {evidenceLevel.description}\n        </p>\n\n        {/* Study Metadata */}\n        {(researchDate || participantCount || confidenceLevel) && (\n          <>\n            <Separator />\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {researchDate && (\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                  <div>\n                    <p className=\"text-xs font-medium text-muted-foreground\">Research Period</p>\n                    <p className=\"text-sm font-semibold\" data-testid=\"text-research-date\">\n                      {researchDate}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {participantCount && (\n                <div className=\"flex items-center gap-2\">\n                  <Users className=\"w-4 h-4 text-muted-foreground\" />\n                  <div>\n                    <p className=\"text-xs font-medium text-muted-foreground\">Participants</p>\n                    <p className=\"text-sm font-semibold\" data-testid=\"text-participant-count\">\n                      {participantCount}\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {confidenceLevel && (\n                <div className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-4 h-4 text-muted-foreground\" />\n                  <div>\n                    <p className=\"text-xs font-medium text-muted-foreground\">Confidence</p>\n                    <p className=\"text-sm font-semibold\" data-testid=\"text-confidence-level\">\n                      {confidenceLevel}\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </>\n        )}\n\n        {/* Key Findings */}\n        {keyFindings.length > 0 && (\n          <>\n            <Separator />\n            <div>\n              <h4 className=\"font-semibold text-sm mb-3\">Key Research Findings</h4>\n              <ul className=\"space-y-2\" data-testid=\"list-key-findings\">\n                {keyFindings.map((finding, index) => (\n                  <li key={index} className=\"flex items-start gap-2 text-sm\">\n                    <div className=\"w-1.5 h-1.5 rounded-full bg-primary mt-2 shrink-0\" />\n                    {finding}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7311}},"version":1}